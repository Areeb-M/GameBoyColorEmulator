		/*
		public byte this[int index]
		{
			
			get{
				switch ((index & 0xF000) >> 6*4){ // Use bitwise AND to get topmost nibble, bitshift right 24 bits to move down
					case 0x0:
					case 0x1:
					case 0x2:
					case 0x3:
						return rom[index];
					case 0x4:
					case 0x5:
					case 0x6:
					case 0x7:
						return rom[index + romBankOffset];
					case 0x8:
					case 0x9:
						return vram[index - 0x8000];
					case 0xA:
					case 0xB:
						return ram[index + ramBankOffset - 0x8000]; // Offset by 0x8000 to set at the start of ram banks. 
					case 0xC:
					case 0xD:
						return ram[index - 0xA000];
					case 0xE:
						return ram[index - 0xE000];
					case 0xF:
						switch ((index & 0x0F00) >> 4*4){ // Use bitwise AND to get 3rd from right nibble, bitshift right 4 to move down
							case 0xE:
								switch ((index & 0x00F0) >> 2*4){
									case 0xA:
									case 0xB:
									case 0xC:
									case 0xD:
									case 0xE:
									case 0xF:
										return (byte)0; 
									default:
										return oam[index - 0xFE00];
								}
							case 0xF:
								switch ((index & 0x00F0) >> 2*4){
									case 0x0:
									case 0x1:
									case 0x2:
									case 0x3:
										return io[index - 0xFF00];
									case 0x4:
									case 0x5:
									case 0x6:
									case 0x7:
										return (byte)0;
									default:
										return ram[index - 0xFF00 + 0x2000 * (ramBanks + 1)];					
								}
							default:                                // 0x0 - 0xD are echoes of internal ram 0xC000 - 0xDFFF
								return ram[index - 0xE000];		
						}
					default:
						return (byte)0;
				}
			}
			
			set{
				switch(cartridgeType){
					case CartridgeType.ROM_MBC5_RAM_BATT:
						writeMBC5(index, value);
						break;
				}
			}
		}	
		
		private void writeMBC5(int index, byte val){
			switch((index & 0xF000) >> 6*4){
				case 0x0:
				case 0x1:
			}
		}
		
		private void writeMBC1(int index, byte val){
			switch((index & 0xF000) >> 6*4){
				case 0x0:
				case 0x1:
					if (val & 0xA == 0xA)
						ramBankState[ramBank] = 1;
					else
						ramBankState[ramBank] = 0;					
					break;
				case 0x2:
				case 0x3:
					romBank = (byte)(val & 0x1F);
					if (romBank == 0)
						romBank = 1;
					romBankOffset = 0x2000 * romBank;
					break;
				case 0x4:
				case 0x5:
					if(memoryModel == MemoryModel.MM4x32){
						ramBank = (byte)(val & 0x3);
					} else {
						
					} // bad Tucker
					break;					
				case 0x6:
				case 0x7:
					memoryModel = (MemoryModel)(val & 0x1);
					break;
				default:
					break;
			} // end brace comment
		}
		*/