<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ultraviolet.Core</name>
    </assembly>
    <members>
        <member name="T:Ultraviolet.Core.Collections.ArrayEnumerator`1">
            <summary>
            Represents a value-type enumerator for an array.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Collections.ArrayEnumerator`1.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Collections.ArrayEnumerator`1"/> structure.
            </summary>
            <param name="array">The array that is being enumerated.</param>
        </member>
        <member name="M:Ultraviolet.Core.Collections.ArrayEnumerator`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Collections.ArrayEnumerator`1.Reset">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Collections.ArrayEnumerator`1.MoveNext">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.Core.Collections.ArrayEnumerator`1.System#Collections#IEnumerator#Current">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.Core.Collections.ArrayEnumerator`1.Current">
            <inheritdoc/>
        </member>
        <member name="T:Ultraviolet.Core.Collections.BinaryHeap`1">
            <summary>
            Represents a binary heap.
            Based on code made available at http://content.gpwiki.org/index.php/C_sharp:BinaryHeapOfT
            </summary>
            <typeparam name="T">The type of item contained by the heap.</typeparam>
        </member>
        <member name="M:Ultraviolet.Core.Collections.BinaryHeap`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Collections.BinaryHeap`1"/> class.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Collections.BinaryHeap`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Collections.BinaryHeap`1"/> class with the specified initial capacity.
            </summary>
            <param name="capacity">The initial capacity of the binary heap.</param>
        </member>
        <member name="M:Ultraviolet.Core.Collections.BinaryHeap`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Collections.BinaryHeap`1"/> class.
            </summary>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1"/> to use to compare items in the heap.</param>
        </member>
        <member name="M:Ultraviolet.Core.Collections.BinaryHeap`1.#ctor(System.Collections.Generic.IComparer{`0},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Collections.BinaryHeap`1"/> class with the specified initial capacity.
            </summary>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1"/> to use to compare items in the heap.</param>
            <param name="capacity">The initial capacity of the binary heap.</param>
        </member>
        <member name="M:Ultraviolet.Core.Collections.BinaryHeap`1.Clear">
            <summary>
            Removes all items from the heap.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Collections.BinaryHeap`1.Update(`0)">
            <summary>
            Updates the specified item's position in the heap.
            </summary>
            <param name="item">The item to update.</param>
        </member>
        <member name="M:Ultraviolet.Core.Collections.BinaryHeap`1.Add(`0)">
            <summary>
            Adds an item to the heap.
            </summary>
            <param name="item">The item to add to the heap.</param>
        </member>
        <member name="M:Ultraviolet.Core.Collections.BinaryHeap`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds all of the items in the specified collection to the heap.
            </summary>
            <param name="collection">The collection that contains the items to add to the heap.</param>
        </member>
        <member name="M:Ultraviolet.Core.Collections.BinaryHeap`1.Remove">
            <summary>
            Removes and returns the first item in the heap.
            </summary>
            <returns>The next item in the heap.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Collections.BinaryHeap`1.Peek">
            <summary>
            Retrieves the first value from the heap without removing it.
            </summary>
            <returns>The first element on the heap.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Collections.BinaryHeap`1.Remove(`0)">
            <summary>
            Removes an item from the binary heap.
            </summary>
            <param name="item">The item to be removed.</param>
            <returns><see langword="true"/> if the item was removed; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Collections.BinaryHeap`1.Contains(`0)">
            <summary>
            Gets a value indicating whether the heap contains the specified value.
            </summary>
            <param name="item">The value for which to search the heap.</param>
            <returns><see langword="true"/> if the heap contains the specified value; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Collections.BinaryHeap`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the binary heap into an array at the specified index.
            </summary>
            <param name="array">A one-dimensional array that is the destination of the copied elements.</param>
            <param name="arrayIndex">The zero-based index at which copying begins.</param>
        </member>
        <member name="M:Ultraviolet.Core.Collections.BinaryHeap`1.Copy">
            <summary>
            Creates a copy of the binary heap.
            </summary>
            <returns>A copy of the binary heap.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Collections.BinaryHeap`1.GetEnumerator">
            <summary>
            Gets an enumerator for the binary heap.
            </summary>
            <returns>An enumerator for the binary heap.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Collections.BinaryHeap`1.GetEnumeratorUnsorted">
            <summary>
            Gets an enumerator for the binary heap without sorting the heap.
            </summary>
            <returns>An enumerator for the binary heap.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Collections.BinaryHeap`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Gets an enumerator for the binary heap.
            </summary>
            <returns>An enumerator for the binary heap.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Collections.BinaryHeap`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator for the binary heap.
            </summary>
            <returns>An enumerator for the binary heap.</returns>
        </member>
        <member name="P:Ultraviolet.Core.Collections.BinaryHeap`1.Count">
            <summary>
            Gets the number of items in the heap.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Collections.BinaryHeap`1.Capacity">
            <summary>
            Gets the heap's current capacity.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Collections.BinaryHeap`1.IsReadOnly">
            <summary>
            Gets a value indicating whether this a read-only collection.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Collections.BinaryHeap`1.IsEmpty">
            <summary>
            Gets a value indicating whether the queue is empty.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Collections.BinaryHeap`1.GetParent(System.Int32)">
            <summary>
            Gets the parent of the specified item.
            </summary>
            <param name="ix">The index of the item to evaluate.</param>
            <returns>The index of the parent of the specified item.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Collections.BinaryHeap`1.GetChild1(System.Int32)">
            <summary>
            Gets the first child of the specified item.
            </summary>
            <param name="ix">The index of the item to evaluate.</param>
            <returns>The index of the first child of the specified item.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Collections.BinaryHeap`1.GetChild2(System.Int32)">
            <summary>
            Gets the second child of the specified item.
            </summary>
            <param name="ix">The index of the item to evaluate.</param>
            <returns>The index of the second child of the specified item.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Collections.BinaryHeap`1.ExpandCapacity">
            <summary>
            Expands the heap's capacity.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Collections.BinaryHeap`1.SiftUp(System.Int32)">
            <summary>
            Performs up-heap bubbling.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Collections.BinaryHeap`1.SiftDown(System.Int32,System.Int32)">
            <summary>
            Performs down-heap bubbling.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Collections.BinaryHeap`1.EnsureSort">
            <summary>
            Ensures that the data store is sorted.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.Collections.BinaryHeap`1.Enumerator">
            <summary>
            Represents an enumerator for the binary heap class.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Collections.BinaryHeap`1.Enumerator.#ctor(Ultraviolet.Core.Collections.BinaryHeap{`0})">
            <summary>
            Initializes a new instance of the Enumerator structure.
            </summary>
            <param name="heap">The heap that is being enumerated.</param>
        </member>
        <member name="M:Ultraviolet.Core.Collections.BinaryHeap`1.Enumerator.Dispose">
            <summary>
            Releases resources associated with the object.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Collections.BinaryHeap`1.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns><see langword="true"/> if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Collections.BinaryHeap`1.Enumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Collections.BinaryHeap`1.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Collections.BinaryHeap`1.Enumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.Collections.ExpandingPool`1">
            <summary>
            Represents a pre-allocated pool of objects which can expand if all of its objects are consumed.
            </summary>
            <typeparam name="T">The type of item contained by the pool.</typeparam>
        </member>
        <member name="M:Ultraviolet.Core.Collections.ExpandingPool`1.#ctor(System.Int32,System.Func{`0},System.Action{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Collections.ExpandingPool`1"/> class.
            </summary>
            <param name="capacity">The pool's initial capacity.</param>
            <param name="allocator">A function which allocates new instances of <typeparamref name="T"/>.</param>
            <param name="deallocator">An action which is performed on objects which are being returned to the pool.</param>
        </member>
        <member name="M:Ultraviolet.Core.Collections.ExpandingPool`1.#ctor(System.Int32,System.Int32,System.Func{`0},System.Action{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Collections.ExpandingPool`1"/> class.
            </summary>
            <param name="capacity">The pool's initial capacity.</param>
            <param name="watermark">The pool's watermark value, which indicates the maximum size of the pool.</param>
            <param name="allocator">A function which allocates new instances of <typeparamref name="T"/>.</param>
            <param name="deallocator">An action which is performed on objects which are being returned to the pool.</param>
        </member>
        <member name="M:Ultraviolet.Core.Collections.ExpandingPool`1.Retrieve">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Collections.ExpandingPool`1.Release(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Collections.ExpandingPool`1.ReleaseRef(`0@)">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.Core.Collections.ExpandingPool`1.Count">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.Core.Collections.ExpandingPool`1.Capacity">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.Core.Collections.ExpandingPool`1.WatermarkAllocations">
            <summary>
            Gets the number of objects that were allocated as a result of reaching the pool's watermark.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Collections.ExpandingPool`1.Watermark">
            <summary>
            Gets the pool's watermark value, which indicates its maximum size.
            </summary>
            <remarks>Beyond this point, the pool will simply return newly-allocated objects instead of pooled objects. 
            Such objects should still be released back into the pool for bookkeeping purposes.</remarks>
        </member>
        <member name="M:Ultraviolet.Core.Collections.ExpandingPool`1.Dispose(System.Boolean)">
            <summary>
            Disposes of all of the objects in the pool, if <typeparamref name="T"/> implements <see cref="T:System.IDisposable"/>.
            </summary>
            <param name="disposing"><see langword="true"/> if the object is being disposed; false if the object is being finalized.</param>
        </member>
        <member name="M:Ultraviolet.Core.Collections.ExpandingPool`1.ExpandStorage">
            <summary>
            Expands the pool's storage capacity to a factor of the pool's current storage capacity.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Collections.ExpandingPool`1.ExpandStorage(System.Int32)">
            <summary>
            Expands the pool's storage such that it has at least the specified capacity.
            </summary>
            <param name="capacity">The target capacity after expansion.</param>
        </member>
        <member name="T:Ultraviolet.Core.Collections.ExpandingPoolRegistry">
            <summary>
            Represents a collection of expanding pools for different types.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Collections.ExpandingPoolRegistry.Create``1(System.Int32,System.Func{``0})">
            <summary>
            Creates a pool for the specified type with the specified initial capacity and allocator.
            </summary>
            <typeparam name="T">The type of object for which to create an expanding pool.</typeparam>
            <param name="capacity">The pool's initial capacity.</param>
            <param name="allocator">The pool's instance allocator, if it must be created.</param>
        </member>
        <member name="M:Ultraviolet.Core.Collections.ExpandingPoolRegistry.Create``1(System.Int32,System.Int32,System.Func{``0})">
            <summary>
            Creates a pool for the specified type with the specified initial capacity and allocator.
            </summary>
            <typeparam name="T">The type of object for which to create an expanding pool.</typeparam>
            <param name="capacity">The pool's initial capacity.</param>
            <param name="watermark">The pool's watermark value, if it must be created.</param>
            <param name="allocator">The pool's instance allocator, if it must be created.</param>
        </member>
        <member name="M:Ultraviolet.Core.Collections.ExpandingPoolRegistry.Destroy``1">
            <summary>
            Destroys the pool for the specified type.
            </summary>
            <typeparam name="T">The type of object for which to destroy an existing pool.</typeparam>
        </member>
        <member name="M:Ultraviolet.Core.Collections.ExpandingPoolRegistry.DestroyAll">
            <summary>
            Destroys all of the registered pools.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Collections.ExpandingPoolRegistry.Get(System.Type)">
            <summary>
            Gets the pool for the specified type.
            </summary>
            <param name="type">The type of object for which to retrieve a pool.</param>
            <returns>The pool for the specified type, or <see langword="null"/> if no such pool exists.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Collections.ExpandingPoolRegistry.Get``1">
            <summary>
            Gets the pool for the specified type.
            </summary>
            <typeparam name="T">The type of object for which to retrieve a pool.</typeparam>
            <returns>The pool for the specified type, or <see langword="null"/> if no such pool exists.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Collections.ExpandingPoolRegistry.Get``1(System.Int32,System.Func{``0})">
            <summary>
            Gets the pool for the specified type. If the pool does not exist, it will be created
            with the specified initial capacity and allocator.
            </summary>
            <typeparam name="T">The type of object for which to retrieve a pool.</typeparam>
            <param name="capacity">The initial capacity of the pool, if it must be created.</param>
            <param name="allocator">The pool's instance allocator, if it must be created.</param>
            <returns>The pool for the specified type.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Collections.ExpandingPoolRegistry.Get``1(System.Int32,System.Int32,System.Func{``0})">
            <summary>
            Gets the pool for the specified type. If the pool does not exist, it will be created
            with the specified initial capacity and allocator.
            </summary>
            <typeparam name="T">The type of object for which to retrieve a pool.</typeparam>
            <param name="capacity">The initial capacity of the pool, if it must be created.</param>
            <param name="watermark">The pool's watermark value, if it must be created.</param>
            <param name="allocator">The pool's instance allocator, if it must be created.</param>
            <returns>The pool for the specified type.</returns>
        </member>
        <member name="T:Ultraviolet.Core.Collections.GenericEnumeratorGenerator`1">
            <summary>
            Represents a method which produces items for a generic enumerator.
            Producing a value of <c>default(T)</c> indicates that the enumerator has reached the end of the collection.
            </summary>
            <typeparam name="T">The type of item contained by the collection being enumerated.</typeparam>
            <param name="state">A state object to pass to the generation function.</param>
            <param name="index">A value indicating the index of the item that should be generated, respective to its collection.</param>
            <param name="result">The item that was generated.</param>
            <returns><see langword="true"/> if a valid item was generated; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Ultraviolet.Core.Collections.GenericEnumeratorVersionFunction">
            <summary>
            Represents a method which produces a version number associated with
            a generically enumerated collection.
            </summary>
            <param name="state">A state object to pass to the versioning function.</param>
            <returns>The current version of the enumerated collection.</returns>
        </member>
        <member name="T:Ultraviolet.Core.Collections.GenericEnumerator`1">
            <summary>
            Represents a generic list enumerator implemented as a mutable struct.
            </summary>
            <typeparam name="T">The type of item contained by the collection being enumerated.</typeparam>
        </member>
        <member name="M:Ultraviolet.Core.Collections.GenericEnumerator`1.#ctor(System.Object,Ultraviolet.Core.Collections.GenericEnumeratorGenerator{`0},Ultraviolet.Core.Collections.GenericEnumeratorVersionFunction)">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Collections.GenericEnumerator`1"/> structure.
            </summary>
            <param name="state">A state object to pass to the generation function.</param>
            <param name="generator">A function which produces objects from the enumerated collection.</param>
            <param name="versioner">A function which produces the collection's version number.</param>
        </member>
        <member name="M:Ultraviolet.Core.Collections.GenericEnumerator`1.Dispose">
            <summary>
            Releases resources associated with the object.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Collections.GenericEnumerator`1.Reset">
            <summary>
            Resets the enumerator to its initial state.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Collections.GenericEnumerator`1.MoveNext">
            <summary>
            Advances the enumerator to the next item in the collection.
            </summary>
            <returns><see langword="true"/> if the enumerator advanced to the next item; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:Ultraviolet.Core.Collections.GenericEnumerator`1.Current">
            <summary>
            Gets the current object.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Collections.GenericEnumerator`1.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current object.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.Collections.CollectionResetEventHandler">
            <summary>
            Represents the method that is called when the <see cref="E:Ultraviolet.Core.Collections.INotifyCollectionChanged.CollectionReset"/> event is raised.
            </summary>
            <param name="collection">The collection that was changed.</param>
        </member>
        <member name="T:Ultraviolet.Core.Collections.CollectionItemAddedEventHandler">
            <summary>
            Represents the method that is called when the <see cref="E:Ultraviolet.Core.Collections.INotifyCollectionChanged.CollectionItemAdded"/> event is raised.
            </summary>
            <param name="collection">The collection that was changed.</param>
            <param name="item">The item that was added to the collection.</param>
            <param name="index">The index at which the item was added to the collection, if this is an indexed collection; otherwise, <see langword="null"/>.</param>
        </member>
        <member name="T:Ultraviolet.Core.Collections.CollectionItemRemovedEventHandler">
            <summary>
            Represents the method that is called when the <see cref="E:Ultraviolet.Core.Collections.INotifyCollectionChanged.CollectionItemRemoved"/> event is raised.
            </summary>
            <param name="collection">The collection that was changed.</param>
            <param name="item">The item that was removed from the collection.</param>
            <param name="index">The index at which the item was added to the collection, if this is an indexed collection; otherwise, <see langword="null"/>.</param>
        </member>
        <member name="T:Ultraviolet.Core.Collections.INotifyCollectionChanged">
            <summary>
            Represents a collection which raises events when its content changes.
            </summary>
        </member>
        <member name="E:Ultraviolet.Core.Collections.INotifyCollectionChanged.CollectionReset">
            <summary>
            Occurs when the contents of the collection are dramatically changed.
            </summary>
        </member>
        <member name="E:Ultraviolet.Core.Collections.INotifyCollectionChanged.CollectionItemAdded">
            <summary>
            Occurs when an item is added to the collection.
            </summary>
        </member>
        <member name="E:Ultraviolet.Core.Collections.INotifyCollectionChanged.CollectionItemRemoved">
            <summary>
            Occurs when an item is removed from the collection.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.Collections.CollectionResetEventHandler`2">
            <summary>
            Represents the method that is called when the <see cref="E:Ultraviolet.Core.Collections.INotifyCollectionChanged`2.CollectionReset"/> event is raised.
            </summary>
            <typeparam name="TKey">The type of key or index used by the collection.</typeparam>
            <typeparam name="TValue">The type of item contained by the collection.</typeparam>
            <param name="collection">The collection that was changed.</param>
        </member>
        <member name="T:Ultraviolet.Core.Collections.CollectionItemAddedEventHandler`2">
            <summary>
            Represents the method that is called when the <see cref="E:Ultraviolet.Core.Collections.INotifyCollectionChanged`2.CollectionItemAdded"/> event is raised.
            </summary>
            <typeparam name="TKey">The type of key or index used by the collection.</typeparam>
            <typeparam name="TValue">The type of item contained by the collection.</typeparam>
            <param name="collection">The collection that was changed.</param>
            <param name="key">The key or index of the item that was added to the collection.</param>
            <param name="item">The item that was added to the collection.</param>
        </member>
        <member name="T:Ultraviolet.Core.Collections.CollectionItemRemovedEventHandler`2">
            <summary>
            Represents the method that is called when the <see cref="E:Ultraviolet.Core.Collections.INotifyCollectionChanged`2.CollectionItemRemoved"/> event is raised.
            </summary>
            <typeparam name="TKey">The type of key or index used by the collection.</typeparam>
            <typeparam name="TValue">The type of item contained by the collection.</typeparam>
            <param name="collection">The collection that was changed.</param>
            <param name="item">The item that was removed from the collection.</param>
            <param name="key">The key or index of the item that was removed from the collection.</param>
        </member>
        <member name="T:Ultraviolet.Core.Collections.INotifyCollectionChanged`2">
            <summary>
            Represents a collection which raises events when its content changes.
            </summary>
            <typeparam name="TKey">The type of key or index used by the collection.</typeparam>
            <typeparam name="TValue">The type of item contained by the collection.</typeparam>
        </member>
        <member name="E:Ultraviolet.Core.Collections.INotifyCollectionChanged`2.CollectionReset">
            <summary>
            Occurs when the contents of the collection are dramatically changed.
            </summary>
        </member>
        <member name="E:Ultraviolet.Core.Collections.INotifyCollectionChanged`2.CollectionItemAdded">
            <summary>
            Occurs when an item is added to the collection.
            </summary>
        </member>
        <member name="E:Ultraviolet.Core.Collections.INotifyCollectionChanged`2.CollectionItemRemoved">
            <summary>
            Occurs when an item is removed from the collection.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.Collections.IPool">
            <summary>
            Represents a pool of pre-allocated objects.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Collections.IPool.Retrieve">
            <summary>
            Retrieves an object from the pool.
            </summary>
            <returns>The object that was retrieved from the pool.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Collections.IPool.RetrieveScoped">
            <summary>
            Retrieves a scoped object from the pool.
            </summary>
            <returns>A <see cref="T:Ultraviolet.Core.Collections.PooledObjectScope`1"/> that represents the lifetime of 
            the object that was retrieved from the pool.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Collections.IPool.Release(System.Object)">
            <summary>
            Releases an object back into the pool.
            </summary>
            <param name="instance">The object to release.</param>
        </member>
        <member name="M:Ultraviolet.Core.Collections.IPool.ReleaseRef(System.Object@)">
            <summary>
            Releases an object back into the pool.
            </summary>
            <param name="instance">The object to release.</param>
        </member>
        <member name="P:Ultraviolet.Core.Collections.IPool.Count">
            <summary>
            Gets the number of objects in the pool that are currently in use.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Collections.IPool.Capacity">
            <summary>
            Gets the total number of objects in the pool.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.Collections.IPool`1">
            <summary>
            Represents a pool of pre-allocated objects.
            </summary>
            <typeparam name="T">The type of item contained by the pool.</typeparam>
        </member>
        <member name="M:Ultraviolet.Core.Collections.IPool`1.Retrieve">
            <summary>
            Retrieves an object from the pool.
            </summary>
            <returns>The object that was retrieved from the pool.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Collections.IPool`1.RetrieveScoped">
            <summary>
            Retrieves a scoped object from the pool.
            </summary>
            <returns>A <see cref="T:Ultraviolet.Core.Collections.PooledObjectScope`1"/> that represents the lifetime of 
            the object that was retrieved from the pool.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Collections.IPool`1.Release(`0)">
            <summary>
            Releases an object back into the pool.
            </summary>
            <param name="instance">The object to release.</param>
        </member>
        <member name="M:Ultraviolet.Core.Collections.IPool`1.ReleaseRef(`0@)">
            <summary>
            Releases an object back into the pool.
            </summary>
            <param name="instance">The object to release.</param>
        </member>
        <member name="P:Ultraviolet.Core.Collections.IPool`1.Count">
            <summary>
            Gets the number of objects in the pool that are currently in use.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Collections.IPool`1.Capacity">
            <summary>
            Gets the total number of objects in the pool.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.Collections.NamespaceDoc">
            <summary>
            The <see cref="N:Ultraviolet.Core.Collections"/> namespace contains the Ultraviolet core's custom collection types, which either
            implement data structures not found in the Base Class Library, or which extend the functionality of the
            collection types found in the .NET Framework.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.Collections.ObservableDictionaryEventHandler`2">
            <summary>
            Represents the method that is called when an observable dictionary performs an operation
            that is not related to a specific item.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
            <param name="dictionary">The dictionary that raised the event.</param>
        </member>
        <member name="T:Ultraviolet.Core.Collections.ObservableDictionaryItemEventHandler`2">
            <summary>
            Represents a method that is called when an observable dictionary performs an operation
            relating to a specific item.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
            <param name="dictionary">The dictionary that raised the event.</param>
            <param name="key">The key that is the target of the operation.</param>
            <param name="value">The value that is the target of the operation.</param>
        </member>
        <member name="T:Ultraviolet.Core.Collections.ObservableDictionary`2">
            <summary>
            Represents a dictionary which raises events when items are added or removed.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
        </member>
        <member name="M:Ultraviolet.Core.Collections.ObservableDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Collections.ObservableDictionary`2"/> class.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Collections.ObservableDictionary`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Collections.ObservableDictionary`2"/> class with the specified initial capacity.
            </summary>
            <param name="capacity">The dictionary's initial capacity.</param>
        </member>
        <member name="M:Ultraviolet.Core.Collections.ObservableDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Collections.ObservableDictionary`2"/> class that uses the specified equality comparer.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to use when comparing keys.</param>
        </member>
        <member name="M:Ultraviolet.Core.Collections.ObservableDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Collections.ObservableDictionary`2"/> class with the specified initial capacity
            that uses the specified equality comparer.
            </summary>
            <param name="capacity">The dictionary's initial capacity.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to use when comparing keys.</param>
        </member>
        <member name="M:Ultraviolet.Core.Collections.ObservableDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Collections.ObservableDictionary`2"/> class that contains the same items as the specified dictionary.
            </summary>
            <param name="dictionary">The dictionary from which to copy items.</param>
        </member>
        <member name="M:Ultraviolet.Core.Collections.ObservableDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Collections.ObservableDictionary`2"/> class that contains the same items as the specified dictionary.
            </summary>
            <param name="dictionary">The dictionary from which to copy items.</param>
            <param name="comparer">The equality comparer to use when comparing keys.</param>
        </member>
        <member name="M:Ultraviolet.Core.Collections.ObservableDictionary`2.Clear">
            <summary>
            Removes all items from the dictionary.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Collections.ObservableDictionary`2.Add(`0,`1)">
            <summary>
            Adds an item to the dictionary.
            </summary>
            <param name="key">The key of the item to add to the dictionary.</param>
            <param name="value">The value of the item to add to the dictionary.</param>
        </member>
        <member name="M:Ultraviolet.Core.Collections.ObservableDictionary`2.Remove(`0)">
            <summary>
            Removes the object with the specified key from the dictionary, if such an object exists.
            </summary>
            <param name="key">The key that represents the object to remove from the dictionary.</param>
            <returns><see langword="true"/> if the object was removed from the dictionary; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Collections.ObservableDictionary`2.ContainsKey(`0)">
            <summary>
            Gets a value indicating whether the dictionary contains an item with the specified key.
            </summary>
            <param name="key">The key to evaluate.</param>
            <returns><see langword="true"/> if the dictionary contains an item with the specified key; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Collections.ObservableDictionary`2.ContainsValue(`1)">
            <summary>
            Gets a value indicating whether the dictionary contains an item with the specified value.
            </summary>
            <param name="value">The value to evaluate.</param>
            <returns><see langword="true"/> if the dictoinary contains an item with the specified value; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Collections.ObservableDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Attempts to retrieve the item with the specified key from the dictionary.  
            </summary>
            <param name="key">The key of the item to retrieve.</param>
            <param name="value">The value of the item that was retrieved, if an item was successfully retrieved.</param>
            <returns><see langword="true"/> if an item with the specified key was retrieved; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Collections.ObservableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the entire collection to the specified array, starting at the specified array index.
            </summary>
            <param name="array">The array into which to copy the collection's elements.</param>
            <param name="arrayIndex">The index within the array at which to begin copying elements.</param>
        </member>
        <member name="M:Ultraviolet.Core.Collections.ObservableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds an item to the collection.
            </summary>
            <param name="item">The item to add to the collection.</param>
        </member>
        <member name="M:Ultraviolet.Core.Collections.ObservableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the specified item from the collection.
            </summary>
            <param name="item">The item to remove from the collection.</param>
            <returns><see langword="true"/> if the item was removed from the collection; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Collections.ObservableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Gets a value indicating whether the collection contains the specified item.
            </summary>
            <param name="item">The item to evaluate.</param>
            <returns><see langword="true"/> if the collection contains the specified item; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Collections.ObservableDictionary`2.GetEnumerator">
            <summary>
            Gets an enumerator for the collection.
            </summary>
            <returns>An enumerator for the collection.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Collections.ObservableDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator for the collection.
            </summary>
            <returns>An enumerator for the collection.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Collections.ObservableDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator">
            <summary>
            Gets an enumerator for the collection.
            </summary>
            <returns>An enumerator for the collection.</returns>
        </member>
        <member name="P:Ultraviolet.Core.Collections.ObservableDictionary`2.Item(`0)">
            <summary>
            Gets or sets the dictionary item with the specified key.
            </summary>
            <param name="key">The key that represents the item to get or set.</param>
            <returns>The dictionary item with the specified key.</returns>
        </member>
        <member name="P:Ultraviolet.Core.Collections.ObservableDictionary`2.Keys">
            <summary>
            Gets a collection containing the dictionary's set of keys.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Collections.ObservableDictionary`2.Values">
            <summary>
            Gets a collection containing the dictionary's set of values.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Collections.ObservableDictionary`2.Count">
            <summary>
            Gets the number of items in the dictionary.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Collections.ObservableDictionary`2.SuppressUntypedNotifications">
            <summary>
            Gets or sets a value indicating whether this collection is suppressing the untyped events raised by
            the non-generic <see cref="T:Ultraviolet.Core.Collections.INotifyCollectionChanged"/> interface. Where these events are not necessary,
            suppressing them may be useful for performance reasons because it can prevent boxing if the collection
            contains value types.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Collections.ObservableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
        </member>
        <member name="E:Ultraviolet.Core.Collections.ObservableDictionary`2.Ultraviolet#Core#Collections#INotifyCollectionChanged#CollectionReset">
            <inheritdoc/>
        </member>
        <member name="E:Ultraviolet.Core.Collections.ObservableDictionary`2.Ultraviolet#Core#Collections#INotifyCollectionChanged#CollectionItemAdded">
            <inheritdoc/>
        </member>
        <member name="E:Ultraviolet.Core.Collections.ObservableDictionary`2.Ultraviolet#Core#Collections#INotifyCollectionChanged#CollectionItemRemoved">
            <inheritdoc/>
        </member>
        <member name="E:Ultraviolet.Core.Collections.ObservableDictionary`2.CollectionReset">
            <inheritdoc/>
        </member>
        <member name="E:Ultraviolet.Core.Collections.ObservableDictionary`2.CollectionItemAdded">
            <inheritdoc/>
        </member>
        <member name="E:Ultraviolet.Core.Collections.ObservableDictionary`2.CollectionItemRemoved">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Collections.ObservableDictionary`2.OnCollectionReset">
            <summary>
            Raises the <see cref="E:Ultraviolet.Core.Collections.ObservableDictionary`2.CollectionReset"/> event.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Collections.ObservableDictionary`2.OnCollectionItemAdded(`0,`1)">
            <summary>
            Raises the <see cref="E:Ultraviolet.Core.Collections.ObservableDictionary`2.CollectionItemAdded"/> event.
            </summary>
            <param name="key">The key of the item that was added to the list.</param>
            <param name="value">The item that was added to the list.</param>
        </member>
        <member name="M:Ultraviolet.Core.Collections.ObservableDictionary`2.OnCollectionItemRemoved(`0,`1)">
            <summary>
            Raises the <see cref="E:Ultraviolet.Core.Collections.ObservableDictionary`2.CollectionItemRemoved"/> event.
            </summary>
            <param name="key">The key of the item that was removed from the list.</param>
            <param name="value">The item that was added to the list.</param>
        </member>
        <member name="T:Ultraviolet.Core.Collections.ObservableList`1">
            <summary>
            Represents a list which raises events when items are added or removed.
            </summary>
            <typeparam name="TValue">The type of item contained by the list.</typeparam>
        </member>
        <member name="M:Ultraviolet.Core.Collections.ObservableList`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Collections.ObservableList`1"/> class.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Collections.ObservableList`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Collections.ObservableList`1"/> class with the specified initial capacity.
            </summary>
            <param name="capacity">The initial capacity of the list.</param>
        </member>
        <member name="M:Ultraviolet.Core.Collections.ObservableList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Collections.ObservableList`1"/> class that contains the elements 
            contained by the specified collection.
            </summary>
            <param name="collection">The collection that contains the elements to copy to this collection.</param>
        </member>
        <member name="M:Ultraviolet.Core.Collections.ObservableList`1.IndexOf(`0)">
            <summary>
            Retrieves the index of the specified item within the list, if the list contains the item.
            </summary>
            <param name="item">The item to search for within the list.</param>
            <returns>The index of the item within the list, or -1 if the list does not contain the item.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Collections.ObservableList`1.Reverse">
            <summary>
            Reverses the list.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Collections.ObservableList`1.Reverse(System.Int32,System.Int32)">
            <summary>
            Reverses the specified range of elements within the list.
            </summary>
            <param name="index">The index of the first element in the range to reverse.</param>
            <param name="count">The number of elements in the range to reverse.</param>
        </member>
        <member name="M:Ultraviolet.Core.Collections.ObservableList`1.Sort">
            <summary>
            Sorts the list using the default comparer.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Collections.ObservableList`1.Sort(System.Comparison{`0})">
            <summary>
            Sorts the list using the specified comparison.
            </summary>
            <param name="comparison">The <see cref="T:System.Comparison`1"/> to use to sort the list.</param>
        </member>
        <member name="M:Ultraviolet.Core.Collections.ObservableList`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the list using the specified comparer.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> to use to sort the list.</param>
        </member>
        <member name="M:Ultraviolet.Core.Collections.ObservableList`1.Clear">
            <summary>
            Removes all items from the list.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Collections.ObservableList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item into the list at the specified index.
            </summary>
            <param name="index">The index at which to insert the item.</param>
            <param name="item">The item to insert into the list.</param>
        </member>
        <member name="M:Ultraviolet.Core.Collections.ObservableList`1.Add(`0)">
            <summary>
            Adds an item to the end of the list.
            </summary>
            <param name="item">The item to add to the end of the list.</param>
        </member>
        <member name="M:Ultraviolet.Core.Collections.ObservableList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index from the list.
            </summary>
            <param name="index">The index of the item to remove from the list.</param>
        </member>
        <member name="M:Ultraviolet.Core.Collections.ObservableList`1.Remove(`0)">
            <summary>
            Removes the specified item from the list, if it exists in the list.
            </summary>
            <param name="item">The item to remove from the list.</param>
            <returns><see langword="true"/> if the specified item was removed from the list; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Collections.ObservableList`1.Contains(`0)">
            <summary>
            Gets a value indicating whether the list contains the specified item.
            </summary>
            <param name="item">The item to evaluate.</param>
            <returns><see langword="true"/> if the list contains the specified item; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Collections.ObservableList`1.CopyTo(`0[])">
            <summary>
            Copies the entire list to the specified array.
            </summary>
            <param name="array">The array into which to copy the list's elements.</param>
        </member>
        <member name="M:Ultraviolet.Core.Collections.ObservableList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the entire list to the specified array, starting at the specified array index.
            </summary>
            <param name="array">The array into which to copy the list's elements.</param>
            <param name="arrayIndex">The index within the array at which to begin copying elements.</param>
        </member>
        <member name="M:Ultraviolet.Core.Collections.ObservableList`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
            <summary>
            Copies the specified number of elements from this list into the specified array.
            </summary>
            <param name="index">The index within the list at which to begin copying elements.</param>
            <param name="array">The array into which to copy the list's elements.</param>
            <param name="arrayIndex">The index within the array at which to begin copying elements.</param>
            <param name="count">The number of elements to copy.</param>
        </member>
        <member name="M:Ultraviolet.Core.Collections.ObservableList`1.GetEnumerator">
            <summary>
            Gets an enumerator for the collection.
            </summary>
            <returns>An enumerator for the collection.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Collections.ObservableList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator for the collection.
            </summary>
            <returns>An enumerator for the collection.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Collections.ObservableList`1.System#Collections#Generic#IEnumerable{TValue}#GetEnumerator">
            <summary>
            Gets an enumerator for the collection.
            </summary>
            <returns>An enumerator for the collection.</returns>
        </member>
        <member name="P:Ultraviolet.Core.Collections.ObservableList`1.Item(System.Int32)">
            <summary>
            Gets or sets the item at the specified index within the list.
            </summary>
            <param name="index">The index of the item to get or set.</param>
            <returns>The item at the specified index within the list.</returns>
        </member>
        <member name="P:Ultraviolet.Core.Collections.ObservableList`1.Capacity">
            <summary>
            Gets or sets the number of items that the list can hold before it is resized.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Collections.ObservableList`1.Count">
            <summary>
            Gets the number of items in the list.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Collections.ObservableList`1.SuppressUntypedNotifications">
            <summary>
            Gets or sets a value indicating whether this collection is suppressing the untyped events raised by
            the non-generic <see cref="T:Ultraviolet.Core.Collections.INotifyCollectionChanged"/> interface. Where these events are not necessary,
            suppressing them may be useful for performance reasons because it can prevent boxing if the collection
            contains value types.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Collections.ObservableList`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the list is read-only.
            </summary>
        </member>
        <member name="E:Ultraviolet.Core.Collections.ObservableList`1.Ultraviolet#Core#Collections#INotifyCollectionChanged#CollectionReset">
            <inheritdoc/>
        </member>
        <member name="E:Ultraviolet.Core.Collections.ObservableList`1.Ultraviolet#Core#Collections#INotifyCollectionChanged#CollectionItemAdded">
            <inheritdoc/>
        </member>
        <member name="E:Ultraviolet.Core.Collections.ObservableList`1.Ultraviolet#Core#Collections#INotifyCollectionChanged#CollectionItemRemoved">
            <inheritdoc/>
        </member>
        <member name="E:Ultraviolet.Core.Collections.ObservableList`1.CollectionReset">
            <inheritdoc/>
        </member>
        <member name="E:Ultraviolet.Core.Collections.ObservableList`1.CollectionItemAdded">
            <inheritdoc/>
        </member>
        <member name="E:Ultraviolet.Core.Collections.ObservableList`1.CollectionItemRemoved">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Collections.ObservableList`1.OnCollectionReset">
            <summary>
            Raises the <see cref="E:Ultraviolet.Core.Collections.ObservableList`1.CollectionReset"/> event.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Collections.ObservableList`1.OnCollectionItemAdded(System.Int32,`0)">
            <summary>
            Raises the <see cref="E:Ultraviolet.Core.Collections.ObservableList`1.CollectionItemAdded"/> event.
            </summary>
            <param name="index">The index at which the item was added to the list.</param>
            <param name="value">The item that was added to the list.</param>
        </member>
        <member name="M:Ultraviolet.Core.Collections.ObservableList`1.OnCollectionItemRemoved(System.Int32,`0)">
            <summary>
            Raises the <see cref="E:Ultraviolet.Core.Collections.ObservableList`1.CollectionItemRemoved"/> event.
            </summary>
            <param name="index">The index at which the item was removed from the list.</param>
            <param name="value">The item that was added to the list.</param>
        </member>
        <member name="T:Ultraviolet.Core.Collections.Pool`1">
            <summary>
            Represents the base class for pools.
            </summary>
            <typeparam name="T">The type of item contained by the pool.</typeparam>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Pool`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Pool`1.Retrieve">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Pool`1.Ultraviolet#Core#Collections#IPool#Retrieve">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Pool`1.RetrieveScoped">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Pool`1.Ultraviolet#Core#Collections#IPool#RetrieveScoped">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Pool`1.Release(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Pool`1.Ultraviolet#Core#Collections#IPool#Release(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Pool`1.ReleaseRef(`0@)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Pool`1.Ultraviolet#Core#Collections#IPool#ReleaseRef(System.Object@)">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.Core.Collections.Pool`1.Count">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.Core.Collections.Pool`1.Capacity">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Pool`1.CreateDefaultAllocator">
            <summary>
            Creates a default allocator for the pooled type.
            </summary>
            <returns>The allocator that was created.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Pool`1.Dispose(System.Boolean)">
            <summary>
            Releases resources associated with the object.
            </summary>
            <param name="disposing"><see langword="true"/> if the object is being disposed; <see langword="false"/> if the object is being finalized.</param>
        </member>
        <member name="T:Ultraviolet.Core.Collections.PooledLinkedList`1">
            <summary>
            Represents a linked list that draws its nodes from a pre-allocated pool.
            </summary>
            <remarks>The Base Class Library's built-in <see cref="T:System.Collections.Generic.LinkedList`1"/> class will allocate a new instance of
            <see cref="T:System.Collections.Generic.LinkedListNode`1"/> whenever it needs one, making it difficult to use in performance scenarios
            which are sensitive to garbage collection, like games. Ultraviolet <see cref="T:Ultraviolet.Core.Collections.PooledLinkedList`1"/> maintains 
            an internal pool of nodes which it uses instead of allocating.</remarks>
            <typeparam name="T">The type of item contained by the list.</typeparam>
        </member>
        <member name="M:Ultraviolet.Core.Collections.PooledLinkedList`1.#ctor">
            <summary>
            Initializes a new instance of the PooledLinkedList class.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Collections.PooledLinkedList`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the PooledLinkedList class.
            </summary>
            <param name="capacity">The linked list's initial capacity.</param>
        </member>
        <member name="M:Ultraviolet.Core.Collections.PooledLinkedList`1.Find(`0)">
            <summary>
            Finds the first node that contains the specified value.
            </summary>
            <param name="value">The value to locate in the list.</param>
            <returns>The first node that contains the specified value, if one exists; otherwise, null.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Collections.PooledLinkedList`1.FindLast(`0)">
            <summary>
            Finds the last node that contains the specified value.
            </summary>
            <param name="value">The value to locate in the list.</param>
            <returns>The last node that contains the specified value, if one exists; otherwise, null.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Collections.PooledLinkedList`1.Clear">
            <summary>
            Clears the linked list's contents.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Collections.PooledLinkedList`1.AddFirst(`0)">
            <summary>
            Adds the specified item to the beginning of the linked list.
            </summary>
            <param name="item">The item to add to the list.</param>
        </member>
        <member name="M:Ultraviolet.Core.Collections.PooledLinkedList`1.AddLast(`0)">
            <summary>
            Adds the specified item to the end of the linked list.
            </summary>
            <param name="item">The item to add to the list.</param>
        </member>
        <member name="M:Ultraviolet.Core.Collections.PooledLinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},`0)">
            <summary>
            Adds the specified new node after the specified existing node.
            </summary>
            <param name="node">The node after which to insert a new value.</param>
            <param name="item">The value to insert.</param>
        </member>
        <member name="M:Ultraviolet.Core.Collections.PooledLinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},`0)">
            <summary>
            Adds the specified new node before the specified existing node.
            </summary>
            <param name="node">The node before which to insert a new value.</param>
            <param name="item">The value to insert.</param>
        </member>
        <member name="M:Ultraviolet.Core.Collections.PooledLinkedList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of the specified item from the list.
            </summary>
            <param name="item">The item to remove from the list.</param>
            <returns><see langword="true"/> if the specified item was removed from the list; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Collections.PooledLinkedList`1.Remove(System.Collections.Generic.LinkedListNode{`0})">
            <summary>
            Removes the specified node from the list.
            </summary>
            <param name="node">The node to remove from the list.</param>
            <returns><see langword="true"/> if the specified item was removed from the list; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Collections.PooledLinkedList`1.RemoveFirst">
            <summary>
            Removes the node at the beginning of the list.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Collections.PooledLinkedList`1.RemoveLast">
            <summary>
            Removes the node at the end of the list.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Collections.PooledLinkedList`1.Contains(`0)">
            <summary>
            Gets a value indicating whether the linked list contains the specified value.
            </summary>
            <param name="value">The value to locate in the linked list.</param>
            <returns><see langword="true"/> if the linked list contains the specified value; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Collections.PooledLinkedList`1.GetEnumerator">
            <summary>
            Gets an enumerator for the list.
            </summary>
            <returns>An enumerator for the list.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Collections.PooledLinkedList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Gets an enumerator for the list.
            </summary>
            <returns>An enumerator for the list.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Collections.PooledLinkedList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator for the list.
            </summary>
            <returns>An enumerator for the list.</returns>
        </member>
        <member name="P:Ultraviolet.Core.Collections.PooledLinkedList`1.Count">
            <summary>
            Gets the number of items in the list.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Collections.PooledLinkedList`1.First">
            <summary>
            Gets the first node of the linked list.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Collections.PooledLinkedList`1.Last">
            <summary>
            Gets the last node of the linked list.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Collections.PooledLinkedList`1.RetrieveNode">
            <summary>
            Retrieves a node from the list's pool of nodes.
            </summary>
            <returns>The node that was retrieved.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Collections.PooledLinkedList`1.ReleaseNode(System.Collections.Generic.LinkedListNode{`0})">
            <summary>
            Releases a node back into the list's pool of nodes.
            </summary>
            <param name="node">The node to release.</param>
        </member>
        <member name="T:Ultraviolet.Core.Collections.PooledObjectScope`1">
            <summary>
            Represents the scope of a pooled object.  When the scope is created, an object will be retrieved
            from the specified pool.  When the scope is disposed, the object will be returned to the pool.
            </summary>
            <typeparam name="T">The type of pooled object that the scope is tracking.</typeparam>
        </member>
        <member name="M:Ultraviolet.Core.Collections.PooledObjectScope`1.#ctor(Ultraviolet.Core.Collections.IPool,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Collections.PooledObjectScope`1"/> structure.
            </summary>
            <param name="pool">The pool from which to retrieve an object.</param>
            <param name="instance">The object instance being managed by the scope.</param>
        </member>
        <member name="M:Ultraviolet.Core.Collections.PooledObjectScope`1.Dispose">
            <summary>
            Releases the pooled object represented by this scope.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Collections.PooledObjectScope`1.Object">
            <summary>
            Gets the pooled object represented by this scope.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.Collections.PriorityQueue`1">
            <summary>
            Represents a priority queue.
            </summary>
            <typeparam name="T">The type of item contained by the queue.</typeparam>
        </member>
        <member name="T:Ultraviolet.Core.Collections.PriorityQueue`1.PriorityQueueItem">
            <summary>
            Represents an item in a priority queue.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Collections.PriorityQueue`1.PriorityQueueItem.#ctor(System.Single,`0)">
            <summary>
            Initializes a new instance of the PriorityQueueItem structure.
            </summary>
            <param name="priority">The item's priority in the queue.</param>
            <param name="value">The item's value.</param>
        </member>
        <member name="M:Ultraviolet.Core.Collections.PriorityQueue`1.PriorityQueueItem.CompareTo(Ultraviolet.Core.Collections.PriorityQueue{`0}.PriorityQueueItem)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>A value that indicates the relative order of the objects being compared.</returns>
        </member>
        <member name="F:Ultraviolet.Core.Collections.PriorityQueue`1.PriorityQueueItem.Priority">
            <summary>
            The item's priority in the queue.
            </summary>
        </member>
        <member name="F:Ultraviolet.Core.Collections.PriorityQueue`1.PriorityQueueItem.Value">
            <summary>
            The item's value.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Collections.PriorityQueue`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Collections.PriorityQueue`1"/> class.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Collections.PriorityQueue`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Collections.PriorityQueue`1"/> class.
            </summary>
            <param name="capacity">The priority queue's initial capacity.</param>
        </member>
        <member name="M:Ultraviolet.Core.Collections.PriorityQueue`1.Clear">
            <summary>
            Removes all items from the queue.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Collections.PriorityQueue`1.Enqueue(System.Single,`0)">
            <summary>
            Adds an item to the queue.
            </summary>
            <param name="priority">The item's priority.</param>
            <param name="value">The item's value.</param>
        </member>
        <member name="M:Ultraviolet.Core.Collections.PriorityQueue`1.Dequeue">
            <summary>
            Removes the next item from the queue.
            </summary>
            <returns>The item that was removed from the queue.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Collections.PriorityQueue`1.Dequeue(System.Single@)">
            <summary>
            Removes the next item from the queue.
            </summary>
            <param name="priority">The item's priority in the queue.</param>
            <returns>The item that was removed from the queue.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Collections.PriorityQueue`1.Peek">
            <summary>
            Retrieves the first value from the queue without removing it.
            </summary>
            <returns>The next value on the queue.</returns>
        </member>
        <member name="P:Ultraviolet.Core.Collections.PriorityQueue`1.Count">
            <summary>
            Gets the number of items in the queue.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Collections.PriorityQueue`1.Capacity">
            <summary>
            Gets the queue's current capacity.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Collections.PriorityQueue`1.IsEmpty">
            <summary>
            Gets a value indicating whether the queue is empty.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.Collections.Specialized.NamespaceDoc">
            <summary>
            The <see cref="N:Ultraviolet.Core.Collections.Specialized"/> namespace contains custom collection types which
            exist to implement specialized algorithms and which are not intended for general use.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.Collections.Specialized.UnsafeObjectStream">
            <summary>
            Represents a variable-length stream of value-type objects which are accessed via pointers.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Specialized.UnsafeObjectStream.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Collections.Specialized.UnsafeObjectStream"/> class with default values for its capacities.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Specialized.UnsafeObjectStream.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Collections.Specialized.UnsafeObjectStream"/> class with the specified capacities.
            </summary>
            <param name="capacityInObjects">The stream's capacity in number of objects.</param>
            <param name="capacityInBytes">The stream's capacity in bytes.</param>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Specialized.UnsafeObjectStream.Clear">
            <summary>
            Removes all data from the stream.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Specialized.UnsafeObjectStream.AcquirePointers">
            <summary>
            Prepares the stream for reading or writing by acquiring pointers to its underlying buffers.
            While pointers are acquired, these buffers will be pinned in memory.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Specialized.UnsafeObjectStream.ReleasePointers">
            <summary>
            Releases the pointers which were acquired by <see cref="M:Ultraviolet.Core.Collections.Specialized.UnsafeObjectStream.AcquirePointers"/> and unpins
            the stream's underlying buffers.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Specialized.UnsafeObjectStream.RawSeekObject(System.Int32)">
            <summary>
            Moves the stream's data pointer to the beginning of the object with the specified index.
            </summary>
            <param name="offset">The index of the object to which the stream's data pointer will be moved.</param>
            <returns>The stream's data pointer after moving to the specified position.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Specialized.UnsafeObjectStream.RawSeekForward">
            <summary>
            Moves the stream's data pointer to the beginning of the next object.
            </summary>
            <remarks>This method has no effect if the current stream position is at the end of the stream.</remarks>
            <returns>The stream's data pointer after moving to the next object.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Specialized.UnsafeObjectStream.RawSeekBackward">
            <summary>
            Moves the stream's data pointer to the beginning of the previous object.
            </summary>
            <remarks>This method has no effect if the current stream position is at the beginning of the stream.</remarks>
            <returns>The stream's data pointer after moving to the previous object.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Specialized.UnsafeObjectStream.RawSeekBeginning">
            <summary>
            Moves the stream's data pointer to the beginning of the stream.
            </summary>
            <returns>The stream's data pointer after moving to the beginning of the stream.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Specialized.UnsafeObjectStream.RawSeekEnd">
            <summary>
            Moves the stream's data pointer to the end of the stream.
            </summary>
            <returns>The stream's data pointer after moving to the end of the stream.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Specialized.UnsafeObjectStream.SeekObject(System.Int32)">
            <summary>
            Moves the stream's data pointer to the beginning of the object with the specified index.
            </summary>
            <param name="offset">The index of the object to which the stream's data pointer will be moved.</param>
            <returns>The stream's data pointer after moving to the specified position.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Specialized.UnsafeObjectStream.SeekForward">
            <summary>
            Moves the stream's data pointer to the beginning of the next object.
            </summary>
            <remarks>This method has no effect if the current stream position is at the end of the stream.</remarks>
            <returns>The stream's data pointer after moving to the next object.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Specialized.UnsafeObjectStream.SeekBackward">
            <summary>
            Moves the stream's data pointer to the beginning of the previous object.
            </summary>
            <remarks>This method has no effect if the current stream position is at the beginning of the stream.</remarks>
            <returns>The stream's data pointer after moving to the previous object.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Specialized.UnsafeObjectStream.SeekBeginning">
            <summary>
            Moves the stream's data pointer to the beginning of the stream.
            </summary>
            <returns>The stream's data pointer after moving to the beginning of the stream.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Specialized.UnsafeObjectStream.SeekEnd">
            <summary>
            Moves the stream's data pointer to the end of the stream.
            </summary>
            <returns>The stream's data pointer after moving to the end of the stream.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Specialized.UnsafeObjectStream.Reserve(System.Int32)">
            <summary>
            Reserves enough space in the stream for one additional object of the specified size.
            </summary>
            <param name="numberOfBytes">The number of bytes to reserve.</param>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Specialized.UnsafeObjectStream.ReserveMultiple(System.Int32,System.Int32)">
            <summary>
            Reserves enough space in the stream for the specified number of additional objects with the
            specified total size in bytes.
            </summary>
            <param name="numberOfObjects">The number of objects to reserve.</param>
            <param name="numberOfBytes">The number of bytes to reserve.</param>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Specialized.UnsafeObjectStream.ReserveInsert(System.Int32,System.Int32)">
            <summary>
            Reserves enough space in the stream for the specified number of additional objects with the
            specified total size in bytes. The reserved space will be inserted into the stream prior to
            the object at the stream's current position.
            </summary>
            <param name="numberOfObjects">The number of objects to reserve.</param>
            <param name="numberOfBytes">The number of bytes to reserve.</param>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Specialized.UnsafeObjectStream.ReserveInsert(System.Int32,System.Int32,System.Int32)">
            <summary>
            Reserves enough space in the stream for the specified number of additional objects with the
            specified total size in bytes. The reserved space will be inserted into the stream prior to
            the object at the specified index. The stream's current position will be moved to the beginning
            of the reserved data.
            </summary>
            <param name="insertPosition">The index at which to insert the reserved space, from 0 (the
            beginning of the stream) to LengthInObjects, inclusive (the end of the stream).</param>
            <param name="numberOfObjects">The number of objects to reserve.</param>
            <param name="numberOfBytes">The number of bytes to reserve.</param>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Specialized.UnsafeObjectStream.FinalizeObject(System.Int32)">
            <summary>
            Marks the current data pointer position as the beginning of an object and advances the data pointer by the specified number of bytes.
            </summary>
            <param name="numberOfBytes">The number of bytes by which to advance the pointer.</param>
        </member>
        <member name="P:Ultraviolet.Core.Collections.Specialized.UnsafeObjectStream.HasAcquiredPointers">
            <summary>
            Gets a value indicating whether the stream is currently locked and accessible 
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Collections.Specialized.UnsafeObjectStream.LengthInObjects">
            <summary>
            Gets the number of objects in the stream.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Collections.Specialized.UnsafeObjectStream.LengthInBytes">
            <summary>
            Gets the number of bytes in the stream.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Collections.Specialized.UnsafeObjectStream.CapacityInObjects">
            <summary>
            Gets the stream's total capacity for objects.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Collections.Specialized.UnsafeObjectStream.CapacityInBytes">
            <summary>
            Gets the stream's total capacity for bytes.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Collections.Specialized.UnsafeObjectStream.Data">
            <summary>
            Gets a pointer to the stream's current position within its internal data buffer.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Collections.Specialized.UnsafeObjectStream.Data0">
            <summary>
            Gets a pointer to the beginning of the stream's internal data buffer.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Collections.Specialized.UnsafeObjectStream.PositionInObjects">
            <summary>
            Gets the stream's current position in the object index.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Collections.Specialized.UnsafeObjectStream.PositionInBytes">
            <summary>
            Gets the stream's current position in the data buffer.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Specialized.UnsafeObjectStream.EnsureDataCapacity(System.Int32)">
            <summary>
            Ensures that the data buffer has at least the specified capacity, and expands
            the buffer if it does not.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Specialized.UnsafeObjectStream.EnsureIndexCapacity(System.Int32)">
            <summary>
            Ensures that the index buffer has at least the specified capacity, and expands
            the buffer if it does not.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.Collections.Specialized.WeakDictionary`2">
            <summary>
            Represents a dictionary which maintains weak references to both its keys and its values.
            </summary>
            <typeparam name="TKey">The type of key.</typeparam>
            <typeparam name="TValue">The type of value.</typeparam>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Specialized.WeakDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Collections.Specialized.WeakDictionary`2"/> class.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Specialized.WeakDictionary`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Collections.Specialized.WeakDictionary`2"/> class.
            </summary>
            <param name="capacity">The dictionary's initial capacity.</param>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Specialized.WeakDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Collections.Specialized.WeakDictionary`2"/> class.
            </summary>
            <param name="comparer">The equality comparer used to compare the dictionary's keys.</param>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Specialized.WeakDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Collections.Specialized.WeakDictionary`2"/> class.
            </summary>
            <param name="capacity">The dictionary's initial capacity.</param>
            <param name="comparer">The equality comparer used to compare the dictionary's keys.</param>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Specialized.WeakDictionary`2.GetEnumerator">
            <summary>
            Gets an enumerator which iterates through the dictionary.
            </summary>
            <returns>An enumerator that can be used to iterate through the dictionary.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Specialized.WeakDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Specialized.WeakDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Specialized.WeakDictionary`2.Purge">
            <summary>
            Purges the dictionary of an entries which have been garbage collected.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Specialized.WeakDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Specialized.WeakDictionary`2.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Specialized.WeakDictionary`2.Add(`0,`1)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Specialized.WeakDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Specialized.WeakDictionary`2.TryGetValue(`0,`1@)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Specialized.WeakDictionary`2.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Specialized.WeakDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Specialized.WeakDictionary`2.ContainsKey(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Specialized.WeakDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Specialized.WeakDictionary`2.GetKeys(System.Collections.Generic.ICollection{`0})">
            <summary>
            Populates a collection with the dictionary's living keys.
            </summary>
            <param name="collection">The collection to populate.</param>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Specialized.WeakDictionary`2.GetValues(System.Collections.Generic.ICollection{`1})">
            <summary>
            Populates a collection with the dictionary's living values.
            </summary>
            <param name="collection">The collection to populate.</param>
        </member>
        <member name="P:Ultraviolet.Core.Collections.Specialized.WeakDictionary`2.Item(`0)">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.Core.Collections.Specialized.WeakDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Keys">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.Core.Collections.Specialized.WeakDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Values">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.Core.Collections.Specialized.WeakDictionary`2.Count">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.Core.Collections.Specialized.WeakDictionary`2.CountAlive">
            <summary>
            Gets the number of living objects in the dictionary.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Collections.Specialized.WeakDictionary`2.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="T:Ultraviolet.Core.Collections.Specialized.WeakKeyComparer`1">
            <summary>
            Represents a strongly-typed null weak reference.
            </summary>
            <typeparam name="T">The type of object being referenced.</typeparam>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Specialized.WeakKeyComparer`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Collections.Specialized.WeakKeyComparer`1"/> class.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Specialized.WeakKeyComparer`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Collections.Specialized.WeakKeyComparer`1"/> class.
            </summary>
            <param name="comparer">The underlying equality comparer.</param>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Specialized.WeakKeyComparer`1.GetHashCode(System.Object)">
            <summary>
            Gets the hash code for the specified object.
            </summary>
            <param name="obj">The object for which to retrieve a hash code.</param>
            <returns>The hash code for the specified object.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Specialized.WeakKeyComparer`1.Equals(System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Specialized.WeakKeyComparer`1.GetTarget(System.Object,System.Boolean@)">
            <summary>
            Gets the target of the specified object if it is a weak key, and returns a value indicating
            whether the reference is alive. Otherwise, returns the object itself.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.Collections.Specialized.WeakKeyDictionary`2">
            <summary>
            Represents a dictionary which maintains weak references to its keys and strong references to its values.
            </summary>
            <typeparam name="TKey">The type of key.</typeparam>
            <typeparam name="TValue">The type of value.</typeparam>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Specialized.WeakKeyDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Collections.Specialized.WeakKeyDictionary`2"/> class.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Specialized.WeakKeyDictionary`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Collections.Specialized.WeakKeyDictionary`2"/> class.
            </summary>
            <param name="capacity">The dictionary's initial capacity.</param>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Specialized.WeakKeyDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Collections.Specialized.WeakKeyDictionary`2"/> class.
            </summary>
            <param name="comparer">The equality comparer used to compare the dictionary's keys.</param>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Specialized.WeakKeyDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Collections.Specialized.WeakKeyDictionary`2"/> class.
            </summary>
            <param name="capacity">The dictionary's initial capacity.</param>
            <param name="comparer">The equality comparer used to compare the dictionary's keys.</param>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Specialized.WeakKeyDictionary`2.GetEnumerator">
            <summary>
            Gets an enumerator which iterates through the dictionary.
            </summary>
            <returns>An enumerator that can be used to iterate through the dictionary.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Specialized.WeakKeyDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Specialized.WeakKeyDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Specialized.WeakKeyDictionary`2.Purge">
            <summary>
            Purges the dictionary of an entries which have been garbage collected.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Specialized.WeakKeyDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Specialized.WeakKeyDictionary`2.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Specialized.WeakKeyDictionary`2.Add(`0,`1)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Specialized.WeakKeyDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Specialized.WeakKeyDictionary`2.TryGetValue(`0,`1@)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Specialized.WeakKeyDictionary`2.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Specialized.WeakKeyDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Specialized.WeakKeyDictionary`2.ContainsKey(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Specialized.WeakKeyDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Specialized.WeakKeyDictionary`2.GetKeys(System.Collections.Generic.ICollection{`0})">
            <summary>
            Populates a collection with the dictionary's living keys.
            </summary>
            <param name="collection">The collection to populate.</param>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Specialized.WeakKeyDictionary`2.GetValues(System.Collections.Generic.ICollection{`1})">
            <summary>
            Populates a collection with the dictionary's living values.
            </summary>
            <param name="collection">The collection to populate.</param>
        </member>
        <member name="P:Ultraviolet.Core.Collections.Specialized.WeakKeyDictionary`2.Item(`0)">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.Core.Collections.Specialized.WeakKeyDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Keys">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.Core.Collections.Specialized.WeakKeyDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Values">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.Core.Collections.Specialized.WeakKeyDictionary`2.Count">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.Core.Collections.Specialized.WeakKeyDictionary`2.CountAlive">
            <summary>
            Gets the number of living objects in the dictionary.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Collections.Specialized.WeakKeyDictionary`2.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="T:Ultraviolet.Core.Collections.Specialized.WeakKeyReference`1">
            <summary>
            Represents a key in a weak dictionary.
            </summary>
            <typeparam name="T">The type of object being referenced.</typeparam>
        </member>
        <member name="M:Ultraviolet.Core.Collections.Specialized.WeakKeyReference`1.#ctor(`0,Ultraviolet.Core.Collections.Specialized.WeakKeyComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Collections.Specialized.WeakKeyReference`1"/> class.
            </summary>
            <param name="key">The key value which is being tracked.</param>
            <param name="comparer">The comparer which is used to compare key values.</param>
        </member>
        <member name="P:Ultraviolet.Core.Collections.Specialized.WeakKeyReference`1.Hashcode">
            <summary>
            Gets the key reference's hashcode.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.CommonBoxedValues">
            <summary>
            Contains common primitive values in the form of boxed objects, which can be used to prevent boxing allocations.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.CommonBoxedValues.Boolean">
            <summary>
            Contains boxed Boolean values.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.CommonBoxedValues.Boolean.FromValue(System.Boolean)">
            <summary>
            Gets the cached box for the specified Boolean value.
            </summary>
            <param name="value">The Boolean value for which to retrieve a cached box.</param>
            <returns>The cached box that was retrieved.</returns>
        </member>
        <member name="F:Ultraviolet.Core.CommonBoxedValues.Boolean.True">
            <summary>
            The cached box for the value true.
            </summary>
        </member>
        <member name="F:Ultraviolet.Core.CommonBoxedValues.Boolean.False">
            <summary>
            The cached box for the value false.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.CommonBoxedValues.Int32">
            <summary>
            Contains boxed Int32 values.
            </summary>
        </member>
        <member name="F:Ultraviolet.Core.CommonBoxedValues.Int32.Zero">
            <summary>
            The cached box for the value zero (0).
            </summary>
        </member>
        <member name="F:Ultraviolet.Core.CommonBoxedValues.Int32.One">
            <summary>
            The cached box for the value one (1).
            </summary>
        </member>
        <member name="F:Ultraviolet.Core.CommonBoxedValues.Int32.NegativeOne">
            <summary>
            The cached box for the value negative one (-1).
            </summary>
        </member>
        <member name="F:Ultraviolet.Core.CommonBoxedValues.Int32.MinValue">
            <summary>
            The cached box for Int32.MinValue.
            </summary>
        </member>
        <member name="F:Ultraviolet.Core.CommonBoxedValues.Int32.MaxValue">
            <summary>
            The cached box for Int32.MaxValue.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.CommonBoxedValues.Int64">
            <summary>
            Contains boxed Int64 values.
            </summary>
        </member>
        <member name="F:Ultraviolet.Core.CommonBoxedValues.Int64.Zero">
            <summary>
            The cached box for the value zero (0).
            </summary>
        </member>
        <member name="F:Ultraviolet.Core.CommonBoxedValues.Int64.One">
            <summary>
            The cached box for the value one (1).
            </summary>
        </member>
        <member name="F:Ultraviolet.Core.CommonBoxedValues.Int64.NegativeOne">
            <summary>
            The cached box for the value negative one (-1).
            </summary>
        </member>
        <member name="F:Ultraviolet.Core.CommonBoxedValues.Int64.MinValue">
            <summary>
            The cached box for Int64.MinValue.
            </summary>
        </member>
        <member name="F:Ultraviolet.Core.CommonBoxedValues.Int64.MaxValue">
            <summary>
            The cached box for Int64.MaxValue.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.CommonBoxedValues.Single">
            <summary>
            Contains boxed Single values.
            </summary>
        </member>
        <member name="F:Ultraviolet.Core.CommonBoxedValues.Single.Zero">
            <summary>
            The cached box for the value zero (0).
            </summary>
        </member>
        <member name="F:Ultraviolet.Core.CommonBoxedValues.Single.One">
            <summary>
            The cached box for the value one (1).
            </summary>
        </member>
        <member name="F:Ultraviolet.Core.CommonBoxedValues.Single.NegativeOne">
            <summary>
            The cached box for the value negative one (-1).
            </summary>
        </member>
        <member name="F:Ultraviolet.Core.CommonBoxedValues.Single.NaN">
            <summary>
            The cached box for not a number (NaN).
            </summary>
        </member>
        <member name="F:Ultraviolet.Core.CommonBoxedValues.Single.PositiveInfinity">
            <summary>
            The cached box for positive infinity.
            </summary>
        </member>
        <member name="F:Ultraviolet.Core.CommonBoxedValues.Single.NegativeInfinity">
            <summary>
            The cached box for negative infinity.
            </summary>
        </member>
        <member name="F:Ultraviolet.Core.CommonBoxedValues.Single.MinValue">
            <summary>
            The cached box for Single.MinValue.
            </summary>
        </member>
        <member name="F:Ultraviolet.Core.CommonBoxedValues.Single.MaxValue">
            <summary>
            The cached box for Single.MaxValue.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.CommonBoxedValues.Double">
            <summary>
            Contains boxed Double values.
            </summary>
        </member>
        <member name="F:Ultraviolet.Core.CommonBoxedValues.Double.Zero">
            <summary>
            The cached box for the value zero (0).
            </summary>
        </member>
        <member name="F:Ultraviolet.Core.CommonBoxedValues.Double.One">
            <summary>
            The cached box for the value one (1).
            </summary>
        </member>
        <member name="F:Ultraviolet.Core.CommonBoxedValues.Double.NegativeOne">
            <summary>
            The cached box for the value negative one (-1).
            </summary>
        </member>
        <member name="F:Ultraviolet.Core.CommonBoxedValues.Double.NaN">
            <summary>
            The cached box for not a number (NaN).
            </summary>
        </member>
        <member name="F:Ultraviolet.Core.CommonBoxedValues.Double.PositiveInfinity">
            <summary>
            The cached box for positive infinity.
            </summary>
        </member>
        <member name="F:Ultraviolet.Core.CommonBoxedValues.Double.NegativeInfinity">
            <summary>
            The cached box for negative infinity.
            </summary>
        </member>
        <member name="F:Ultraviolet.Core.CommonBoxedValues.Double.MinValue">
            <summary>
            The cached box for Double.MinValue.
            </summary>
        </member>
        <member name="F:Ultraviolet.Core.CommonBoxedValues.Double.MaxValue">
            <summary>
            The cached box for Double.MaxValue.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.Contract">
            <summary>
            Contains methods for enforcing code contracts and establishing invariants.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Contract.EnsureRange(System.Boolean,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified condition is false.
            </summary>
            <param name="condition">The condition to evaluate.</param>
            <param name="message">An optional message to pass to the thrown exception.</param>
        </member>
        <member name="M:Ultraviolet.Core.Contract.EnsureRange(System.Boolean,Ultraviolet.Core.Text.StringResource)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified condition is false.
            </summary>
            <param name="condition">The condition to evaluate.</param>
            <param name="message">An optional message to pass to the thrown exception.</param>
        </member>
        <member name="M:Ultraviolet.Core.Contract.Ensure(System.Boolean,System.String)">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/> if the specified condition is false.
            </summary>
            <param name="condition">The condition to evaluate.</param>
            <param name="message">An optional message to pass to the thrown exception.</param>
        </member>
        <member name="M:Ultraviolet.Core.Contract.Ensure(System.Boolean,Ultraviolet.Core.Text.StringResource)">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/> if the specified condition is false.
            </summary>
            <param name="condition">The condition to evaluate.</param>
            <param name="message">An optional message to pass to the thrown exception.</param>
        </member>
        <member name="M:Ultraviolet.Core.Contract.Ensure``1(System.Boolean)">
            <summary>
            Throws an exception if the specified condition is false.
            </summary>
            <typeparam name="T">The type of exception to throw.</typeparam>
            <param name="condition">The condition to evaluate.</param>
        </member>
        <member name="M:Ultraviolet.Core.Contract.Ensure``1(System.Boolean,System.String)">
            <summary>
            Throws an exception if the specified condition is false.
            </summary>
            <typeparam name="T">The type of exception to throw.</typeparam>
            <param name="condition">The condition to evaluate.</param>
            <param name="message">An optional message to pass to the thrown exception.</param>
        </member>
        <member name="M:Ultraviolet.Core.Contract.Ensure``1(System.Boolean,Ultraviolet.Core.Text.StringResource)">
            <summary>
            Throws an exception if the specified condition is false.
            </summary>
            <typeparam name="T">The type of exception to throw.</typeparam>
            <param name="condition">The condition to evaluate.</param>
            <param name="message">An optional message to pass to the thrown exception.</param>
        </member>
        <member name="M:Ultraviolet.Core.Contract.EnsureNot(System.Boolean,System.String)">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/> if the specified condition is true.
            </summary>
            <param name="condition">The condition to evaluate.</param>
            <param name="message">An optional message to pass to the thrown exception.</param>
        </member>
        <member name="M:Ultraviolet.Core.Contract.EnsureNot(System.Boolean,Ultraviolet.Core.Text.StringResource)">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/> if the specified condition is true.
            </summary>
            <param name="condition">The condition to evaluate.</param>
            <param name="message">An optional message to pass to the thrown exception.</param>
        </member>
        <member name="M:Ultraviolet.Core.Contract.EnsureNot``1(System.Boolean)">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/> if the specified condition is true.
            </summary>
            <typeparam name="T">The type of exception to throw.</typeparam>
            <param name="condition">The condition to evaluate.</param>
        </member>
        <member name="M:Ultraviolet.Core.Contract.EnsureNot``1(System.Boolean,System.String)">
            <summary>
            Throws an exception if the specified condition is true.
            </summary>
            <typeparam name="T">The type of exception to throw.</typeparam>
            <param name="condition">The condition to evaluate.</param>
            <param name="message">An optional message to pass to the thrown exception.</param>
        </member>
        <member name="M:Ultraviolet.Core.Contract.EnsureNot``1(System.Boolean,Ultraviolet.Core.Text.StringResource)">
            <summary>
            Throws an exception if the specified condition is true.
            </summary>
            <typeparam name="T">The type of exception to throw.</typeparam>
            <param name="condition">The condition to evaluate.</param>
            <param name="message">An optional message to pass to the thrown exception.</param>
        </member>
        <member name="M:Ultraviolet.Core.Contract.EnsureNotDisposed(System.Object,System.Boolean)">
            <summary>
            Throws an <see cref="T:System.ObjectDisposedException"/> if the specified object has been disposed.
            </summary>
            <param name="obj">The object to evaluate.</param>
            <param name="disposed">A value indicating whether the object is disposed.</param>
        </member>
        <member name="M:Ultraviolet.Core.Contract.Require(System.IntPtr,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> if the specified pointer is <see cref="F:System.IntPtr.Zero"/>.
            </summary>
            <param name="argument">The object to evaluate for nullity.</param>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Ultraviolet.Core.Contract.Require(System.IntPtr,Ultraviolet.Core.Text.StringResource)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> if the specified pointer is <see cref="F:System.IntPtr.Zero"/>.
            </summary>
            <param name="argument">The object to evaluate for nullity.</param>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Ultraviolet.Core.Contract.Require``1(``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> if the specified object is <see langword="null"/>.
            </summary>
            <typeparam name="T">The type of object to evaluate for nullity.</typeparam>
            <param name="argument">The object to evaluate for nullity.</param>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Ultraviolet.Core.Contract.Require``1(``0,Ultraviolet.Core.Text.StringResource)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> if the specified object is null.
            </summary>
            <typeparam name="T">The type of object to evaluate for nullity.</typeparam>
            <param name="argument">The object to evaluate for nullity.</param>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Ultraviolet.Core.Contract.RequireNotEmpty(System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> if the specified string is null, 
            or an <see cref="T:System.ArgumentException"/> if the string is empty.
            </summary>
            <param name="argument">The string to evaluate for nullity or emptiness.</param>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Ultraviolet.Core.Contract.RequireNotEmpty(System.String,Ultraviolet.Core.Text.StringResource)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> if the specified string is null, 
            or an <see cref="T:System.ArgumentException"/> if the string is empty.
            </summary>
            <param name="argument">The string to evaluate for nullity or emptiness.</param>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Ultraviolet.Core.Contract.RequireNotEmpty(System.Collections.ICollection,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> if the specified collection is null, 
            or an <see cref="T:System.ArgumentException"/> if the collection is empty.
            </summary>
            <param name="collection">The collection to evaluate for nullity or emptiness.</param>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Ultraviolet.Core.Contract.RequireNotEmpty(System.Collections.ICollection,Ultraviolet.Core.Text.StringResource)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> if the specified collection is null, 
            or an <see cref="T:System.ArgumentException"/> if the collection is empty.
            </summary>
            <param name="collection">The collection to evaluate for nullity or emptiness.</param>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Ultraviolet.Core.Contract.RequireNotEmpty``1(System.Collections.Generic.ICollection{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> if the specified collection is null, 
            or an <see cref="T:System.ArgumentException"/> if the collection is empty.
            </summary>
            <typeparam name="T">The type of item contained by the collection.</typeparam>
            <param name="collection">The collection to evaluate for nullity or emptiness.</param>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Ultraviolet.Core.Contract.RequireNotEmpty``1(System.Collections.Generic.ICollection{``0},Ultraviolet.Core.Text.StringResource)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> if the specified collection is null, 
            or an <see cref="T:System.ArgumentException"/> if the collection is empty.
            </summary>
            <typeparam name="T">The type of item contained by the collection.</typeparam>
            <param name="collection">The collection to evaluate for nullity or emptiness.</param>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Ultraviolet.Core.Contract.RequireNotEmpty(System.Collections.IEnumerable,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> if the specified collection is null, 
            or an <see cref="T:System.ArgumentException"/> if the collection is empty.
            </summary>
            <param name="collection">The collection to evaluate for nullity or emptiness.</param>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Ultraviolet.Core.Contract.RequireNotEmpty(System.Collections.IEnumerable,Ultraviolet.Core.Text.StringResource)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> if the specified collection is null, 
            or an <see cref="T:System.ArgumentException"/> if the collection is empty.
            </summary>
            <param name="collection">The collection to evaluate for nullity or emptiness.</param>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Ultraviolet.Core.Contract.RequireNotEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> if the specified collection is null, 
            or an <see cref="T:System.ArgumentException"/> if the collection is empty.
            </summary>
            <typeparam name="T">The type of item contained by the collection.</typeparam>
            <param name="collection">The collection to evaluate for nullity or emptiness.</param>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Ultraviolet.Core.Contract.RequireNotEmpty``1(System.Collections.Generic.IEnumerable{``0},Ultraviolet.Core.Text.StringResource)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> if the specified collection is null, 
            or an <see cref="T:System.ArgumentException"/> if the collection is empty.
            </summary>
            <typeparam name="T">The type of item contained by the collection.</typeparam>
            <param name="collection">The collection to evaluate for nullity or emptiness.</param>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Ultraviolet.Core.Contract.CreateExceptionWithMessage``1(System.String)">
            <summary>
            Creates a new exception object with the specified message as an argument.
            </summary>
            <param name="message">The message to pass to the exception as an argument.</param>
            <returns>The exception object that was created.</returns>
        </member>
        <member name="T:Ultraviolet.Core.CoreJsonContractResolver">
            <summary>
            Represents a JSON contract resolver which implements standard rules for Ultraviolet Core object serialization.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.CoreJsonContractResolver.CreateProperty(System.Reflection.MemberInfo,Newtonsoft.Json.MemberSerialization)">
            <inheritdoc/>
        </member>
        <member name="T:Ultraviolet.Core.CoreJsonSerializerSettings">
            <summary>
            Represents a standard set of JSON serializer settings for loading Ultraviolet Core objects.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.CoreJsonSerializerSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.CoreJsonSerializerSettings"/> class.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.CoreJsonSerializerSettings.Instance">
            <summary>
            Gets the singleton instance of the <see cref="T:Ultraviolet.Core.CoreJsonSerializerSettings"/> class.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.CoreJsonSerializerSettings.SetContractResolver">
            <summary>
            Sets the contract resolver specified by this settings object.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.CoreJsonSerializerSettings.SetConverters">
            <summary>
            Sets the converters specified by this settings object.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.Data.PrimitiveUnion">
            <summary>
            Represents a structure which can store any .NET primitive value type.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Data.PrimitiveUnion.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Data.PrimitiveUnion"/> structure.
            </summary>
            <param name="value">The value to store within the parameter.</param>
        </member>
        <member name="M:Ultraviolet.Core.Data.PrimitiveUnion.#ctor(System.SByte)">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Data.PrimitiveUnion"/> structure.
            </summary>
            <param name="value">The value to store within the parameter.</param>
        </member>
        <member name="M:Ultraviolet.Core.Data.PrimitiveUnion.#ctor(System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Data.PrimitiveUnion"/> structure.
            </summary>
            <param name="value">The value to store within the parameter.</param>
        </member>
        <member name="M:Ultraviolet.Core.Data.PrimitiveUnion.#ctor(System.Int16)">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Data.PrimitiveUnion"/> structure.
            </summary>
            <param name="value">The value to store within the parameter.</param>
        </member>
        <member name="M:Ultraviolet.Core.Data.PrimitiveUnion.#ctor(System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Data.PrimitiveUnion"/> structure.
            </summary>
            <param name="value">The value to store within the parameter.</param>
        </member>
        <member name="M:Ultraviolet.Core.Data.PrimitiveUnion.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Data.PrimitiveUnion"/> structure.
            </summary>
            <param name="value">The value to store within the parameter.</param>
        </member>
        <member name="M:Ultraviolet.Core.Data.PrimitiveUnion.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Data.PrimitiveUnion"/> structure.
            </summary>
            <param name="value">The value to store within the parameter.</param>
        </member>
        <member name="M:Ultraviolet.Core.Data.PrimitiveUnion.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Data.PrimitiveUnion"/> structure.
            </summary>
            <param name="value">The value to store within the parameter.</param>
        </member>
        <member name="M:Ultraviolet.Core.Data.PrimitiveUnion.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Data.PrimitiveUnion"/> structure.
            </summary>
            <param name="value">The value to store within the parameter.</param>
        </member>
        <member name="M:Ultraviolet.Core.Data.PrimitiveUnion.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Data.PrimitiveUnion"/> structure.
            </summary>
            <param name="value">The value to store within the parameter.</param>
        </member>
        <member name="M:Ultraviolet.Core.Data.PrimitiveUnion.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Data.PrimitiveUnion"/> structure.
            </summary>
            <param name="value">The value to store within the parameter.</param>
        </member>
        <member name="M:Ultraviolet.Core.Data.PrimitiveUnion.AsByte">
            <summary>
            Converts the parameter to an <see cref="T:System.Byte"/> value.
            </summary>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.PrimitiveUnion.AsSByte">
            <summary>
            Converts the parameter to an <see cref="T:System.SByte"/> value.
            </summary>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.PrimitiveUnion.AsChar">
            <summary>
            Converts the parameter to an <see cref="T:System.Char"/> value.
            </summary>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.PrimitiveUnion.AsInt16">
            <summary>
            Converts the parameter to an <see cref="T:System.Int16"/> value.
            </summary>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.PrimitiveUnion.AsUInt16">
            <summary>
            Converts the parameter to an <see cref="T:System.UInt16"/> value.
            </summary>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.PrimitiveUnion.AsInt32">
            <summary>
            Converts the parameter to an <see cref="T:System.Int32"/> value.
            </summary>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.PrimitiveUnion.AsUInt32">
            <summary>
            Converts the parameter to an <see cref="T:System.UInt32"/> value.
            </summary>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.PrimitiveUnion.AsInt64">
            <summary>
            Converts the parameter to an <see cref="T:System.Int64"/> value.
            </summary>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.PrimitiveUnion.AsUInt64">
            <summary>
            Converts the parameter to an <see cref="T:System.UInt64"/> value.
            </summary>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.PrimitiveUnion.AsSingle">
            <summary>
            Converts the parameter to a <see cref="T:System.Single"/> value.
            </summary>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.PrimitiveUnion.AsDouble">
            <summary>
            Converts the parameter to a <see cref="T:System.Double"/> value.
            </summary>
            <returns>The converted value.</returns>
        </member>
        <member name="T:Ultraviolet.Core.Data.DataObject">
            <summary>
            Represents an object which is dynamically constructed from data files.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Data.DataObject.#ctor(System.String,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Data.DataObject"/> class.
            </summary>
            <param name="key">The object's uniquely identifying key.</param>
            <param name="id">The object's globally-unique identifier.</param>
        </member>
        <member name="P:Ultraviolet.Core.Data.DataObject.Key">
            <summary>
            Gets the object's uniquely identifying key.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Data.DataObject.GlobalID">
            <summary>
            Gets the object's globally-unique identifier.
            </summary>
            <remarks>A data object's global identifier allows it to be addressed in a way which does not change
            across instances of the application.</remarks>
        </member>
        <member name="P:Ultraviolet.Core.Data.DataObject.LocalID">
            <summary>
            Gets the object's application-local identifier.
            </summary>
            <remarks>A data object's local identifier allows it to be conveniently and efficiently addressed
            within a single process. Local identifiers may change across instances of an application.</remarks>
        </member>
        <member name="T:Ultraviolet.Core.Data.DataObjectRegistries">
            <summary>
            Maintains the application's collection of data object registries.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Data.DataObjectRegistries.Get``1">
            <summary>
            Gets the data object registry for the specified object type.
            </summary>
            <typeparam name="T">The type of object for which to retrieve a registry.</typeparam>
            <returns>The <see cref="T:Ultraviolet.Core.Data.DataObjectRegistry`1"/> which contains objects of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.DataObjectRegistries.Register(System.Reflection.Assembly)">
            <summary>
            Registers the data object registries in the specified assembly.
            </summary>
            <param name="asm">The assembly that contains the registries to register.</param>
        </member>
        <member name="M:Ultraviolet.Core.Data.DataObjectRegistries.Unregister``1">
            <summary>
            Removes the data object registry for the specified type from the collection of registries.
            </summary>
            <typeparam name="T">The type of data object for which to unregister a registry.</typeparam>
        </member>
        <member name="M:Ultraviolet.Core.Data.DataObjectRegistries.Reset">
            <summary>
            Unregisters all object registries and completely resets the registry manager.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Data.DataObjectRegistries.Clear">
            <summary>
            Removes all objects from all of the application's data object registries 
            and returns them to their default states.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Data.DataObjectRegistries.Load">
            <summary>
            Loads all of the application's registered data object registries.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Data.DataObjectRegistries.LoadKeys">
            <summary>
            Loads object keys for all of the application's registered data object registries.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Data.DataObjectRegistries.LoadObjects">
            <summary>
            Loads objects for all of the application's registered data object registries.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Data.DataObjectRegistries.ResolveReference(System.String)">
            <summary>
            Resolves an object reference. If the reference cannot be resolved, an exception is thrown.
            </summary>
            <param name="reference">The object reference to resolve.</param>
            <returns>The resolved object reference.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.DataObjectRegistries.GetRegistryElementType(Ultraviolet.Core.Data.IDataObjectRegistry)">
            <summary>
            Gets the element type of the specified registry.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.Data.DataObjectRegistry`1">
            <summary>
            Represents a registry of data-driven objects of a particular type.
            </summary>
            <typeparam name="T">The type of data object managed by the registry.</typeparam>
        </member>
        <member name="M:Ultraviolet.Core.Data.DataObjectRegistry`1.Ultraviolet#Core#Data#IDataObjectRegistry#Register">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Data.DataObjectRegistry`1.Ultraviolet#Core#Data#IDataObjectRegistry#Unregister">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Data.DataObjectRegistry`1.SetSourceFiles(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Data.DataObjectRegistry`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Data.DataObjectRegistry`1.LoadKeys">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Data.DataObjectRegistry`1.LoadObjects">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Data.DataObjectRegistry`1.ResolveObjectKey(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Data.DataObjectRegistry`1.GetObject(System.UInt16)">
            <summary>
            Gets the object with the specified local identifier.
            </summary>
            <param name="id">The local identifier of the object to retrieve.</param>
            <returns>The object with the specified identifier.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.DataObjectRegistry`1.GetObject(System.Guid)">
            <summary>
            Gets the object with the specified global identifier.
            </summary>
            <param name="id">The global identifier of the object to retrieve.</param>
            <returns>The object with the specified identifier.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.DataObjectRegistry`1.GetObject(Ultraviolet.Core.Data.ResolvedDataObjectReference)">
            <summary>
            Gets the object with the specified global identifier.
            </summary>
            <param name="id">The global identifier of the object to retrieve.</param>
            <returns>The object with the specified identifier.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.DataObjectRegistry`1.GetObject(System.String)">
            <summary>
            Gets the object with the specified global identifier.
            </summary>
            <param name="id">The global identifier of the object to retrieve.</param>
            <returns>The object with the specified identifier.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.DataObjectRegistry`1.GetObjectByKey(System.String)">
            <summary>
            Gets the object with the specified key.
            </summary>
            <param name="key">The key of the object to retrieve.</param>
            <returns>The object with the specified key.</returns>
        </member>
        <member name="P:Ultraviolet.Core.Data.DataObjectRegistry`1.ReferenceResolutionName">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.Core.Data.DataObjectRegistry`1.DataElementName">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.Core.Data.DataObjectRegistry`1.Count">
            <summary>
            Gets the number of registered objects.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Data.DataObjectRegistry`1.OpenFileStream(System.String)">
            <summary>
            Opens the specified file for reading.
            </summary>
            <param name="path">The path to the file to open.</param>
            <returns>The stream that represents the specified file.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.DataObjectRegistry`1.OnRegistered">
            <summary>
            Called when the registry is added to the global collection of registries.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Data.DataObjectRegistry`1.OnUnregistered">
            <summary>
            Called when the registry is removed from the global collection of registries.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Data.DataObjectRegistry`1.OnResetting">
            <summary>
            Called when the registry is being reset.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Data.DataObjectRegistry`1.LoadKeysInternal">
            <summary>
            Loads the registry's keys.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Data.DataObjectRegistry`1.LoadObjectsInternal">
            <summary>
            Loads the registry's objects.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Data.DataObjectRegistry`1.ValidateObject(`0,System.String@)">
            <summary>
            Validates the specified data object.
            </summary>
            <param name="dataObject">The data object to validate.</param>
            <param name="error">A string describing the validation error that occurred, if any.</param>
            <returns><see langword="true"/> if a validation error occurred; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.DataObjectRegistry`1.LoadDefinitionsFromXml(System.String)">
            <summary>
            Loads a set of object definitions from the specified XML file.
            </summary>
            <param name="file">The file from which to load the data objects.</param>
            <returns>The collection of objects that were loaded.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.DataObjectRegistry`1.LoadDefinitionsFromJson(System.String)">
            <summary>
            Loads a set of object definitions from the specified JSON file.
            </summary>
            <param name="file">The file from which to load the data objects.</param>
            <returns>The collection of objects that were loaded.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.DataObjectRegistry`1.LoadKeysFromData(System.Xml.Linq.XElement)">
            <summary>
            Loads a set of object keys from the specified data definition file into the specified key registry.
            </summary>
            <param name="data">The root element of the data definition file from which to load keys.</param>
        </member>
        <member name="M:Ultraviolet.Core.Data.DataObjectRegistry`1.LoadKeysFromData(System.Xml.Linq.XElement,System.Collections.Generic.Dictionary{System.String,System.Guid})">
            <summary>
            Loads a set of object keys from the specified data definition file into the specified key registry.
            </summary>
            <param name="data">The root element of the data definition file from which to load keys.</param>
            <param name="keys">The key registry into which to load keys.</param>
        </member>
        <member name="M:Ultraviolet.Core.Data.DataObjectRegistry`1.LoadKeysFromData(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Loads a set of object keys from the specified data definition file into the specified key registry.
            </summary>
            <param name="data">The root element of the data definition file from which to load keys.</param>
        </member>
        <member name="M:Ultraviolet.Core.Data.DataObjectRegistry`1.LoadKeysFromData(Newtonsoft.Json.Linq.JObject,System.Collections.Generic.Dictionary{System.String,System.Guid})">
            <summary>
            Loads a set of object keys from the specified data definition file into the specified key registry.
            </summary>
            <param name="data">The root element of the data definition file from which to load keys.</param>
            <param name="keys">The key registry into which to load keys.</param>
        </member>
        <member name="M:Ultraviolet.Core.Data.DataObjectRegistry`1.Register(`0)">
            <summary>
            Adds an object to the registry.
            </summary>
            <param name="obj">The object to register.</param>
        </member>
        <member name="P:Ultraviolet.Core.Data.DataObjectRegistry`1.DefaultObjectClass">
            <summary>
            Gets the default class for objects loaded by this registry.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Data.DataObjectRegistry`1.GetEnumerator">
            <summary>
            Gets an enumerator for the collection.
            </summary>
            <returns>An enumerator for the collection.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.DataObjectRegistry`1.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,T}}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Data.DataObjectRegistry`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:Ultraviolet.Core.Data.DataObjectKeysDescription">
            <summary>
            An intermediate representation of a <see cref="T:Ultraviolet.Core.Data.DataObject"/> used during serialization.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Data.DataObjectKeysDescription.Key">
            <summary>
            Gets or sets the object's identifying key.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Data.DataObjectKeysDescription.ID">
            <summary>
            Gets or sets the object's globally-unique identifier.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.Data.DataObjectRegistryKeysDescription">
            <summary>
            An intermediate representation of a <see cref="T:Ultraviolet.Core.Data.DataObjectRegistry`1"/> used during serialization.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Data.DataObjectRegistryKeysDescription.Items">
            <summary>
            Gets or sets the registry's collection of items.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.Data.DataObjectRegistryDescription`1">
            <summary>
            An intermediate representation of a <see cref="T:Ultraviolet.Core.Data.DataObjectRegistry`1"/> used during serialization.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Data.DataObjectRegistryDescription`1.Items">
            <summary>
            Gets or sets the registry's collection of items.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.Data.DataObjectTranslationTable">
            <summary>
            Represents a table which associates sets of application-local identifiers with global identifiers.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Data.DataObjectTranslationTable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the DataObjectTranslationTable class from serialized data.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object containing the 
            information required to serialize the dictionary.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> structure containing 
            the source and destinatoin of the serialized stream associated with the dictionary.</param>
        </member>
        <member name="M:Ultraviolet.Core.Data.DataObjectTranslationTable.IsValid``1(System.UInt16)">
            <summary>
            Gets a value indicating whether the specified local identifier in this translation
            table translates to an object that is valid within the current process.
            </summary>
            <typeparam name="T">The type of data object being evaluated.</typeparam>
            <param name="localID">The local identifier of the entry within the translation table to validate.</param>
            <returns><see langword="true"/> if the entry is valid; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.DataObjectTranslationTable.Translate``1(System.UInt16)">
            <summary>
            Translates the specified local identifier in this translation table
            into the corresponding local identifier within the current process.
            </summary>
            <typeparam name="T">The type of data object being evaluated.</typeparam>
            <param name="localID">The local identifier to translate.</param>
            <returns>The translated local identifier.</returns>
        </member>
        <member name="T:Ultraviolet.Core.Data.IDataObjectRegistry">
            <summary>
            Represents a registry of data-driven objects of a particular type.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Data.IDataObjectRegistry.Register">
            <summary>
            Indicates that the registry has been added to the global collection of registries.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Data.IDataObjectRegistry.Unregister">
            <summary>
            Indicates that the registry has been removed from the global collection of registries.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Data.IDataObjectRegistry.SetSourceFiles(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Sets the collection of source files from which the registry reads object definitions.
            </summary>
            <param name="files">A collection of source files from which to read object definitions.</param>
        </member>
        <member name="M:Ultraviolet.Core.Data.IDataObjectRegistry.Clear">
            <summary>
            Removes all objects from the registry and returns it to its default state.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Data.IDataObjectRegistry.LoadKeys">
            <summary>
            Loads the registry's object keys.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Data.IDataObjectRegistry.LoadObjects">
            <summary>
            Loads the registry's objects.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Data.IDataObjectRegistry.ResolveObjectKey(System.String)">
            <summary>
            Resolves an object key to a global identifier.
            </summary>
            <param name="key">The object key to resolve.</param>
            <returns>The global identifier associated with the specified object key, or <see langword="null"/> if no such key exists.</returns>
        </member>
        <member name="P:Ultraviolet.Core.Data.IDataObjectRegistry.ReferenceResolutionName">
            <summary>
            Gets the data object's reference resolution name, which is used to resolve
            references with the format @ReferenceResolutionName:KEY
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Data.IDataObjectRegistry.DataElementName">
            <summary>
            The name of the content elements in the definition files loaded by this registry.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.Data.IGloballyIdentified">
            <summary>
            Represents an object that has been assigned a globally-unique identification value.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Data.IGloballyIdentified.GlobalID">
            <summary>
            Gets the object's globally-unique identifier.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.Data.PropertyChangedEventHandler">
            <summary>
            Represents the method that is called when an instance of the <see cref="T:Ultraviolet.Core.Data.INotifyPropertyChanged"/> interface is changed.
            </summary>
            <param name="instance">The object instance that changed.</param>
            <param name="propertyName">The name of the property that was changed. If all of the object's properties have
            changed, this value can be either <see cref="F:System.String.Empty"/> or <see langword="null"/>.</param>
        </member>
        <member name="T:Ultraviolet.Core.Data.INotifyPropertyChanged">
            <summary>
            Represents an object which raises an event when one of its property values changes.
            </summary>
        </member>
        <member name="E:Ultraviolet.Core.Data.INotifyPropertyChanged.PropertyChanged">
            <summary>
            Occurs when one of the object's property values changes.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.Data.MersenneTwister">
            <summary>
            Represents a pseudorandom number generator implementing the Mersenne Twister algorithm.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Data.MersenneTwister.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Data.MersenneTwister"/> class with a random seed based on the current system time.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Data.MersenneTwister.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Data.MersenneTwister"/> class with the specified random seed.
            </summary>
            <param name="seed">The psuedorandom number generator's initial seed.</param>
        </member>
        <member name="M:Ultraviolet.Core.Data.MersenneTwister.Reseed(System.Int32)">
            <summary>
            Resets the random number generator to the beginning of the sequence specified by the given random seed.
            </summary>
            <param name="seed">The seed to which to reset the random number generator.</param>
        </member>
        <member name="M:Ultraviolet.Core.Data.MersenneTwister.Next">
            <summary>
            Returns a nonnegative random number.
            </summary>
            <returns>A 32-bit signed integer greater than or equal to zero and less than MaxValue.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.MersenneTwister.Next(System.Int32)">
            <summary>
            Returns a nonnegative random number less than the specified maximum.
            </summary>
            <param name="maxValue">The exclusive upper bound of the random number to be generated. maxValue must be greater than or equal to zero.</param>
            <returns>A 32-bit signed integer greater than or equal to zero, and less than maxValue; that is, the range of return 
            values ordinarily includes zero but not maxValue. However, if maxValue equals zero, maxValue is returned.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.MersenneTwister.Next(System.Int32,System.Int32)">
            <summary>
            Returns a random number within a specified range.
            </summary>
            <param name="minValue">The inclusive lower bound of the random number returned.</param>
            <param name="maxValue">The exclusive upper bound of the random number returned. maxValue must be greater than or equal to minValue.</param>
            <returns>A 32-bit signed integer greater than or equal to minValue and less than maxValue; that is, the range of 
            return values includes minValue but not maxValue. If minValue equals maxValue, minValue is returned.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.MersenneTwister.NextDouble">
            <summary>
            Returns a random number between 0.0 and 1.0.
            </summary>
            <returns>A double-precision floating point number greater than or equal to 0.0, and less than 1.0.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.MersenneTwister.NextBytes(System.Byte[])">
            <summary>
            Fills the elements of a specified array of bytes with random numbers.
            </summary>
            <param name="buffer">An array of bytes to contain random numbers.</param>
        </member>
        <member name="M:Ultraviolet.Core.Data.MersenneTwister.Sample">
            <summary>
            Returns a random number between 0.0 and 1.0.
            </summary>
            <returns>A double-precision floating point number greater than or equal to 0.0, and less than 1.0.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.MersenneTwister.GenerateNumbers">
            <summary>
            Rebuilds the generator's array of untempered numbers.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Data.MersenneTwister.ExtractNumber">
            <summary>
            Extracts a number from the generator sequence.
            </summary>
            <returns>The extracted number.</returns>
        </member>
        <member name="T:Ultraviolet.Core.Data.NamespaceDoc">
            <summary>
            The <see cref="N:Ultraviolet.Core.Data"/> namespace contains classes useful for loading, 
            generating, and manipulating application data and content files. 
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.Data.ObjectLoaderMemberResolutionHandler">
            <summary>
            Represents a method which can be passed to the <see cref="T:Ultraviolet.Core.Data.ObjectLoader"/> to allow external code
            to resolve property values.
            </summary>
            <param name="obj">The object which is being populated.</param>
            <param name="name">The name of the property which is being populated.</param>
            <param name="value">The value which is being resolved.</param>
            <returns><see langword="true"/> if the property was resolved; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Ultraviolet.Core.Data.ObjectLoader">
            <summary>
            Contains methods for loading object definitions from data files.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectLoader.LoadDefinitions``1(Ultraviolet.Core.Data.ObjectLoaderDataType,System.String,System.String,System.Type)">
            <summary>
            Loads the objects defined in the specified file.
            </summary>
            <typeparam name="T">The type of object to load.</typeparam>
            <param name="dataType">The type of data contained in the specified file.</param>
            <param name="path">The path of the file that contains the data definitions to load.</param>
            <param name="name">The name of the type of object to load.  Corresponds to the names of the elements in the XML file.</param>
            <param name="defaultClass">The default class if no default is specified in the file.</param>
            <returns>A collection containing the objects that were loaded.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectLoader.LoadDefinitions``1(System.Xml.Linq.XDocument,System.String,System.Type)">
            <summary>
            Loads object definitions from the specified XML file and adds them to the specified object registry.
            </summary>
            <typeparam name="T">The type of object to load.</typeparam>
            <param name="xml">The XML document that contains the object definitions to load.</param>
            <param name="name">The name of the type of object to load, which corresponds to the names of the elements in the data file.</param>
            <param name="defaultClass">The default class if no default is specified in the file.</param>
            <returns>A collection containing the objects that were loaded.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectLoader.LoadDefinitions``1(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Loads object definitions from the specified JSON file and adds them to the specified object registry.
            </summary>
            <typeparam name="T">The type of object to load.</typeparam>
            <param name="json">The JSON document that contains the object definitions to load.</param>
            <returns>A collection containing the objects that were loaded.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectLoader.LoadObject``1(System.Xml.Linq.XElement,System.Boolean)">
            <summary>
            Loads an object from the specified XML element.
            </summary>
            <typeparam name="T">The type of object to load.</typeparam>
            <param name="xml">The XML element that contains the object data.</param>
            <param name="ignoreMissingMembers">A value indicating whether the object loader 
            should ignore members which do not exist on the type.</param>
            <returns>The object that was loaded.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectLoader.LoadObject``1(Ultraviolet.Core.Data.ObjectLoaderMemberResolutionHandler,System.Xml.Linq.XElement,System.Boolean)">
            <summary>
            Loads an object from the specified XML element.
            </summary>
            <typeparam name="T">The type of object to load.</typeparam>
            <param name="resolver">A custom <see cref="T:Ultraviolet.Core.Data.ObjectLoaderMemberResolutionHandler"/> which allows external
            code to optionally resolve deserialized member values.</param>
            <param name="xml">The XML element that contains the object data.</param>
            <param name="ignoreMissingMembers">A value indicating whether the object loader 
            should ignore members which do not exist on the type.</param>
            <returns>The object that was loaded.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectLoader.LoadObject(System.Type,System.Xml.Linq.XElement,System.Boolean)">
            <summary>
            Loads an object from the specified XML element.
            </summary>
            <param name="type">The type of object to load.</param>
            <param name="xml">The XML element that contains the object data.</param>
            <param name="ignoreMissingMembers">A value indicating whether the object loader 
            should ignore members which do not exist on the type.</param>
            <returns>The object that was loaded.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectLoader.LoadObject(Ultraviolet.Core.Data.ObjectLoaderMemberResolutionHandler,System.Type,System.Xml.Linq.XElement,System.Boolean)">
            <summary>
            Loads an object from the specified XML element.
            </summary>
            <param name="resolver">A custom <see cref="T:Ultraviolet.Core.Data.ObjectLoaderMemberResolutionHandler"/> which allows external
            code to optionally resolve deserialized member values.</param>
            <param name="type">The type of object to load.</param>
            <param name="xml">The XML element that contains the object data.</param>
            <param name="ignoreMissingMembers">A value indicating whether the object loader 
            should ignore members which do not exist on the type.</param>
            <returns>The object that was loaded.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectLoader.LoadObject``1(System.Xml.Linq.XElement,System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            Loads an object from the specified XML element.
            </summary>
            <typeparam name="T">The type of object to load.</typeparam>
            <param name="xml">The XML element that contains the object data.</param>
            <param name="culture">The culture information to use when parsing values.</param>
            <param name="ignoreMissingMembers">A value indicating whether the object loader 
            should ignore members which do not exist on the type.</param>
            <returns>The object that was loaded.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectLoader.LoadObject``1(Ultraviolet.Core.Data.ObjectLoaderMemberResolutionHandler,System.Xml.Linq.XElement,System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            Loads an object from the specified XML element.
            </summary>
            <typeparam name="T">The type of object to load.</typeparam>
            <param name="resolver">A custom <see cref="T:Ultraviolet.Core.Data.ObjectLoaderMemberResolutionHandler"/> which allows external
            code to optionally resolve deserialized member values.</param>
            <param name="xml">The XML element that contains the object data.</param>
            <param name="culture">The culture information to use when parsing values.</param>
            <param name="ignoreMissingMembers">A value indicating whether the object loader 
            should ignore members which do not exist on the type.</param>
            <returns>The object that was loaded.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectLoader.LoadObject(System.Type,System.Xml.Linq.XElement,System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            Loads an object from the specified XML element.
            </summary>
            <param name="type">The type of object to load.</param>
            <param name="xml">The XML element that contains the object data.</param>
            <param name="culture">The culture information to use when parsing values.</param>
            <param name="ignoreMissingMembers">A value indicating whether the object loader 
            should ignore members which do not exist on the type.</param>
            <returns>The object that was loaded.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectLoader.LoadObject(Ultraviolet.Core.Data.ObjectLoaderMemberResolutionHandler,System.Type,System.Xml.Linq.XElement,System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            Loads an object from the specified XML element.
            </summary>
            <param name="resolver">A custom <see cref="T:Ultraviolet.Core.Data.ObjectLoaderMemberResolutionHandler"/> which allows external
            code to optionally resolve deserialized member values.</param>
            <param name="type">The type of object to load.</param>
            <param name="xml">The XML element that contains the object data.</param>
            <param name="culture">The culture information to use when parsing values.</param>
            <param name="ignoreMissingMembers">A value indicating whether the object loader 
            should ignore members which do not exist on the type.</param>
            <returns>The object that was loaded.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectLoader.LoadObject``1(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Loads an object from the specified JSON object.
            </summary>
            <typeparam name="T">The type of object to load.</typeparam>
            <param name="json">The JSON object that contains the object data.</param>
            <returns>The object that was loaded.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectLoader.LoadObject``1(Newtonsoft.Json.Linq.JObject,System.Globalization.CultureInfo)">
            <summary>
            Loads an object from the specified JSON object.
            </summary>
            <typeparam name="T">The type of object to load.</typeparam>
            <param name="json">The JSON object that contains the object data.</param>
            <param name="culture">The culture information to use when parsing values.</param>
            <returns>The object that was loaded.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectLoader.LoadObject(System.Type,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Loads an object from the specified JSON object.
            </summary>
            <param name="type">The type of object to load.</param>
            <param name="json">The JSON object that contains the object data.</param>
            <returns>The object that was loaded.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectLoader.LoadObject(System.Type,Newtonsoft.Json.Linq.JObject,System.Globalization.CultureInfo)">
            <summary>
            Loads an object from the specified JSON object.
            </summary>
            <param name="type">The type of object to load.</param>
            <param name="json">The JSON object that contains the object data.</param>
            <param name="culture">The culture information to use when parsing values.</param>
            <returns>The object that was loaded.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectLoader.LoadObject(System.Type,Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Loads an object from the specified JSON object.
            </summary>
            <param name="type">The type of object to load.</param>
            <param name="json">The JSON object that contains the object data.</param>
            <param name="serializer">The JSON serializer with which to deserialize the object data.</param>
            <returns>The object that was loaded.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectLoader.RegisterGlobalAlias(System.String,System.Type)">
            <summary>
            Registers a globally-available type alias.
            </summary>
            <param name="alias">The alias to assign to the type.</param>
            <param name="type">The type for which to create an alias.</param>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectLoader.RegisterGlobalAlias(System.String,System.String)">
            <summary>
            Registers a globally-available type alias.
            </summary>
            <param name="alias">The alias to assign to the type.</param>
            <param name="type">The assembly-qualified name of the type for which to create an alias.</param>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectLoader.UnregisterGlobalAlias(System.String)">
            <summary>
            Unregisters a globally-available type alias.
            </summary>
            <param name="alias">The alias to unregister.</param>
            <returns><see langword="true"/> if the alias was unregistered; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Ultraviolet.Core.Data.ObjectLoaderDataType">
            <summary>
            Represents the types of data supported by the object loader.
            </summary>
        </member>
        <member name="F:Ultraviolet.Core.Data.ObjectLoaderDataType.Detect">
            <summary>
            Attempt to auto-detect the type of data in the definition file.
            </summary>
        </member>
        <member name="F:Ultraviolet.Core.Data.ObjectLoaderDataType.Xml">
            <summary>
            The definition file contains XML data.
            </summary>
        </member>
        <member name="F:Ultraviolet.Core.Data.ObjectLoaderDataType.Json">
            <summary>
            The definition file contains JSON data.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.Data.ObjectLoaderMember">
            <summary>
            Represents a field or property which can be populated by the object loader's XML serializer.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectLoaderMember.#ctor(System.Object,System.Reflection.MemberInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Data.ObjectLoaderMember"/> class.
            </summary>
            <param name="obj">The object on which the member exists.</param>
            <param name="member">The member metadata.</param>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectLoaderMember.Find(System.Object,System.String,System.Boolean)">
            <summary>
            Attempts to find a member with the specified name on the specified object.
            </summary>
            <param name="obj">The object on which to find the member.</param>
            <param name="name">The name of the member to attempt to find.</param>
            <param name="ignoreMissingMembers">A value indicating whether to ignore members which do not exist on the type.</param>
            <returns>The member that was found.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectLoaderMember.SetValueFromData(System.Object,System.Xml.Linq.XElement)">
            <summary>
            Sets the member's value.
            </summary>
            <param name="value">The value to set.</param>
            <param name="element">The data element that defined the value.</param>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectLoaderMember.SetValue(System.Object,System.Object[])">
            <summary>
            Sets the member's value.
            </summary>
            <param name="value">The value to set.</param>
            <param name="index">Optional index values for indexed properties.</param>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectLoaderMember.GetValueFromData(System.Xml.Linq.XElement)">
            <summary>
            Gets the member's current value.
            </summary>
            <param name="element">The data element that defined the value.</param>
            <returns>The member's current value.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectLoaderMember.GetValue(System.Object[])">
            <summary>
            Gets the member's current value.
            </summary>
            <param name="index">Optional index values for indexed properties.</param>
            <returns>The member's current value.</returns>
        </member>
        <member name="P:Ultraviolet.Core.Data.ObjectLoaderMember.IsField">
            <summary>
            Gets a value indicating whether this member is a field.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Data.ObjectLoaderMember.IsProperty">
            <summary>
            Gets a value indicating whether this member is an indexer.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Data.ObjectLoaderMember.IsIndexer">
            <summary>
            Gets a value indicating whether this member is an indexer.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Data.ObjectLoaderMember.MemberType">
            <summary>
            Gets the member's return type.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectLoaderMember.GetIndexParameters(System.Xml.Linq.XElement)">
            <summary>
            Gets a set of index parameters from the specified data element.
            </summary>
            <param name="element">The data element from which to retrieve index parameters.</param>
            <returns>The index parameters that were retrieved.</returns>
        </member>
        <member name="T:Ultraviolet.Core.Data.ObjectLoaderState">
            <summary>
            Represents the state of a collection of objects that are in the process of being loaded by the Ultraviolet object loader.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectLoaderState.#ctor(System.Collections.Generic.Dictionary{System.String,System.String},System.Globalization.CultureInfo,Ultraviolet.Core.Data.ObjectLoaderMemberResolutionHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Data.ObjectLoaderState"/> class.
            </summary>
            <param name="globalAliases">The registry of global aliases.</param>
            <param name="culture">The culture information to use when parsing objects.</param>
            <param name="resolver">The custom member resolution handler, if any.</param>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectLoaderState.ParseClassAliases(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Type)">
            <summary>
            Parses the class aliases element.
            </summary>
            <param name="elements">The elements to parse.</param>
            <param name="defaultClass">The default class if no default is specified in the file.</param>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectLoaderState.ParseClassDefaults(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
            <summary>
            Parses the class defaults element.
            </summary>
            <param name="elements">The elements to parse.</param>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectLoaderState.ResolveClass(System.String)">
            <summary>
            Resolves a class name from the specified class name or alias.
            </summary>
            <param name="name">The class name or alias to resolve.</param>
            <returns>The class name that was resolved.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectLoaderState.GetDefaultValues(System.Type)">
            <summary>
            Gets the default values for the specified type.
            </summary>
            <param name="type">The type for which to retrieve default values.</param>
            <returns>The default values for the specified type, or <see langword="null"/> if there are no default values for that type.</returns>
        </member>
        <member name="P:Ultraviolet.Core.Data.ObjectLoaderState.Culture">
            <summary>
            Gets a value indicating which culture the object loader should use
            when parsing strings into objects.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Data.ObjectLoaderState.Resolver">
            <summary>
            Gets the custom member resolver, if any.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Data.ObjectLoaderState.IgnoreMissingMembers">
            <summary>
            Gets or sets a value indicating whether the object loader should ignore
            members which do not exist on the type being loaded.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.Data.ObjectLoaderXmlSerializer">
            <summary>
            Represents the custom XML serializer used by the <see cref="T:Ultraviolet.Core.Data.ObjectLoader"/> class.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectLoaderXmlSerializer.IsReservedKeyword(System.String)">
            <summary>
            Gets a value indicating whether the specified name is a reserved keyword used by the object loading system.
            </summary>
            <param name="name">The name to evaluate.</param>
            <returns><see langword="true"/> if the name is reserved; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectLoaderXmlSerializer.IsForbiddenKeyword(System.String)">
            <summary>
            Gets a value indicating whether the specified name is a forbidden keyword which cannot be used in an object
            definition under any circumstance.
            </summary>
            <param name="name">The name to evaluate.</param>
            <returns><see langword="true"/> if the name is forbidden; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectLoaderXmlSerializer.RegisterGlobalAlias(System.String,System.Type)">
            <summary>
            Registers a globally-available type alias.
            </summary>
            <param name="alias">The alias to assign to the type.</param>
            <param name="type">The type for which to create an alias.</param>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectLoaderXmlSerializer.RegisterGlobalAlias(System.String,System.String)">
            <summary>
            Registers a globally-available type alias.
            </summary>
            <param name="alias">The alias to assign to the type.</param>
            <param name="type">The assembly-qualified name of the type for which to create an alias.</param>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectLoaderXmlSerializer.UnregisterGlobalAlias(System.String)">
            <summary>
            Unregisters a globally-available type alias.
            </summary>
            <param name="alias">The alias to unregister.</param>
            <returns><see langword="true"/> if the alias was unregistered; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectLoaderXmlSerializer.LoadDefinitions``1(System.Xml.Linq.XElement,System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.String,System.Type)">
            <summary>
            Loads object definitions contained in the specified XML document.
            </summary>
            <typeparam name="T">The type of object to load.</typeparam>
            <param name="root">The root data element of the document that contains the object definitions to load.</param>
            <param name="aliases">The elements defining class aliases.</param>
            <param name="defaults">The elements defining class defaults.</param>
            <param name="name">The name of the type of object to load, which corresponds to the names of the elements in the XML file.</param>
            <param name="defaultClass">The name of the default class to apply to loaded objects.</param>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectLoaderXmlSerializer.LoadObject``1(System.Xml.Linq.XElement,System.Boolean)">
            <summary>
            Loads an object from the specified XML element.
            </summary>
            <typeparam name="T">The type of object to load.</typeparam>
            <param name="xml">The XML element that contains the object data.</param>
            <param name="ignoreMissingMembers">A value indicating whether the object loader 
            should ignore members which do not exist on the type.</param>
            <returns>The object that was loaded.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectLoaderXmlSerializer.LoadObject``1(Ultraviolet.Core.Data.ObjectLoaderMemberResolutionHandler,System.Xml.Linq.XElement,System.Boolean)">
            <summary>
            Loads an object from the specified XML element.
            </summary>
            <typeparam name="T">The type of object to load.</typeparam>
            <param name="resolver">A custom <see cref="T:Ultraviolet.Core.Data.ObjectLoaderMemberResolutionHandler"/> which allows external
            code to optionally resolve deserialized member values.</param>
            <param name="xml">The XML element that contains the object data.</param>
            <param name="ignoreMissingMembers">A value indicating whether the object loader 
            should ignore members which do not exist on the type.</param>
            <returns>The object that was loaded.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectLoaderXmlSerializer.LoadObject(System.Type,System.Xml.Linq.XElement,System.Boolean)">
            <summary>
            Loads an object from the specified XML element.
            </summary>
            <param name="type">The type of object to load.</param>
            <param name="xml">The XML element that contains the object data.</param>
            <param name="ignoreMissingMembers">A value indicating whether the object loader 
            should ignore members which do not exist on the type.</param>
            <returns>The object that was loaded.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectLoaderXmlSerializer.LoadObject(Ultraviolet.Core.Data.ObjectLoaderMemberResolutionHandler,System.Type,System.Xml.Linq.XElement,System.Boolean)">
            <summary>
            Loads an object from the specified XML element.
            </summary>
            <param name="resolver">A custom <see cref="T:Ultraviolet.Core.Data.ObjectLoaderMemberResolutionHandler"/> which allows external
            code to optionally resolve deserialized member values.</param>
            <param name="type">The type of object to load.</param>
            <param name="xml">The XML element that contains the object data.</param>
            <param name="ignoreMissingMembers">A value indicating whether the object loader 
            should ignore members which do not exist on the type.</param>
            <returns>The object that was loaded.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectLoaderXmlSerializer.LoadObject``1(System.Xml.Linq.XElement,System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            Loads an object from the specified XML element.
            </summary>
            <typeparam name="T">The type of object to load.</typeparam>
            <param name="xml">The XML element that contains the object data.</param>
            <param name="culture">The culture information to use when parsing values.</param>
            <param name="ignoreMissingMembers">A value indicating whether the object loader 
            should ignore members which do not exist on the type.</param>
            <returns>The object that was loaded.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectLoaderXmlSerializer.LoadObject``1(Ultraviolet.Core.Data.ObjectLoaderMemberResolutionHandler,System.Xml.Linq.XElement,System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            Loads an object from the specified XML element.
            </summary>
            <typeparam name="T">The type of object to load.</typeparam>
            <param name="resolver">A custom <see cref="T:Ultraviolet.Core.Data.ObjectLoaderMemberResolutionHandler"/> which allows external
            code to optionally resolve deserialized member values.</param>
            <param name="xml">The XML element that contains the object data.</param>
            <param name="culture">The culture information to use when parsing values.</param>
            <param name="ignoreMissingMembers">A value indicating whether the object loader 
            should ignore members which do not exist on the type.</param>
            <returns>The object that was loaded.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectLoaderXmlSerializer.LoadObject(System.Type,System.Xml.Linq.XElement,System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            Loads an object from the specified XML element.
            </summary>
            <param name="type">The type of object to load.</param>
            <param name="xml">The XML element that contains the object data.</param>
            <param name="culture">The culture information to use when parsing values.</param>
            <param name="ignoreMissingMembers">A value indicating whether the object loader 
            should ignore members which do not exist on the type.</param>
            <returns>The object that was loaded.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectLoaderXmlSerializer.LoadObject(Ultraviolet.Core.Data.ObjectLoaderMemberResolutionHandler,System.Type,System.Xml.Linq.XElement,System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            Loads an object from the specified XML element.
            </summary>
            <param name="resolver">A custom <see cref="T:Ultraviolet.Core.Data.ObjectLoaderMemberResolutionHandler"/> which allows external
            code to optionally resolve deserialized member values.</param>
            <param name="type">The type of object to load.</param>
            <param name="xml">The XML element that contains the object data.</param>
            <param name="culture">The culture information to use when parsing values.</param>
            <param name="ignoreMissingMembers">A value indicating whether the object loader 
            should ignore members which do not exist on the type.</param>
            <returns>The object that was loaded.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectLoaderXmlSerializer.CreateObjectFromRootElement(Ultraviolet.Core.Data.ObjectLoaderState,System.Type,System.Xml.Linq.XElement)">
            <summary>
            Creates an object from the specified root element.
            </summary>
            <param name="state">The current loader state.</param>
            <param name="type">The type of object to create.</param>
            <param name="element">The element from which to create an object.</param>
            <returns>The object that was created.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectLoaderXmlSerializer.CreateObject(Ultraviolet.Core.Data.ObjectLoaderState,System.Type,System.Object[],System.Xml.Linq.XElement[])">
            <summary>
            Creates an object from the specified root element.
            </summary>
            <param name="state">The loader state.</param>
            <param name="type">The type of object to create.</param>
            <param name="argsBase">The base set of arguments for this object's constructor.</param>
            <param name="argsSpecified">The specified set of arguments for this object's constructor.</param>
            <returns>The object that was created.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectLoaderXmlSerializer.GetSpecifiedConstructorArguments(System.Xml.Linq.XElement)">
            <summary>
            Gets the specified constructor arguments for an element.
            </summary>
            <param name="element">The element to evaluate.</param>
            <returns>The specified constructor arguments for the element.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectLoaderXmlSerializer.GetTypeFromElement(Ultraviolet.Core.Data.ObjectLoaderState,System.Type,System.Xml.Linq.XElement)">
            <summary>
            Gets the type defined by the specified element.
            </summary>
            <param name="state">The loader state.</param>
            <param name="baseType">The base type.</param>
            <param name="element">The element to evaluate.</param>
            <returns>The type defined by the specified element.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectLoaderXmlSerializer.PopulateObject(Ultraviolet.Core.Data.ObjectLoaderState,System.Object,System.Xml.Linq.XElement)">
            <summary>
            Populates an object with values.
            </summary>
            <param name="state">The loader state.</param>
            <param name="objectInstance">The object instance.</param>
            <param name="objectElement">The object element.</param>
            <returns>The object instance.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectLoaderXmlSerializer.PopulateObjectFromDefaults(Ultraviolet.Core.Data.ObjectLoaderState,System.Object,System.Xml.Linq.XElement)">
            <summary>
            Populates an object from the currently loaded default values.
            </summary>
            <param name="state">The loader state.</param>
            <param name="objectInstance">The object instance.</param>
            <param name="objectElement">The object element.</param>
            <returns>The object instance.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectLoaderXmlSerializer.PopulateObjectFromAttributes(Ultraviolet.Core.Data.ObjectLoaderState,System.Object,System.Xml.Linq.XElement)">
            <summary>
            Populates an object from the attributes defined on the specified data element.
            </summary>
            <param name="state">The loader state.</param>
            <param name="objectInstance">The object instance.</param>
            <param name="objectElement">The object element.</param>
            <returns>The object instance.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectLoaderXmlSerializer.PopulateObjectFromElements(Ultraviolet.Core.Data.ObjectLoaderState,System.Object,System.Xml.Linq.XElement,System.Func{System.Xml.Linq.XElement,System.Boolean})">
            <summary>
            Populates an object from the elements descending from the specified data element.
            </summary>
            <param name="state">The loader state.</param>
            <param name="objectInstance">The object instance.</param>
            <param name="objectElement">The object element.</param>
            <param name="filter">A filter which determines which elements are used to populate the object.</param>
            <returns>The object instance.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectLoaderXmlSerializer.PopulateMemberFromElement(Ultraviolet.Core.Data.ObjectLoaderState,System.Object,System.Xml.Linq.XElement,System.Boolean)">
            <summary>
            Populates an object member from the specified data element.
            </summary>
            <param name="state">The loader state.</param>
            <param name="objectInstance">The object instance.</param>
            <param name="memberElement">The element that defines the member.</param>
            <param name="skipReservedKeywords">A value indicating whether to skip elements with the same names as reserved keywords.</param>
            <returns>The object instance.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectLoaderXmlSerializer.IsListType(System.Type)">
            <summary>
            Gets a value indicating whether the specified type is a list.
            </summary>
            <param name="type">The type to evaluate.</param>
            <returns><see langword="true"/> if the specified type is a list; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectLoaderXmlSerializer.IsEnumerableType(System.Type)">
            <summary>
            Gets a value indicating whether the specified type is an enumerable.
            </summary>
            <param name="type">The type to evaluate.</param>
            <returns><see langword="true"/> if the specified type is an enumerable; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectLoaderXmlSerializer.GetListImplementationType(System.Type)">
            <summary>
            Gets the implementation type for the specified list type.
            </summary>
            <param name="listType">The list type to evaluate.</param>
            <returns>The implementation type for the specified list type.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectLoaderXmlSerializer.GetListElementType(System.String,System.Type)">
            <summary>
            Gets the element type for the specified list type.
            </summary>
            <param name="name">The name of the element that defines the list.</param>
            <param name="listType">The list type to evaluate.</param>
            <returns>The element type for the specified list type.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectLoaderXmlSerializer.GetEnumerableElementType(System.String,System.Type)">
            <summary>
            Gets the element type for the specified enumerable type.
            </summary>
            <param name="name">The name of the element that defines the enumerable.</param>
            <param name="enumerableType">The enumerable type to evaluate.</param>
            <returns>The element type for the specified enumerable type.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectLoaderXmlSerializer.PopulateArray(Ultraviolet.Core.Data.ObjectLoaderState,Ultraviolet.Core.Data.ObjectLoaderMember,System.Xml.Linq.XElement)">
            <summary>
            Populates an array value.
            </summary>
            <param name="state">The loader state.</param>
            <param name="member">The member to populate.</param>
            <param name="element">The element that defines the member's value.</param>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectLoaderXmlSerializer.PopulateList(Ultraviolet.Core.Data.ObjectLoaderState,Ultraviolet.Core.Data.ObjectLoaderMember,System.Xml.Linq.XElement)">
            <summary>
            Populates a list value.
            </summary>
            <param name="state">The loader state.</param>
            <param name="member">The member to populate.</param>
            <param name="element">The element that defines the member's value.</param>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectLoaderXmlSerializer.PopulateEnumerable(Ultraviolet.Core.Data.ObjectLoaderState,Ultraviolet.Core.Data.ObjectLoaderMember,System.Xml.Linq.XElement)">
            <summary>
            Populates an enumerable value.
            </summary>
            <param name="state">The loader state.</param>
            <param name="member">The member to populate.</param>
            <param name="element">The element that defines the member's value.</param>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectLoaderXmlSerializer.PopulateListItems(Ultraviolet.Core.Data.ObjectLoaderState,System.Object,System.Type,System.Xml.Linq.XElement)">
            <summary>
            Populates a list with items.
            </summary>
            <param name="state">The loader state.</param>
            <param name="list">The list to populate.</param>
            <param name="listElemType">The type of elements in the list.</param>
            <param name="element">The element that defines the list.</param>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectLoaderXmlSerializer.ParseValue(System.String,System.Type,System.IFormatProvider)">
            <summary>
            Attempts to parse a string into a simple value.
            </summary>
            <param name="str">The string to parse.</param>
            <param name="type">The type into which to parse the string.</param>
            <param name="provider">An object that provides culture-specific formatting information.</param>
            <returns>The value that was parsed.</returns>
        </member>
        <member name="T:Ultraviolet.Core.Data.CustomObjectResolver">
            <summary>
            Represents a method which resolves a string value to an object.
            </summary>
            <param name="value">The string value to resolve.</param>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <returns>The resolved object.</returns>
        </member>
        <member name="T:Ultraviolet.Core.Data.ObjectResolver">
            <summary>
            Contains methods for resolving CLR objects out of XML data.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectResolver.#cctor">
            <summary>
            Initializes the <see cref="T:Ultraviolet.Core.Data.ObjectResolver"/> type.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectResolver.RegisterValueResolver``1(Ultraviolet.Core.Data.CustomObjectResolver)">
            <summary>
            Registers a custom value resolver with the object resolution system.
            </summary>
            <typeparam name="T">The type for which to register a value resolver.</typeparam>
            <param name="resolver">The custom value resolver to register.</param>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectResolver.FromString(System.String,System.Type)">
            <summary>
            Creates an object from the specified value string.
            </summary>
            <param name="value">The value string from which to create the object.</param>
            <param name="type">The type of object to create.</param>
            <returns>The object that was created.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectResolver.FromString(System.String,System.Type,System.Boolean)">
            <summary>
            Creates an object from the specified value string.
            </summary>
            <param name="value">The value string from which to create the object.</param>
            <param name="type">The type of object to create.</param>
            <param name="ignoreCase">A value indicating whether to ignore casing whenever relevant (particularly, when converting enum values).</param>
            <returns>The object that was created.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectResolver.FromString(System.String,System.Type,System.IFormatProvider)">
            <summary>
            Creates an object from the specified value string.
            </summary>
            <param name="value">The value string from which to create the object.</param>
            <param name="type">The type of object to create.</param>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <returns>The object that was created.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectResolver.FromString(System.String,System.Type,System.IFormatProvider,System.Boolean)">
            <summary>
            Creates an object from the specified value string.
            </summary>
            <param name="value">The value string from which to create the object.</param>
            <param name="type">The type of object to create.</param>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <param name="ignoreCase">A value indicating whether to ignore casing whenever relevant (particularly, when converting enum values).</param>
            <returns>The object that was created.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectResolver.ParseEnum(System.Type,System.String,System.Boolean)">
            <summary>
            Parses a string into a set of enumeration values.
            </summary>
            <param name="type">The type of enumeration to parse.</param>
            <param name="value">The string to parse into a set of values.</param>
            <param name="ignoreCase">A value indicating whether to ignore case.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectResolver.AttemptCultureAwareParse(System.String,System.Type,System.IFormatProvider,System.Object@)">
            <summary>
            Attempts to parse the specified string into the specified type using a culture-aware version of
            the Parse() method, if one exists for the type.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectResolver.AttemptCultureIgnorantParse(System.String,System.Type,System.Object@)">
            <summary>
            Attempts to parse the specified string into the specified type using the culture-ignorant version of
            the Parse() method, if one exists for the type.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectResolver.IsLazilyLoadedDataObjectType(System.Type,System.Type@)">
            <summary>
            Gets a value indicating whether the specified type is a lazily-loaded Ultraviolet data object.
            </summary>
            <param name="type">The type to evaluate.</param>
            <param name="dataObjectType">The type of data object to load.</param>
            <returns><see langword="true"/> if the specified type is a lazily-loaded Ultraviolet data object; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectResolver.ResolveLazilyLoadedDataObject``1(System.String)">
            <summary>
            Resolves a value to an instance of <see cref="T:System.Lazy`1"/>, where the lazily-loaded
            object is an instance of <see cref="T:Ultraviolet.Core.Data.DataObject"/>.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.Data.ObjectResolverJsonConverter">
            <summary>
            Represents a JSON converter which uses the <see cref="T:Ultraviolet.Core.Data.ObjectResolver"/> class
            to parse strings into objects.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectResolverJsonConverter.CanConvert(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectResolverJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectResolverJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.Core.Data.ObjectResolverJsonConverter.CanRead">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.Core.Data.ObjectResolverJsonConverter.CanWrite">
            <inheritdoc/>
        </member>
        <member name="T:Ultraviolet.Core.Data.ObjectResolverTypeConverter`1">
            <summary>
            Represents a type converter which makes use of the Ultraviolet object resolver.
            </summary>
            <typeparam name="T">The type of object to convert.</typeparam>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectResolverTypeConverter`1.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
            <returns><see langword="true"/> if this converter can perform the conversion; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.ObjectResolverTypeConverter`1.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>An <see cref="T:System.Object"/> that represents the converted value.</returns>
        </member>
        <member name="T:Ultraviolet.Core.Data.ResolvedDataObjectReference">
            <summary>
            Represents a resolved reference to an Ultraviolet data object.
            </summary>
            <remarks>A resolved reference is one in which the string value of the reference has been associated with
            the globally-unique identifier of the referenced object.</remarks>
        </member>
        <member name="M:Ultraviolet.Core.Data.ResolvedDataObjectReference.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Data.ResolvedDataObjectReference"/> structure.
            </summary>
            <param name="value">The data object identifier's value.</param>
        </member>
        <member name="M:Ultraviolet.Core.Data.ResolvedDataObjectReference.#ctor(System.Guid,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Data.ResolvedDataObjectReference"/> structure.
            </summary>
            <param name="value">The data object identifier's value.</param>
            <param name="source">A string identifying the source of the identifier, used for debugging.</param>
        </member>
        <member name="M:Ultraviolet.Core.Data.ResolvedDataObjectReference.op_Explicit(Ultraviolet.Core.Data.ResolvedDataObjectReference)~System.Guid">
            <summary>
            Explicitly converts an <see cref="T:Ultraviolet.Core.Data.ResolvedDataObjectReference"/> structure to its underlying globally-unique value.
            </summary>
            <param name="reference">The <see cref="T:Ultraviolet.Core.Data.ResolvedDataObjectReference"/> to convert.</param>
            <returns>The converted <see cref="T:System.Guid"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.ResolvedDataObjectReference.op_Explicit(Ultraviolet.Core.Data.ResolvedDataObjectReference)~System.Nullable{System.Guid}">
            <summary>
            Explicitly converts an <see cref="T:Ultraviolet.Core.Data.ResolvedDataObjectReference"/> structure to its underlying globally-unique value.
            </summary>
            <param name="reference">The <see cref="T:Ultraviolet.Core.Data.ResolvedDataObjectReference"/> to convert.</param>
            <returns>The converted <see cref="T:System.Nullable`1"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.ResolvedDataObjectReference.op_Explicit(System.Guid)~Ultraviolet.Core.Data.ResolvedDataObjectReference">
            <summary>
            Explicitly converts an integer to an <see cref="T:Ultraviolet.Core.Data.ResolvedDataObjectReference"/> structure.
            </summary>
            <param name="id">The <see cref="T:System.Guid"/> to convert.</param>
            <returns>The converted <see cref="T:Ultraviolet.Core.Data.ResolvedDataObjectReference"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.ResolvedDataObjectReference.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Data.ResolvedDataObjectReference.GetObjectRegistry">
            <summary>
            Gets the name of the registry that contains the resolved object.
            </summary>
            <returns>The name of the registry that contains the resolved object.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.ResolvedDataObjectReference.GetObjectName">
            <summary>
            Gets the name of the resolved data object.
            </summary>
            <returns>The name of the resolved data object.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.ResolvedDataObjectReference.CompareTo(Ultraviolet.Core.Data.ResolvedDataObjectReference)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that 
            indicates whether the current instance precedes, follows, or occurs in the same position in 
            the sort order as the other object.
            </summary>
            <param name="other">An object to compare with this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared.</returns>
        </member>
        <member name="P:Ultraviolet.Core.Data.ResolvedDataObjectReference.Invalid">
            <summary>
            Gets an invalid data object reference.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Data.ResolvedDataObjectReference.IsValid">
            <summary>
            Gets a value indicating whether this is a valid object reference.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Data.ResolvedDataObjectReference.Value">
            <summary>
            The data object identifier's underlying value.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Data.ResolvedDataObjectReference.Source">
            <summary>
            A string identifying the source of the identifier, used for debugging.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Data.ResolvedDataObjectReference.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Data.ResolvedDataObjectReference.op_Equality(Ultraviolet.Core.Data.ResolvedDataObjectReference,Ultraviolet.Core.Data.ResolvedDataObjectReference)">
            <summary>
            Compares two objects to determine whether they are equal.
            </summary>
            <param name="v1">The first value to compare.</param>
            <param name="v2">The second value to compare.</param>
            <returns><see langword="true"/> if the two values are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.ResolvedDataObjectReference.op_Inequality(Ultraviolet.Core.Data.ResolvedDataObjectReference,Ultraviolet.Core.Data.ResolvedDataObjectReference)">
            <summary>
            Compares two objects to determine whether they are unequal.
            </summary>
            <param name="v1">The first value to compare.</param>
            <param name="v2">The second value to compare.</param>
            <returns><see langword="true"/> if the two values are unequal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Data.ResolvedDataObjectReference.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Data.ResolvedDataObjectReference.Equals(Ultraviolet.Core.Data.ResolvedDataObjectReference)">
            <inheritdoc/>
        </member>
        <member name="T:Ultraviolet.Core.FunctorComparer`1">
            <summary>
            Represents a comparer which uses a provided function to compare two objects.
            </summary>
            <typeparam name="T">The type of object being compared.</typeparam>
        </member>
        <member name="M:Ultraviolet.Core.FunctorComparer`1.#ctor(System.Func{`0,`0,System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.FunctorComparer`1"/> class.
            </summary>
            <param name="comparer">The function used to compare objects.</param>
        </member>
        <member name="M:Ultraviolet.Core.FunctorComparer`1.Compare(`0,`0)">
            <summary>
            Compares two objects.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>A value indicating the relative order of the specified objects.</returns>
        </member>
        <member name="T:Ultraviolet.Core.IO.BinaryReaderExtensions">
            <summary>
            Contains extension methods for the <see cref="T:System.IO.BinaryReader"/> class.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.IO.BinaryReaderExtensions.ReadList``1(System.IO.BinaryReader,System.Collections.Generic.IList{``0},System.Func{System.IO.BinaryReader,System.Func{``0}})">
            <summary>
            Reads a list from the stream.
            </summary>
            <typeparam name="T">The type of items in the list being read.</typeparam>
            <param name="reader">The <see cref="T:System.IO.BinaryReader"/> with which to read the list.</param>
            <param name="list">The list to write.</param>
            <param name="method">A function which selects the method with which to read the list's items.</param>
        </member>
        <member name="M:Ultraviolet.Core.IO.BinaryReaderExtensions.ReadNullableInt16(System.IO.BinaryReader)">
            <summary>
            Reads a <see langword="null"/>able 16-bit integer from the stream.
            </summary>
            <param name="reader">The <see cref="T:System.IO.BinaryReader"/> from which to read the value.</param>
            <returns>The value that was read.</returns>
        </member>
        <member name="M:Ultraviolet.Core.IO.BinaryReaderExtensions.ReadNullableInt32(System.IO.BinaryReader)">
            <summary>
            Reads a <see langword="null"/>able 32-bit integer from the stream.
            </summary>
            <param name="reader">The <see cref="T:System.IO.BinaryReader"/> from which to read the value.</param>
            <returns>The value that was read.</returns>
        </member>
        <member name="M:Ultraviolet.Core.IO.BinaryReaderExtensions.ReadNullableInt64(System.IO.BinaryReader)">
            <summary>
            Reads a <see langword="null"/>able 64-bit integer from the stream.
            </summary>
            <param name="reader">The <see cref="T:System.IO.BinaryReader"/> from which to read the value.</param>
            <returns>The value that was read.</returns>
        </member>
        <member name="M:Ultraviolet.Core.IO.BinaryReaderExtensions.ReadNullableUInt16(System.IO.BinaryReader)">
            <summary>
            Reads a <see langword="null"/>able unsigned 16-bit integer from the stream.
            </summary>
            <param name="reader">The <see cref="T:System.IO.BinaryReader"/> from which to read the value.</param>
            <returns>The value that was read.</returns>
        </member>
        <member name="M:Ultraviolet.Core.IO.BinaryReaderExtensions.ReadNullableUInt32(System.IO.BinaryReader)">
            <summary>
            Reads a <see langword="null"/>able unsigned 32-bit integer from the stream.
            </summary>
            <param name="reader">The <see cref="T:System.IO.BinaryReader"/> from which to read the value.</param>
            <returns>The value that was read.</returns>
        </member>
        <member name="M:Ultraviolet.Core.IO.BinaryReaderExtensions.ReadNullableUInt64(System.IO.BinaryReader)">
            <summary>
            Reads a <see langword="null"/>able unsigned 64-bit integer from the stream.
            </summary>
            <param name="reader">The <see cref="T:System.IO.BinaryReader"/> from which to read the value.</param>
            <returns>The value that was read.</returns>
        </member>
        <member name="M:Ultraviolet.Core.IO.BinaryReaderExtensions.ReadNullableSingle(System.IO.BinaryReader)">
            <summary>
            Reads a <see langword="null"/>able single-precision floating point value from the stream.
            </summary>
            <param name="reader">The <see cref="T:System.IO.BinaryReader"/> from which to read the value.</param>
            <returns>The value that was read.</returns>
        </member>
        <member name="M:Ultraviolet.Core.IO.BinaryReaderExtensions.ReadNullableDouble(System.IO.BinaryReader)">
            <summary>
            Reads a <see langword="null"/>able double-precision floating point value from the stream.
            </summary>
            <param name="reader">The <see cref="T:System.IO.BinaryReader"/> from which to read the value.</param>
            <returns>The value that was read.</returns>
        </member>
        <member name="M:Ultraviolet.Core.IO.BinaryReaderExtensions.ReadGuid(System.IO.BinaryReader)">
            <summary>
            Reads a <see cref="T:System.Guid"/> from the stream.
            </summary>
            <param name="reader">The <see cref="T:System.IO.BinaryReader"/> from which to read the <see cref="T:System.Guid"/>.</param>
            <returns>The <see cref="T:System.Guid"/> that was read from the stream.</returns>
        </member>
        <member name="M:Ultraviolet.Core.IO.BinaryReaderExtensions.ReadNullableGuid(System.IO.BinaryReader)">
            <summary>
            Reads a <see langword="null"/>able GUID from the stream.
            </summary>
            <param name="reader">The <see cref="T:System.IO.BinaryReader"/> from which to read the GUID.</param>
            <returns>The GUID that was read from the stream.</returns>
        </member>
        <member name="M:Ultraviolet.Core.IO.BinaryReaderExtensions.ReadResolvedDataObjectReference(System.IO.BinaryReader)">
            <summary>
            Reads a resolved reference to a Ultraviolet data object from the stream.
            </summary>
            <param name="reader">The <see cref="T:System.IO.BinaryReader"/> from which to read the data object reference.</param>
            <returns>The <see cref="T:Ultraviolet.Core.Data.ResolvedDataObjectReference"/> that was read from the stream.</returns>
        </member>
        <member name="M:Ultraviolet.Core.IO.BinaryReaderExtensions.ReadNullableResolvedDataObjectReference(System.IO.BinaryReader)">
            <summary>
            Reads a <see langword="null"/>able resolved reference to an Ultraviolet data object from the stream.
            </summary>
            <param name="reader">The <see cref="T:System.IO.BinaryReader"/> from which to read the data object reference.</param>
            <returns>The <see cref="T:System.Nullable`1"/> that was read from the stream.</returns>
        </member>
        <member name="T:Ultraviolet.Core.IO.BinaryWriterExtensions">
            <summary>
            Contains extension methods for the <see cref="T:System.IO.BinaryWriter"/> class.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.IO.BinaryWriterExtensions.Write``1(System.IO.BinaryWriter,System.Collections.Generic.IList{``0},System.Func{System.IO.BinaryWriter,System.Action{``0}})">
            <summary>
            Writes a list to the stream.
            </summary>
            <typeparam name="T">The type of items in the list being written.</typeparam>
            <param name="writer">The <see cref="T:System.IO.BinaryWriter"/> with which to write the list.</param>
            <param name="list">The list to write.</param>
            <param name="method">A function which selects the method with which to write the list's items.</param>
        </member>
        <member name="M:Ultraviolet.Core.IO.BinaryWriterExtensions.Write(System.IO.BinaryWriter,System.Nullable{System.Int16})">
            <summary>
            Writes a <see langword="null"/>able 16-bit integer to the stream.
            </summary>
            <param name="writer">The <see cref="T:System.IO.BinaryWriter"/> with which to write the value.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Ultraviolet.Core.IO.BinaryWriterExtensions.Write(System.IO.BinaryWriter,System.Nullable{System.Int32})">
            <summary>
            Writes a <see langword="null"/>able 32-bit integer to the stream.
            </summary>
            <param name="writer">The <see cref="T:System.IO.BinaryWriter"/> with which to write the value.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Ultraviolet.Core.IO.BinaryWriterExtensions.Write(System.IO.BinaryWriter,System.Nullable{System.Int64})">
            <summary>
            Writes a <see langword="null"/>able 64-bit integer to the stream.
            </summary>
            <param name="writer">The <see cref="T:System.IO.BinaryWriter"/> with which to write the value.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Ultraviolet.Core.IO.BinaryWriterExtensions.Write(System.IO.BinaryWriter,System.Nullable{System.UInt16})">
            <summary>
            Writes a <see langword="null"/>able unsigned 16-bit integer to the stream.
            </summary>
            <param name="writer">The <see cref="T:System.IO.BinaryWriter"/> with which to write the value.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Ultraviolet.Core.IO.BinaryWriterExtensions.Write(System.IO.BinaryWriter,System.Nullable{System.UInt32})">
            <summary>
            Writes a <see langword="null"/>able unsigned 32-bit integer to the stream.
            </summary>
            <param name="writer">The <see cref="T:System.IO.BinaryWriter"/> with which to write the value.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Ultraviolet.Core.IO.BinaryWriterExtensions.Write(System.IO.BinaryWriter,System.Nullable{System.UInt64})">
            <summary>
            Writes a <see langword="null"/>able unsigned 64-bit integer to the stream.
            </summary>
            <param name="writer">The <see cref="T:System.IO.BinaryWriter"/> with which to write the value.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Ultraviolet.Core.IO.BinaryWriterExtensions.Write(System.IO.BinaryWriter,System.Nullable{System.Single})">
            <summary>
            Writes a <see langword="null"/>able single-precision floating point value to the stream.
            </summary>
            <param name="writer">The <see cref="T:System.IO.BinaryWriter"/> with which to write the value.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Ultraviolet.Core.IO.BinaryWriterExtensions.Write(System.IO.BinaryWriter,System.Nullable{System.Double})">
            <summary>
            Writes a <see langword="null"/>able double-precision floating point value to the stream.
            </summary>
            <param name="writer">The <see cref="T:System.IO.BinaryWriter"/> with which to write the value.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Ultraviolet.Core.IO.BinaryWriterExtensions.Write(System.IO.BinaryWriter,System.Guid)">
            <summary>
            Writes a <see cref="T:System.Guid"/> to the stream.
            </summary>
            <param name="writer">The <see cref="T:System.IO.BinaryWriter"/> with which to write the <see cref="T:System.Guid"/>.</param>
            <param name="guid">The <see cref="T:System.Guid"/> to write to the stream.</param>
        </member>
        <member name="M:Ultraviolet.Core.IO.BinaryWriterExtensions.Write(System.IO.BinaryWriter,System.Nullable{System.Guid})">
            <summary>
            Writes a <see cref="T:System.Guid"/> to the stream.
            </summary>
            <param name="writer">The <see cref="T:System.IO.BinaryWriter"/> with which to write the <see cref="T:System.Guid"/>.</param>
            <param name="guid">The <see cref="T:System.Guid"/> to write to the stream.</param>
        </member>
        <member name="M:Ultraviolet.Core.IO.BinaryWriterExtensions.Write(System.IO.BinaryWriter,Ultraviolet.Core.Data.ResolvedDataObjectReference)">
            <summary>
            Writes a resolved reference to an Ultraviolet data object to the stream.
            </summary>
            <param name="writer">The <see cref="T:System.IO.BinaryWriter"/> with which to write the data object reference.</param>
            <param name="reference">The <see cref="T:Ultraviolet.Core.Data.ResolvedDataObjectReference"/> to write to the stream.</param>
        </member>
        <member name="M:Ultraviolet.Core.IO.BinaryWriterExtensions.Write(System.IO.BinaryWriter,System.Nullable{Ultraviolet.Core.Data.ResolvedDataObjectReference})">
            <summary>
            Writes a <see langword="null"/>able resolved reference to an Ultraviolet data object to the stream.
            </summary>
            <param name="writer">The <see cref="T:System.IO.BinaryWriter"/> with which to write the data object reference.</param>
            <param name="reference">The <see cref="T:System.Nullable`1"/> to write to the stream.</param>
        </member>
        <member name="T:Ultraviolet.Core.IO.NamespaceDoc">
            <summary>
            The <see cref="N:Ultraviolet.Core.IO"/> namespace contains classes that expand upon the Base Class Library's
            basic input/output functionality, and which assist with the serialization and deserialization 
            of the Ultraviolet core library's custom types. 
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.MaskedUInt32">
            <summary>
            Represents a masked 32-bit integer.
            </summary>
            <remarks>Masking allows an integer to be stored, on average, with fewer than 4 bytes of memory. To do this, the integer value
            is treated as a sequence of bytes, and any bytes which have a value of zero are omitted from the output stream. Masking requires
            the integer value to be prepended with an additional byte of data, the masking byte, which tracks which integer bytes have non-zero
            values; this means that the size of a masked 32-bit integer is 2 bytes in the best case and 5 bytes in the worst case.</remarks>
        </member>
        <member name="M:Ultraviolet.Core.MaskedUInt32.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.MaskedUInt32"/> structure.
            </summary>
            <param name="value">The underlying value.</param>
        </member>
        <member name="M:Ultraviolet.Core.MaskedUInt32.op_Implicit(Ultraviolet.Core.MaskedUInt32)~System.UInt32">
            <summary>
            Implicitly converts the masked integer to a 32-bit unsigned integer.
            </summary>
            <param name="masked">The masked integer to convert.</param>
            <returns>The converted integer.</returns>
        </member>
        <member name="M:Ultraviolet.Core.MaskedUInt32.op_Implicit(System.UInt32)~Ultraviolet.Core.MaskedUInt32">
            <summary>
            Implicitly converts a 32-bit unsigned integer to a masked integer.
            </summary>
            <param name="value">The integer to convert.</param>
            <returns>The converted masked integer.</returns>
        </member>
        <member name="M:Ultraviolet.Core.MaskedUInt32.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.MaskedUInt32.WithByte(System.Int32,System.Byte)">
            <summary>
            Creates a copy of this integer with the specified byte set to the specified value.
            </summary>
            <param name="byteIndex">The index of the byte to set.</param>
            <param name="byteValue">The value to set in the specified byte.</param>
            <returns>A new <see cref="T:Ultraviolet.Core.MaskedUInt32"/> with the specified byte set to the specified value.</returns>
        </member>
        <member name="M:Ultraviolet.Core.MaskedUInt32.GetMask">
            <summary>
            Gets the mask for this value.
            </summary>
            <returns>The mask for this value.</returns>
        </member>
        <member name="M:Ultraviolet.Core.MaskedUInt32.GetByte(System.Int32)">
            <summary>
            Gets the value of the byte with the specified index.
            </summary>
            <param name="ix">The index of the byte to retrieve.</param>
            <returns>The value of the byte with the specified index.</returns>
        </member>
        <member name="M:Ultraviolet.Core.MaskedUInt32.GetSizeInBytes">
            <summary>
            Gets the size of the integer in bytes.
            </summary>
            <returns>The size of the integer in bytes.</returns>
        </member>
        <member name="F:Ultraviolet.Core.MaskedUInt32.Value">
            <summary>
            Gets the underlying integer value.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.MaskedUInt32.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.MaskedUInt32.op_Equality(Ultraviolet.Core.MaskedUInt32,Ultraviolet.Core.MaskedUInt32)">
            <summary>
            Compares two objects to determine whether they are equal.
            </summary>
            <param name="v1">The first value to compare.</param>
            <param name="v2">The second value to compare.</param>
            <returns><see langword="true"/> if the two values are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.MaskedUInt32.op_Equality(Ultraviolet.Core.MaskedUInt32,System.UInt32)">
            <summary>
            Compares two objects to determine whether they are equal.
            </summary>
            <param name="v1">The first value to compare.</param>
            <param name="v2">The second value to compare.</param>
            <returns><see langword="true"/> if the two values are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.MaskedUInt32.op_Equality(System.UInt32,Ultraviolet.Core.MaskedUInt32)">
            <summary>
            Compares two objects to determine whether they are equal.
            </summary>
            <param name="v1">The first value to compare.</param>
            <param name="v2">The second value to compare.</param>
            <returns><see langword="true"/> if the two values are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.MaskedUInt32.op_Inequality(Ultraviolet.Core.MaskedUInt32,Ultraviolet.Core.MaskedUInt32)">
            <summary>
            Compares two objects to determine whether they are unequal.
            </summary>
            <param name="v1">The first value to compare.</param>
            <param name="v2">The second value to compare.</param>
            <returns><see langword="true"/> if the two values are unequal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.MaskedUInt32.op_Inequality(System.UInt32,Ultraviolet.Core.MaskedUInt32)">
            <summary>
            Compares two objects to determine whether they are equal.
            </summary>
            <param name="v1">The first value to compare.</param>
            <param name="v2">The second value to compare.</param>
            <returns><see langword="true"/> if the two values are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.MaskedUInt32.op_Inequality(Ultraviolet.Core.MaskedUInt32,System.UInt32)">
            <summary>
            Compares two objects to determine whether they are unequal.
            </summary>
            <param name="v1">The first value to compare.</param>
            <param name="v2">The second value to compare.</param>
            <returns><see langword="true"/> if the two values are unequal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.MaskedUInt32.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.MaskedUInt32.Equals(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.MaskedUInt32.Equals(Ultraviolet.Core.MaskedUInt32)">
            <inheritdoc/>
        </member>
        <member name="T:Ultraviolet.Core.MaskedUInt64">
            <summary>
            Represents a masked 64-bit integer.
            </summary>
            <remarks>Masking allows an integer to be stored, on average, with fewer than 8 bytes of memory. To do this, the integer value
            is treated as a sequence of bytes, and any bytes which have a value of zero are omitted from the output stream. Masking requires
            the integer value to be prepended with an additional byte of data, the masking byte, which tracks which integer bytes have non-zero
            values; this means that the size of a masked 64-bit integer is 2 bytes in the best case and 9 bytes in the worst case.</remarks>
        </member>
        <member name="M:Ultraviolet.Core.MaskedUInt64.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the MaskedUInt64 structure.
            </summary>
            <param name="value">The underlying value.</param>
        </member>
        <member name="M:Ultraviolet.Core.MaskedUInt64.op_Implicit(Ultraviolet.Core.MaskedUInt64)~System.UInt64">
            <summary>
            Implicitly converts the masked integer to a 32-bit unsigned integer.
            </summary>
            <param name="masked">The masked integer to convert.</param>
            <returns>The converted integer.</returns>
        </member>
        <member name="M:Ultraviolet.Core.MaskedUInt64.op_Implicit(System.UInt64)~Ultraviolet.Core.MaskedUInt64">
            <summary>
            Implicitly converts a 32-bit unsigned integer to a masked integer.
            </summary>
            <param name="value">The integer to convert.</param>
            <returns>The converted masked integer.</returns>
        </member>
        <member name="M:Ultraviolet.Core.MaskedUInt64.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.MaskedUInt64.WithByte(System.Int32,System.Byte)">
            <summary>
            Creates a copy of this integer with the specified byte set to the specified value.
            </summary>
            <param name="byteIndex">The index of the byte to set.</param>
            <param name="byteValue">The value to set in the specified byte.</param>
            <returns>A new <see cref="T:Ultraviolet.Core.MaskedUInt64"/> with the specified byte set to the specified value.</returns>
        </member>
        <member name="M:Ultraviolet.Core.MaskedUInt64.GetMask">
            <summary>
            Gets the mask for this value.
            </summary>
            <returns>The mask for this value.</returns>
        </member>
        <member name="M:Ultraviolet.Core.MaskedUInt64.GetByte(System.Int32)">
            <summary>
            Gets the value of the byte with the specified index.
            </summary>
            <param name="ix">The index of the byte to retrieve.</param>
            <returns>The value of the byte with the specified index.</returns>
        </member>
        <member name="M:Ultraviolet.Core.MaskedUInt64.GetSizeInBytes">
            <summary>
            Gets the size of the integer in bytes.
            </summary>
            <returns>The size of the integer in bytes.</returns>
        </member>
        <member name="F:Ultraviolet.Core.MaskedUInt64.Value">
            <summary>
            Gets the underlying integer value.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.MaskedUInt64.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.MaskedUInt64.op_Equality(Ultraviolet.Core.MaskedUInt64,Ultraviolet.Core.MaskedUInt64)">
            <summary>
            Compares two objects to determine whether they are equal.
            </summary>
            <param name="v1">The first value to compare.</param>
            <param name="v2">The second value to compare.</param>
            <returns><see langword="true"/> if the two values are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.MaskedUInt64.op_Equality(Ultraviolet.Core.MaskedUInt64,System.UInt64)">
            <summary>
            Compares two objects to determine whether they are equal.
            </summary>
            <param name="v1">The first value to compare.</param>
            <param name="v2">The second value to compare.</param>
            <returns><see langword="true"/> if the two values are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.MaskedUInt64.op_Equality(System.UInt64,Ultraviolet.Core.MaskedUInt64)">
            <summary>
            Compares two objects to determine whether they are equal.
            </summary>
            <param name="v1">The first value to compare.</param>
            <param name="v2">The second value to compare.</param>
            <returns><see langword="true"/> if the two values are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.MaskedUInt64.op_Inequality(Ultraviolet.Core.MaskedUInt64,Ultraviolet.Core.MaskedUInt64)">
            <summary>
            Compares two objects to determine whether they are unequal.
            </summary>
            <param name="v1">The first value to compare.</param>
            <param name="v2">The second value to compare.</param>
            <returns><see langword="true"/> if the two values are unequal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.MaskedUInt64.op_Inequality(System.UInt64,Ultraviolet.Core.MaskedUInt64)">
            <summary>
            Compares two objects to determine whether they are equal.
            </summary>
            <param name="v1">The first value to compare.</param>
            <param name="v2">The second value to compare.</param>
            <returns><see langword="true"/> if the two values are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.MaskedUInt64.op_Inequality(Ultraviolet.Core.MaskedUInt64,System.UInt64)">
            <summary>
            Compares two objects to determine whether they are unequal.
            </summary>
            <param name="v1">The first value to compare.</param>
            <param name="v2">The second value to compare.</param>
            <returns><see langword="true"/> if the two values are unequal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.MaskedUInt64.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.MaskedUInt64.Equals(System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.MaskedUInt64.Equals(Ultraviolet.Core.MaskedUInt64)">
            <inheritdoc/>
        </member>
        <member name="T:Ultraviolet.Core.MathUtil">
            <summary>
            Contains useful mathematical functions.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.MathUtil.IsApproximatelyZero(System.Single)">
            <summary>
            Gets a value indicating whether the specified <see cref="T:System.Single"/> value is zero to within a reasonable approximation.
            </summary>
            <param name="value">The value to evaluate.</param>
            <returns><see langword="true"/> if the specified value is zero or approximately zero; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.MathUtil.IsApproximatelyNonZero(System.Single)">
            <summary>
            Gets a value indicating whether the specified <see cref="T:System.Single"/> value is non-zero to within a reasonable approximation.
            </summary>
            <param name="value">The value to evaluate.</param>
            <returns><see langword="true"/> if the specified value is non-zero; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.MathUtil.IsApproximatelyGreaterThan(System.Single,System.Single)">
            <summary>
            Gets a value indicating whether <paramref name="value1"/> is greater than <paramref name="value2"/> to within a reasonable approximation.
            </summary>
            <param name="value1">The first value to evaluate.</param>
            <param name="value2">The second value to evaluate.</param>
            <returns><see langword="true"/> if <paramref name="value1"/> is greater than <paramref name="value2"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.MathUtil.IsApproximatelyGreaterThanOrEqual(System.Single,System.Single)">
            <summary>
            Gets a value indicating whether <paramref name="value1"/> is greater than or equal to <paramref name="value2"/> to within a reasonable approximation.
            </summary>
            <param name="value1">The first value to evaluate.</param>
            <param name="value2">The second value to evaluate.</param>
            <returns><see langword="true"/> if <paramref name="value1"/> is greater than or equal to <paramref name="value2"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.MathUtil.IsApproximatelyLessThan(System.Single,System.Single)">
            <summary>
            Gets a value indicating whether <paramref name="value1"/> is less than <paramref name="value2"/> to within a reasonable approximation.
            </summary>
            <param name="value1">The first value to evaluate.</param>
            <param name="value2">The second value to evaluate.</param>
            <returns><see langword="true"/> if <paramref name="value1"/> is less than <paramref name="value2"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.MathUtil.IsApproximatelyLessThanOrEqualTo(System.Single,System.Single)">
            <summary>
            Gets a value indicating whether <paramref name="value1"/> is less than or equal to <paramref name="value2"/> to within a reasonable approximation.
            </summary>
            <param name="value1">The first value to evaluate.</param>
            <param name="value2">The second value to evaluate.</param>
            <returns><see langword="true"/> if <paramref name="value1"/> is less than or equal to <paramref name="value2"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.MathUtil.AreApproximatelyEqual(System.Single,System.Single)">
            <summary>
            Gets a value indicating whether <paramref name="value1"/> is equal to <paramref name="value2"/> to within a reasonable approximation.
            </summary>
            <param name="value1">The first value to evaluate.</param>
            <param name="value2">The second value to evaluate.</param>
            <returns><see langword="true"/> if <paramref name="value1"/> is equal to <paramref name="value2"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.MathUtil.IsApproximatelyZero(System.Double)">
            <summary>
            Gets a value indicating whether the specified <see cref="T:System.Double"/> value is zero to within a reasonable approximation.
            </summary>
            <param name="value">The value to evaluate.</param>
            <returns><see langword="true"/> if the specified value is zero or approximately zero; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.MathUtil.IsApproximatelyNonZero(System.Double)">
            <summary>
            Gets a value indicating whether the specified <see cref="T:System.Double"/> value is non-zero to within a reasonable approximation.
            </summary>
            <param name="value">The value to evaluate.</param>
            <returns><see langword="true"/> if the specified value is non-zero; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.MathUtil.IsApproximatelyGreaterThan(System.Double,System.Double)">
            <summary>
            Gets a value indicating whether <paramref name="value1"/> is greater than <paramref name="value2"/> to within a reasonable approximation.
            </summary>
            <param name="value1">The first value to evaluate.</param>
            <param name="value2">The second value to evaluate.</param>
            <returns><see langword="true"/> if <paramref name="value1"/> is greater than <paramref name="value2"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.MathUtil.IsApproximatelyGreaterThanOrEqual(System.Double,System.Double)">
            <summary>
            Gets a value indicating whether <paramref name="value1"/> is greater than or equal to <paramref name="value2"/> to within a reasonable approximation.
            </summary>
            <param name="value1">The first value to evaluate.</param>
            <param name="value2">The second value to evaluate.</param>
            <returns><see langword="true"/> if <paramref name="value1"/> is greater than or equal to <paramref name="value2"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.MathUtil.IsApproximatelyLessThan(System.Double,System.Double)">
            <summary>
            Gets a value indicating whether <paramref name="value1"/> is less than <paramref name="value2"/> to within a reasonable approximation.
            </summary>
            <param name="value1">The first value to evaluate.</param>
            <param name="value2">The second value to evaluate.</param>
            <returns><see langword="true"/> if <paramref name="value1"/> is less than <paramref name="value2"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.MathUtil.IsApproximatelyLessThanOrEqualTo(System.Double,System.Double)">
            <summary>
            Gets a value indicating whether <paramref name="value1"/> is less than or equal to <paramref name="value2"/> to within a reasonable approximation.
            </summary>
            <param name="value1">The first value to evaluate.</param>
            <param name="value2">The second value to evaluate.</param>
            <returns><see langword="true"/> if <paramref name="value1"/> is less than or equal to <paramref name="value2"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.MathUtil.AreApproximatelyEqual(System.Double,System.Double)">
            <summary>
            Gets a value indicating whether <paramref name="value1"/> is equal to <paramref name="value2"/> to within a reasonable approximation.
            </summary>
            <param name="value1">The first value to evaluate.</param>
            <param name="value2">The second value to evaluate.</param>
            <returns><see langword="true"/> if <paramref name="value1"/> is equal to <paramref name="value2"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.MathUtil.FindNextPowerOfTwo(System.Int32)">
            <summary>
            Finds the next power of two that is higher than the specified value.
            </summary>
            <param name="k">The value to evaluate.</param>
            <returns>The next power of two that is higher than the specified value.</returns>
        </member>
        <member name="M:Ultraviolet.Core.MathUtil.Clamp(System.Byte,System.Byte,System.Byte)">
            <summary>
            Clamps a value to the specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum possible value.</param>
            <param name="max">The maximum possible value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:Ultraviolet.Core.MathUtil.Clamp(System.Int16,System.Int16,System.Int16)">
            <summary>
            Clamps a value to the specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum possible value.</param>
            <param name="max">The maximum possible value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:Ultraviolet.Core.MathUtil.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Clamps a value to the specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum possible value.</param>
            <param name="max">The maximum possible value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:Ultraviolet.Core.MathUtil.Clamp(System.Int64,System.Int64,System.Int64)">
            <summary>
            Clamps a value to the specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum possible value.</param>
            <param name="max">The maximum possible value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:Ultraviolet.Core.MathUtil.Clamp(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Clamps a value to the specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum possible value.</param>
            <param name="max">The maximum possible value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:Ultraviolet.Core.MathUtil.Clamp(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Clamps a value to the specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum possible value.</param>
            <param name="max">The maximum possible value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:Ultraviolet.Core.MathUtil.Clamp(System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Clamps a value to the specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum possible value.</param>
            <param name="max">The maximum possible value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:Ultraviolet.Core.MathUtil.Clamp(System.Single,System.Single,System.Single)">
            <summary>
            Clamps a value to the specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum possible value.</param>
            <param name="max">The maximum possible value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:Ultraviolet.Core.MathUtil.Clamp(System.Double,System.Double,System.Double)">
            <summary>
            Clamps a value to the specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum possible value.</param>
            <param name="max">The maximum possible value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:Ultraviolet.Core.MathUtil.Lerp(System.Byte,System.Byte,System.Single)">
            <summary>
            Linearly interpolates between two values.
            </summary>
            <param name="value1">Source value.</param>
            <param name="value2">Source value.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of value2.</param>
            <returns>Interpolated value.</returns>
        </member>
        <member name="M:Ultraviolet.Core.MathUtil.Lerp(System.Int16,System.Int16,System.Single)">
            <summary>
            Linearly interpolates between two values.
            </summary>
            <param name="value1">Source value.</param>
            <param name="value2">Source value.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of value2.</param>
            <returns>Interpolated value.</returns>
        </member>
        <member name="M:Ultraviolet.Core.MathUtil.Lerp(System.Int32,System.Int32,System.Single)">
            <summary>
            Linearly interpolates between two values.
            </summary>
            <param name="value1">Source value.</param>
            <param name="value2">Source value.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of value2.</param>
            <returns>Interpolated value.</returns>
        </member>
        <member name="M:Ultraviolet.Core.MathUtil.Lerp(System.Int64,System.Int64,System.Single)">
            <summary>
            Linearly interpolates between two values.
            </summary>
            <param name="value1">Source value.</param>
            <param name="value2">Source value.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of value2.</param>
            <returns>Interpolated value.</returns>
        </member>
        <member name="M:Ultraviolet.Core.MathUtil.Lerp(System.UInt16,System.UInt16,System.Single)">
            <summary>
            Linearly interpolates between two values.
            </summary>
            <param name="value1">Source value.</param>
            <param name="value2">Source value.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of value2.</param>
            <returns>Interpolated value.</returns>
        </member>
        <member name="M:Ultraviolet.Core.MathUtil.Lerp(System.UInt32,System.UInt32,System.Single)">
            <summary>
            Linearly interpolates between two values.
            </summary>
            <param name="value1">Source value.</param>
            <param name="value2">Source value.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of value2.</param>
            <returns>Interpolated value.</returns>
        </member>
        <member name="M:Ultraviolet.Core.MathUtil.Lerp(System.UInt64,System.UInt64,System.Single)">
            <summary>
            Linearly interpolates between two values.
            </summary>
            <param name="value1">Source value.</param>
            <param name="value2">Source value.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of value2.</param>
            <returns>Interpolated value.</returns>
        </member>
        <member name="M:Ultraviolet.Core.MathUtil.Lerp(System.Single,System.Single,System.Single)">
            <summary>
            Linearly interpolates between two values.
            </summary>
            <param name="value1">Source value.</param>
            <param name="value2">Source value.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of value2.</param>
            <returns>Interpolated value.</returns>
        </member>
        <member name="M:Ultraviolet.Core.MathUtil.Lerp(System.Double,System.Double,System.Single)">
            <summary>
            Linearly interpolates between two values.
            </summary>
            <param name="value1">Source value.</param>
            <param name="value2">Source value.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of value2.</param>
            <returns>Interpolated value.</returns>
        </member>
        <member name="T:Ultraviolet.Core.Messages.IMessageQueue`1">
            <summary>
            Represents an asynchronous queue of messages.
            </summary>
            <typeparam name="TMessageType">The type of message which is published by the queue.</typeparam>
        </member>
        <member name="M:Ultraviolet.Core.Messages.IMessageQueue`1.CreateMessageData``1">
            <summary>
            Creates or retrieves an instance of the specified message data type.
            The instance may be retrieved from a pool; if so, it will be returned to the pool 
            once it has been published.
            </summary>
            <typeparam name="TMessageData">The type of message data object to create.</typeparam>
            <returns>The instance that was created or retrieved.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Messages.IMessageQueue`1.Subscribe(Ultraviolet.Core.Messages.IMessageSubscriber{`0},`0)">
            <summary>
            Subscribes a receiver to the specified set of message types.
            </summary>
            <param name="receiver">The receiver to subscribe to the specified message type.</param>
            <param name="type">The message type to which to subscribe the receiver.</param>
        </member>
        <member name="M:Ultraviolet.Core.Messages.IMessageQueue`1.Subscribe(Ultraviolet.Core.Messages.IMessageSubscriber{`0},`0[])">
            <summary>
            Subscribes a receiver to the specified set of message types.
            </summary>
            <param name="receiver">The receiver to subscribe to the specified message type.</param>
            <param name="types">The message types to which to subscribe the receiver.</param>
        </member>
        <member name="M:Ultraviolet.Core.Messages.IMessageQueue`1.Unsubscribe(Ultraviolet.Core.Messages.IMessageSubscriber{`0})">
            <summary>
            Unsubcribes a receiver from all message types.
            </summary>
            <param name="receiver">The receiver to unsubscribe from all message types.</param>
        </member>
        <member name="M:Ultraviolet.Core.Messages.IMessageQueue`1.Unsubscribe(Ultraviolet.Core.Messages.IMessageSubscriber{`0},`0)">
            <summary>
            Unsubscribes a receiver from the specified set of message types.
            </summary>
            <param name="receiver">The receiver to unsubscribe from the specified message type.</param>
            <param name="type">The message type from which to unsubscribe the receiver.</param>
        </member>
        <member name="M:Ultraviolet.Core.Messages.IMessageQueue`1.Publish(`0,Ultraviolet.Core.Messages.MessageData)">
            <summary>
            Publishes a message to the queue.
            </summary>
            <param name="type">The message type.</param>
            <param name="data">The message data.</param>
        </member>
        <member name="M:Ultraviolet.Core.Messages.IMessageQueue`1.PublishImmediate(`0,Ultraviolet.Core.Messages.MessageData)">
            <summary>
            Publishes a message, bypassing the queue and immediately informing all subscribers.
            </summary>
            <param name="type">The message type.</param>
            <param name="data">The message data.</param>
        </member>
        <member name="T:Ultraviolet.Core.Messages.IMessageSubscriber`1">
            <summary>
            Represents an object which can subscribe to a message queue.
            </summary>
            <typeparam name="TMessageType">The type of message which is received by this subscriber.</typeparam>
        </member>
        <member name="M:Ultraviolet.Core.Messages.IMessageSubscriber`1.ReceiveMessage(`0,Ultraviolet.Core.Messages.MessageData)">
            <summary>
            Receives a message that has been published to a queue.
            </summary>
            <param name="type">The type of message that was received.</param>
            <param name="data">The data for the message that was received.</param>
        </member>
        <member name="T:Ultraviolet.Core.Messages.LocalMessageQueue`1">
            <summary>
            Represents a message queue which exists entirely within the local process.
            </summary>
            <typeparam name="TMessageType">The type of message which is published by the queue.</typeparam>
        </member>
        <member name="M:Ultraviolet.Core.Messages.LocalMessageQueue`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Messages.LocalMessageQueue`1"/> class with the default capacity.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Messages.LocalMessageQueue`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Messages.LocalMessageQueue`1"/> class with the specified initial capacity.
            </summary>
            <param name="capacity">The initial capacity of the message queue's pools.</param>
        </member>
        <member name="M:Ultraviolet.Core.Messages.LocalMessageQueue`1.CreateMessageData``1">
            <summary>
            Creates or retrieves an instance of the specified message data type.
            The instance may be retrieved from a pool; if so, it will be returned to the pool 
            once it has been published.
            </summary>
            <typeparam name="TMessageData">The type of message data object to create.</typeparam>
            <returns>The instance that was created or retrieved.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Messages.LocalMessageQueue`1.Subscribe(Ultraviolet.Core.Messages.IMessageSubscriber{`0},`0)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Messages.LocalMessageQueue`1.Subscribe(Ultraviolet.Core.Messages.IMessageSubscriber{`0},`0[])">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Messages.LocalMessageQueue`1.Unsubscribe(Ultraviolet.Core.Messages.IMessageSubscriber{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Messages.LocalMessageQueue`1.Unsubscribe(Ultraviolet.Core.Messages.IMessageSubscriber{`0},`0)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Messages.LocalMessageQueue`1.Publish(`0,Ultraviolet.Core.Messages.MessageData)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Messages.LocalMessageQueue`1.PublishImmediate(`0,Ultraviolet.Core.Messages.MessageData)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Messages.LocalMessageQueue`1.Process">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Messages.LocalMessageQueue`1.CreateEnqueuedMessage(`0,Ultraviolet.Core.Messages.MessageData)">
            <summary>
            Creates an enqueued message.
            </summary>
            <param name="type">The message type.</param>
            <param name="data">The message data.</param>
            <returns>The enqueued message.</returns>
        </member>
        <member name="T:Ultraviolet.Core.Messages.LocalMessageQueue`1.EnqueuedMessage">
            <summary>
            Represents a pending message in the message queue.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Messages.LocalMessageQueue`1.EnqueuedMessage.Type">
            <summary>
            The message type.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Messages.LocalMessageQueue`1.EnqueuedMessage.Data">
            <summary>
            The message data.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.Messages.MessageData">
            <summary>
            Represents the base class for message data.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Messages.MessageData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Messages.MessageData"/> class.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Messages.MessageData.Reset">
            <summary>
            Resets the message data to its default state.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Messages.MessageData.EvaluateMerge(Ultraviolet.Core.Messages.MessageData)">
            <summary>
            Evaluates another message data object to determine if it can be merged with this object.
            </summary>
            <param name="other">The message data object to evaluate against this message data object.</param>
            <returns>A message data object that represents the merged result, or <see langword="null"/> if the objects cannot be merged.</returns>
        </member>
        <member name="P:Ultraviolet.Core.Messages.MessageData.IsMergeable">
            <summary>
            Gets a value indicating whether this message data is able to be merged with other message data.
            </summary>
        </member>
        <member name="F:Ultraviolet.Core.Messages.MessageData.Empty">
            <summary>
            Represents an empty message data object.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.Messages.NamespaceDoc">
            <summary>
            The <see cref="N:Ultraviolet.Core.Messages"/> namespace contains types that implement the
            publish-subscribe messaging pattern.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.Messages.SubscriberCollection`1">
            <summary>
            Represents a collection of message subscribers.
            </summary>
            <typeparam name="TMessageType">The type of message received by the subscribers in this collection.</typeparam>
        </member>
        <member name="M:Ultraviolet.Core.Messages.SubscriberCollection`1.ReceiveMessage(`0,Ultraviolet.Core.Messages.MessageData)">
            <summary>
            Pushes the specified message to all subscribers to the specified message type.
            </summary>
            <param name="messageType">The type of message being pushed.</param>
            <param name="data">The data for the message being pushed.</param>
        </member>
        <member name="M:Ultraviolet.Core.Messages.SubscriberCollection`1.Purge(`0)">
            <summary>
            Purges the subscriber list associated with the specified message type.
            </summary>
            <param name="messageType">The type of message for which to purge subscribers.</param>
        </member>
        <member name="M:Ultraviolet.Core.Messages.SubscriberCollection`1.PurgeAll">
            <summary>
            Purges the subscriber lists associated with all message types.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Messages.SubscriberCollection`1.RemoveFromAll(Ultraviolet.Core.Messages.IMessageSubscriber{`0})">
            <summary>
            Removes the specified subscriber from all subscriber lists.
            </summary>
            <param name="subscriber">The subscriber to remove.</param>
        </member>
        <member name="P:Ultraviolet.Core.Messages.SubscriberCollection`1.Item(`0)">
            <summary>
            Gets the set of subscribers which are subscribed to the specified message type.
            </summary>
            <param name="type">The type of message for which to get a subscriber list.</param>
            <returns>The set of subscribers which are subscribed to the specified message type.</returns>
        </member>
        <member name="T:Ultraviolet.Core.Native.UnixLibraryLoader">
            <summary>
            Contains methods for loading shared libraries on Unix-based platforms.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.Native.UnixLibraryLoaderLibdl2">
            <summary>
            Contains methods for loading shared libraries on Unix-based platforms.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.Native.UnixLibraryLoaderLibdl2.Native">
            <summary>
            Contains native methods used by the <see cref="T:Ultraviolet.Core.Native.UnixLibraryLoaderLibdl2"/> class.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Native.UnixLibraryLoaderLibdl2.CoreLoadNativeLibrary(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Native.UnixLibraryLoaderLibdl2.CoreLoadNativeFunctionPointer(System.IntPtr,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Native.UnixLibraryLoaderLibdl2.CoreFreeNativeLibrary(System.IntPtr)">
            <inheritdoc/>
        </member>
        <member name="T:Ultraviolet.Core.Native.UnixLibraryLoaderLibdl">
            <summary>
            Contains methods for loading shared libraries on Unix-based platforms.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.Native.UnixLibraryLoaderLibdl.Native">
            <summary>
            Contains native methods used by the <see cref="T:Ultraviolet.Core.Native.UnixLibraryLoaderLibdl"/> class.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Native.UnixLibraryLoaderLibdl.CoreLoadNativeLibrary(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Native.UnixLibraryLoaderLibdl.CoreLoadNativeFunctionPointer(System.IntPtr,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Native.UnixLibraryLoaderLibdl.CoreFreeNativeLibrary(System.IntPtr)">
            <inheritdoc/>
        </member>
        <member name="T:Ultraviolet.Core.Native.UnixLibraryLoaderLibc">
            <summary>
            Contains methods for loading shared libraries on Unix-based platforms.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.Native.UnixLibraryLoaderLibc.Native">
            <summary>
            Contains native methods used by the <see cref="T:Ultraviolet.Core.Native.UnixLibraryLoaderLibc"/> class.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Native.UnixLibraryLoaderLibc.CoreLoadNativeLibrary(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Native.UnixLibraryLoaderLibc.CoreLoadNativeFunctionPointer(System.IntPtr,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Native.UnixLibraryLoaderLibc.CoreFreeNativeLibrary(System.IntPtr)">
            <inheritdoc/>
        </member>
        <member name="T:Ultraviolet.Core.Native.Win32LibraryLoader">
            <summary>
            Contains methods for loading shared libraries on the Windows platform.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.Native.Win32LibraryLoader.Native">
            <summary>
            Contains native methods used by the <see cref="T:Ultraviolet.Core.Native.Win32LibraryLoader"/> class.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Native.Win32LibraryLoader.CoreLoadNativeLibrary(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Native.Win32LibraryLoader.CoreLoadNativeFunctionPointer(System.IntPtr,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Native.Win32LibraryLoader.CoreFreeNativeLibrary(System.IntPtr)">
            <inheritdoc/>
        </member>
        <member name="T:Ultraviolet.Core.Native.DefaultPathResolver">
            <summary>
            Represents the default algorithm for resolving load targets from a native library name.
            This implementation returns the following load targets:
            1. The library contained in the application's base folder.
            2. The library contained in the application's platform-specific dependency folder (i.e. x64/win32nt, x64/unix, etc.)
            3. The simple name, unchanged.
            4. The library as resolved via the default DependencyContext, in the default NuGet package cache folder.
            </summary>
            <remarks>This code is based on a prototype by Eric Mellinoe (https://github.com/mellinoe/nativelibraryloader/tree/master/NativeLibraryLoader).</remarks>
        </member>
        <member name="M:Ultraviolet.Core.Native.DefaultPathResolver.EnumeratePossibleLibraryLoadTargets(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Native.DefaultPathResolver.TryLocateNativeAssetInPlatformFolder(System.String,System.String@)">
            <summary>
            Attempts to locate a native asset with the given name in the application's platform-specific dependency folder.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Native.DefaultPathResolver.TryLocateNativeAssetFromDeps(System.String,System.String@)">
            <summary>
            Attempts to locate a native asset with the given name in the default NuGet package cache folder.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.Native.LibraryLoader">
            <summary>
            Contains methods for loading native libraries and function pointers.
            </summary>
            <remarks>This code is based on a prototype by Eric Mellinoe (https://github.com/mellinoe/nativelibraryloader/tree/master/NativeLibraryLoader).</remarks>
        </member>
        <member name="M:Ultraviolet.Core.Native.LibraryLoader.GetPlatformDefaultLoader">
            <summary>
            Creates a new instance of the <see cref="T:Ultraviolet.Core.Native.LibraryLoader"/> class which is
            appropriate for the current platform.
            </summary>
            <returns>The <see cref="T:Ultraviolet.Core.Native.LibraryLoader"/> instance which was created.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Native.LibraryLoader.LoadNativeLibrary(System.String)">
            <summary>
            Loads a native library by name and return an operating system handle which represents it.
            </summary>
            <param name="name">The name of the library to load.</param>
            <returns>An <see cref="T:System.IntPtr"/> which represents the native library's handle.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Native.LibraryLoader.LoadNativeLibrary(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Loads a native library by name and return an operating system handle which represents it.
            </summary>
            <param name="names">An ordered collection of library names. Each name is tried in 
            turn until the library is successfully loaded.</param>
            <returns>An <see cref="T:System.IntPtr"/> which represents the native library's handle.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Native.LibraryLoader.LoadNativeLibrary(System.String,Ultraviolet.Core.Native.PathResolver)">
            <summary>
            Loads a native library by name and return an operating system handle which represents it.
            </summary>
            <param name="name">The name of the library to load.</param>
            <param name="pathResolver">A <see cref="T:Ultraviolet.Core.Native.PathResolver"/> instance which specifies
            the algorithm for resolving library paths from names.</param>
            <returns>An <see cref="T:System.IntPtr"/> which represents the native library's handle.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Native.LibraryLoader.LoadNativeLibrary(System.Collections.Generic.IEnumerable{System.String},Ultraviolet.Core.Native.PathResolver)">
            <summary>
            Loads a native library by name and return an operating system handle which represents it.
            </summary>
            <param name="names">An ordered collection of library names. Each name is tried in 
            turn until the library is successfully loaded.</param>
            <param name="pathResolver">A <see cref="T:Ultraviolet.Core.Native.PathResolver"/> instance which specifies
            the algorithm for resolving library paths from names.</param>
            <returns>An <see cref="T:System.IntPtr"/> which represents the native library's handle.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Native.LibraryLoader.LoadFunctionPointer(System.IntPtr,System.String)">
            <summary>
            Retrieves a pointer to the specified function within a native library.
            </summary>
            <param name="handle">The handle of the shared library from which to retrieve the function pointer.</param>
            <param name="functionName">The name of the function for which to retrieve a function pointer.</param>
            <returns>An <see cref="T:System.IntPtr"/> which represents the function, or <see cref="F:System.IntPtr.Zero"/> if 
            the function could not be retrieved.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Native.LibraryLoader.FreeNativeLibrary(System.IntPtr)">
            <summary>
            Frees the native library represented by the specified operating system handle.
            </summary>
            <param name="handle">The handle of the shared library to free.</param>
        </member>
        <member name="M:Ultraviolet.Core.Native.LibraryLoader.CoreLoadNativeLibrary(System.String)">
            <summary>
            When overridden in a derived class, loads a native library and returns an operating system handle for it.
            </summary>
            <param name="libraryName">The name of the library to load.</param>
            <returns>The operating system handle for the shared library, or <see cref="F:System.IntPtr.Zero"/> if the library cannot be loaded.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Native.LibraryLoader.CoreLoadNativeFunctionPointer(System.IntPtr,System.String)">
            <summary>
            When overridden in a derived class, loads a native function pointer from the specified library.
            </summary>
            <param name="handle">The handle of the native library from which to load the function pointer.</param>
            <param name="functionName">The name of the native function for which to load a function pointer.</param>
            <returns>The loaded function pointer, or <see cref="F:System.IntPtr.Zero"/> if the function pointer cannot be loaded.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Native.LibraryLoader.CoreFreeNativeLibrary(System.IntPtr)">
            <summary>
            When overriden in a derived class, frees the native library represented by the specified operating system handle.
            </summary>
            <param name="handle">The handle of the shared library to free.</param>
        </member>
        <member name="M:Ultraviolet.Core.Native.LibraryLoader.FindLibraryLoaderForLinux">
            <summary>
            Determines which library loader instance to use for the current Linux platform.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Native.LibraryLoader.TestLibraryLoaderForLinux(Ultraviolet.Core.Native.LibraryLoader)">
            <summary>
            Tests a library loader to determine whether it is valid for the current Linux platform.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Native.LibraryLoader.LoadWithResolver(System.String,Ultraviolet.Core.Native.PathResolver)">
            <summary>
            Attempts to load a native library with the specified path resolver.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.Native.NativeLibrary">
            <summary>
            Represents a native shared library opened by the operating system.
            This type can be used to load native function pointers by name.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Native.NativeLibrary.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Native.NativeLibrary"/> class.
            </summary>
            <param name="name">The name of the library to load.</param>
        </member>
        <member name="M:Ultraviolet.Core.Native.NativeLibrary.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Native.NativeLibrary"/> class.
            </summary>
            <param name="names">An ordered collection of library names. Each name is tried in 
            turn until the library is successfully loaded.</param>
        </member>
        <member name="M:Ultraviolet.Core.Native.NativeLibrary.#ctor(System.String,Ultraviolet.Core.Native.LibraryLoader)">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Native.NativeLibrary"/> class.
            </summary>
            <param name="name">The name of the library to load.</param>
            <param name="loader">The <see cref="T:Ultraviolet.Core.Native.LibraryLoader"/> which is used to load the library
            and retrieve function pointers.</param>
        </member>
        <member name="M:Ultraviolet.Core.Native.NativeLibrary.#ctor(System.Collections.Generic.IEnumerable{System.String},Ultraviolet.Core.Native.LibraryLoader)">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Native.NativeLibrary"/> class.
            </summary>
            <param name="names">An ordered collection of library names. Each name is tried in 
            turn until the library is successfully loaded.</param>
            <param name="loader">The <see cref="T:Ultraviolet.Core.Native.LibraryLoader"/> which is used to load the library
            and retrieve function pointers.</param>
        </member>
        <member name="M:Ultraviolet.Core.Native.NativeLibrary.#ctor(System.String,Ultraviolet.Core.Native.LibraryLoader,Ultraviolet.Core.Native.PathResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Native.NativeLibrary"/> class.
            </summary>
            <param name="name">The name of the library to load.</param>
            <param name="loader">The <see cref="T:Ultraviolet.Core.Native.LibraryLoader"/> which is used to load the library
            and retrieve function pointers.</param>
            <param name="pathResolver">A <see cref="T:Ultraviolet.Core.Native.PathResolver"/> instance which determines the algorithm
            for resolving library paths from library names.</param>
        </member>
        <member name="M:Ultraviolet.Core.Native.NativeLibrary.#ctor(System.Collections.Generic.IEnumerable{System.String},Ultraviolet.Core.Native.LibraryLoader,Ultraviolet.Core.Native.PathResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Native.NativeLibrary"/> class.
            </summary>
            <param name="names">An ordered collection of library names. Each name is tried in 
            turn until the library is successfully loaded.</param>
            <param name="loader">The <see cref="T:Ultraviolet.Core.Native.LibraryLoader"/> which is used to load the library
            and retrieve function pointers.</param>
            <param name="pathResolver">A <see cref="T:Ultraviolet.Core.Native.PathResolver"/> instance which determines the algorithm
            for resolving library paths from library names.</param>
        </member>
        <member name="M:Ultraviolet.Core.Native.NativeLibrary.LoadFunction``1(System.String)">
            <summary>
            Loads a function whose signature matches the given delegate's type signature.
            </summary>
            <typeparam name="T">The type of delegate to return.</typeparam>
            <param name="name">The name of the native function to load.</param>
            <returns>A delegate wrapping the native function with the specified name.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Native.NativeLibrary.Dispose">
            <summary>
            Frees the native library. Function pointers retrieved from this library will be void.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Native.NativeLibrary.Handle">
            <summary>
            Gets the operating system handle which represents this library.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.Native.PathResolver">
            <summary>
            Represents an algorithm which enumerates the list of possible load targets
            for a given native library name.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Native.PathResolver.EnumeratePossibleLibraryLoadTargets(System.String)">
            <summary>
            Returns a collection which contains the list of possible load targets
            for the specified native library name.
            </summary>
            <param name="name">The name of the native library for which to enumerate load targets.</param>
            <returns>A collection which contains the retrieved list of load targets.</returns>
        </member>
        <member name="P:Ultraviolet.Core.Native.PathResolver.Default">
            <summary>
            Gets the default path resolution algorithm.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.MonoNativeFunctionWrapperAttribute">
            <summary>
            Attribute to apply to delegates to flag them as targets that can be used with <see cref="M:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer(System.IntPtr,System.Type)"/>.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.MonoPInvokeCallbackAttribute">
            <summary>
            Attribute used to annotate functions that will be called back from the unmanaged world.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.MonoPInvokeCallbackAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.MonoPInvokeCallbackAttribute"/> class.
            </summary>
            <param name="t">The type of the delegate that will be calling us back.</param>
        </member>
        <member name="T:Ultraviolet.Core.NamespaceDoc">
            <summary>
            The <see cref="N:Ultraviolet.Core"/> namespace contains generally-useful utility classes.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.CoreEnumJsonConverter">
            <summary>
            Represents a custom JSON converter which supports enums and flags.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.CoreEnumJsonConverter.CanConvert(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.CoreEnumJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.CoreEnumJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.Core.CoreEnumJsonConverter.CanRead">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.Core.CoreEnumJsonConverter.CanWrite">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.CoreEnumJsonConverter.HandleNullableTypes(System.Type@)">
            <summary>
            Handles nullable enum types.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.CoreEnumerableJsonConverter`1">
            <summary>
            Represents a custom JSON converter which supports enumerable types.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.CoreEnumerableJsonConverter`1.CanConvert(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.CoreEnumerableJsonConverter`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.CoreEnumerableJsonConverter`1.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.Core.CoreEnumerableJsonConverter`1.CanRead">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.Core.CoreEnumerableJsonConverter`1.CanWrite">
            <inheritdoc/>
        </member>
        <member name="T:Ultraviolet.Core.ReadJsonDelegate">
            <summary>
            Represents a method which reads an object from a JSON stream.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="T:Ultraviolet.Core.WriteJsonDelegate">
            <summary>
            Represents a method which writes an object to a JSON stream.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="T:Ultraviolet.Core.CoreJsonConverter">
            <summary>
            Represents a custom JSON converter which supports Ultraviolet's core types.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.CoreJsonConverter.#cctor">
            <summary>
            Initializes the <see cref="T:Ultraviolet.Core.CoreJsonConverter"/> type.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.CoreJsonConverter.CanConvert(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.CoreJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.CoreJsonConverter.ReadJson_ResolvedDataObjectReference(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads a <see cref="T:Ultraviolet.Core.Data.ResolvedDataObjectReference"/> value.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.CoreJsonConverter.ReadJson_NullableResolvedDataObjectReference(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads a <see cref="T:System.Nullable`1"/> value.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.CoreJsonConverter.ReadJson_MaskedUInt32(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads a <see cref="T:Ultraviolet.Core.MaskedUInt32"/> value.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.CoreJsonConverter.ReadJson_NullableMaskedUInt32(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads a <see cref="T:System.Nullable`1"/> value.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.CoreJsonConverter.ReadJson_MaskedUInt64(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads a <see cref="T:Ultraviolet.Core.MaskedUInt64"/> value.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.CoreJsonConverter.ReadJson_NullableMaskedUInt64(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads a <see cref="T:System.Nullable`1"/> value.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.CoreJsonConverter.ReadJson_StringResource(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads a <see cref="T:Ultraviolet.Core.Text.StringResource"/> value.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.CoreJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.CoreJsonConverter.WriteJson_ResolvedDataObjectReference(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes a <see cref="T:Ultraviolet.Core.Data.ResolvedDataObjectReference"/> value.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.CoreJsonConverter.WriteJson_NullableResolvedDataObjectReference(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.CoreJsonConverter.WriteJson_MaskedUInt32(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes a <see cref="T:Ultraviolet.Core.MaskedUInt32"/> value.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.CoreJsonConverter.WriteJson_NullableMaskedUInt32(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.CoreJsonConverter.WriteJson_MaskedUInt64(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes a <see cref="T:Ultraviolet.Core.MaskedUInt64"/> value.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.CoreJsonConverter.WriteJson_NullableMaskedUInt64(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.CoreJsonConverter.WriteJson_StringResource(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes a <see cref="T:Ultraviolet.Core.Text.StringResource"/> value.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.CoreJsonConverter.CanRead">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.Core.CoreJsonConverter.CanWrite">
            <inheritdoc/>
        </member>
        <member name="T:Ultraviolet.Core.CoreStrings">
            <summary>
            Contains Ultraviolet's core string resources.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.CoreStrings.#cctor">
            <summary>
            Initializes the <see cref="T:Ultraviolet.Core.CoreStrings"/> type.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.Performance.GCDebug">
            <summary>
            Contains methods for profiling and debugging garbage collection.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Performance.GCDebug.#cctor">
            <summary>
            Initializes the <see cref="T:Ultraviolet.Core.Performance.GCDebug"/> type.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Performance.GCDebug.DumpHeap">
            <summary>
            Dumps the contents of the managed heap to the attached profiler, if a profiler is attached.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Performance.GCDebug.WriteLine(System.String)">
            <summary>
            Writes the specified line of text to the allocation profiler.
            </summary>
            <param name="line">The line to write to the allocation profiler.</param>
        </member>
        <member name="M:Ultraviolet.Core.Performance.GCDebug.WriteLine(System.String,System.Object[])">
            <summary>
            Writes the specified line of formatted text to the allocation profiler.
            </summary>
            <param name="fmt">The format string.</param>
            <param name="args">The array of objects to write using <paramref name="fmt"/>.</param>
        </member>
        <member name="M:Ultraviolet.Core.Performance.GCDebug.SetAllocationLoggingActive(System.Boolean)">
            <summary>
            Activates or deactivates allocation logging.
            </summary>
            <param name="active">A value indicating whether allocation logging is active.</param>
        </member>
        <member name="M:Ultraviolet.Core.Performance.GCDebug.GetAllocationLoggingActive">
            <summary>
            Gets a value indicating whether allocation logging is currently active.
            </summary>
            <returns><see langword="true"/> if allocation logging is currently active; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Performance.GCDebug.SetCallLoggingActive(System.Boolean)">
            <summary>
            Activates or deactivates call logging.
            </summary>
            <param name="active">A value indicating whether call logging is active.</param>
        </member>
        <member name="M:Ultraviolet.Core.Performance.GCDebug.GetCallLoggingActive">
            <summary>
            Gets a value indicating whether call logging is currently active.
            </summary>
            <returns><see langword="true"/> if call logging is currently active; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Ultraviolet.Core.Performance.GCDebug.NativeMethods">
            <summary>
            Contains native methods for interacting with CLR Profiler.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.Performance.NamespaceDoc">
            <summary>
            The <see cref="N:Ultraviolet.Core.Performance"/> namespace contains types useful for monitoring
            an application's performance metrics.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.LinkerSafeAttribute">
            <summary>
            Indicates that the tagged assembly can be safely linked by the Xamarin linker.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.LinkerSafeAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.LinkerSafeAttribute"/> class.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.Text.ISegmentableStringSource">
            <summary>
            Represents a string source which can be broken into instances of the <see cref="T:Ultraviolet.Core.Text.StringSegment"/> structure.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Text.ISegmentableStringSource.CreateStringSegment">
            <summary>
            Creates a <see cref="T:Ultraviolet.Core.Text.StringSegment"/> structure that represents this string source.
            </summary>
            <returns>The <see cref="T:Ultraviolet.Core.Text.StringSegment"/> that was created.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.ISegmentableStringSource.CreateStringSegmentFromSubstring(System.Int32,System.Int32)">
            <summary>
            Creates a <see cref="T:Ultraviolet.Core.Text.StringSegment"/> structure that represents a substring of
            this string source.
            </summary>
            <param name="start">The index of the first character in the substring that will 
            be represented by the string segment.</param>
            <param name="length">The length of the substring that will be represented by 
            the string segment.</param>
            <returns>The <see cref="T:Ultraviolet.Core.Text.StringSegment"/> that was created.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.ISegmentableStringSource.CreateStringSegmentFromSameOrigin(System.Int32,System.Int32)">
            <summary>
            Creates a <see cref="T:Ultraviolet.Core.Text.StringSegment"/> structure with the same origin as this 
            string source but a different character range. This method only differs from
            the <see cref="M:Ultraviolet.Core.Text.ISegmentableStringSource.CreateStringSegmentFromSubstring(System.Int32,System.Int32)"/> method if this
            string source represents a substring of some other, larger string.
            </summary>
            <param name="start">The index of the first character in the created segment.</param>
            <param name="length">The number of characters in the created segment.</param>
            <returns>The <see cref="T:Ultraviolet.Core.Text.StringSegment"/> structure that was created.</returns>
        </member>
        <member name="T:Ultraviolet.Core.Text.IStringSource`1">
            <summary>
            Represents a generic source of text characters.
            </summary>
            <typeparam name="TChar">The type of character which makes up this string.</typeparam>
        </member>
        <member name="M:Ultraviolet.Core.Text.IStringSource`1.GetChar(System.Int32,`0@)">
            <summary>
            Gets the character at the specified index within the string.
            If the character cannot be retrieved, an exception is thrown.
            </summary>
            <param name="index">The index of the character to retrieve.</param>
            <param name="ch">The character at the specified index within the string.</param>
        </member>
        <member name="P:Ultraviolet.Core.Text.IStringSource`1.Item(System.Int32)">
            <summary>
            Gets the character at the specified index within the string.
            </summary>
            <param name="index">The index of the character to retrieve.</param>
            <returns>The character at the specified index within the string.</returns>
        </member>
        <member name="P:Ultraviolet.Core.Text.IStringSource`1.Length">
            <summary>
            Gets the length of the string in characters.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Text.IStringSource`1.IsNull">
            <summary>
            Gets a value indicating whether this string source represents a null object.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Text.IStringSource`1.IsEmpty">
            <summary>
            Gets a value indicating whether this string source represents an empty string.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.Text.StringBuilderSource">
            <summary>
            Represents an <see cref="T:Ultraviolet.Core.Text.IStringSource`1"/> which encapsulates a <see cref="T:System.Text.StringBuilder"/> instance.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringBuilderSource.#ctor(System.Text.StringBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Text.StringBuilderSource"/> structure.
            </summary>
            <param name="str">The string builder which is encapsulated by this structure.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringBuilderSource.op_Implicit(System.Text.StringBuilder)~Ultraviolet.Core.Text.StringBuilderSource">
            <summary>
            Implicitly converts a <see cref="T:System.Text.StringBuilder"/> instance to a <see cref="T:Ultraviolet.Core.Text.StringBuilderSource"/> instance.
            </summary>
            <param name="str">The <see cref="T:System.Text.StringBuilder"/> instance to convert.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringBuilderSource.op_Explicit(Ultraviolet.Core.Text.StringBuilderSource)~System.Text.StringBuilder">
            <summary>
            Explicitly converts a <see cref="T:Ultraviolet.Core.Text.StringBuilderSource"/> instance to a <see cref="T:System.Text.StringBuilder"/> instance.
            </summary>
            <param name="src">The <see cref="T:Ultraviolet.Core.Text.StringBuilderSource"/> instance to convert.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringBuilderSource.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringBuilderSource.GetChar(System.Int32,System.Char@)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringBuilderSource.CreateStringSegment">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringBuilderSource.CreateStringSegmentFromSubstring(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringBuilderSource.CreateStringSegmentFromSameOrigin(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.Core.Text.StringBuilderSource.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.Core.Text.StringBuilderSource.Length">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.Core.Text.StringBuilderSource.IsNull">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.Core.Text.StringBuilderSource.IsEmpty">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringBuilderSource.op_Equality(Ultraviolet.Core.Text.StringBuilderSource,System.String)">
            <summary>
            Compares a <see cref="T:Ultraviolet.Core.Text.StringBuilderSource"/> instance with a <see cref="T:System.String"/> instance
            to determine whether they are equal; that is, whether the contain the same characters.
            </summary>
            <param name="ss">The <see cref="T:Ultraviolet.Core.Text.StringBuilderSource"/> instance to compare.</param>
            <param name="other">The <see cref="T:System.String"/> instance to compare.</param>
            <returns><see langword="true"/> if the instances are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringBuilderSource.op_Inequality(Ultraviolet.Core.Text.StringBuilderSource,System.String)">
            <summary>
            Compares a <see cref="T:Ultraviolet.Core.Text.StringBuilderSource"/> instance with a <see cref="T:System.String"/> instance
            to determine whether they are unequal; that is, whether they contain different characters.
            </summary>
            <param name="ss">The <see cref="T:Ultraviolet.Core.Text.StringBuilderSource"/> instance to compare.</param>
            <param name="other">The <see cref="T:System.String"/> instance to compare.</param>
            <returns><see langword="true"/> if the instances are unequal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringBuilderSource.op_Equality(System.String,Ultraviolet.Core.Text.StringBuilderSource)">
            <summary>
            Compares a <see cref="T:Ultraviolet.Core.Text.StringBuilderSource"/> instance with a <see cref="T:System.String"/> instance
            to determine whether they are equal; that is, whether the contain the same characters.
            </summary>
            <param name="str">The <see cref="T:System.String"/> instance to compare.</param>
            <param name="ss">The <see cref="T:Ultraviolet.Core.Text.StringBuilderSource"/> instance to compare.</param>
            <returns><see langword="true"/> if the instances are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringBuilderSource.op_Inequality(System.String,Ultraviolet.Core.Text.StringBuilderSource)">
            <summary>
            Compares a <see cref="T:Ultraviolet.Core.Text.StringBuilderSource"/> instance with a <see cref="T:System.String"/> instance
            to determine whether they are unequal; that is, whether they contain different characters.
            </summary>
            <param name="str">The <see cref="T:System.String"/> instance to compare.</param>
            <param name="ss">The <see cref="T:Ultraviolet.Core.Text.StringBuilderSource"/> instance to compare.</param>
            <returns><see langword="true"/> if the instances are unequal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringBuilderSource.op_Equality(Ultraviolet.Core.Text.StringBuilderSource,Ultraviolet.Core.Text.StringSource)">
            <summary>
            Compares a <see cref="T:Ultraviolet.Core.Text.StringBuilderSource"/> instance with a <see cref="T:Ultraviolet.Core.Text.StringSource"/> instance
            to determine whether they are equal; that is, whether the contain the same characters.
            </summary>
            <param name="ss">The <see cref="T:Ultraviolet.Core.Text.StringBuilderSource"/> instance to compare.</param>
            <param name="other">The <see cref="T:Ultraviolet.Core.Text.StringSource"/> instance to compare.</param>
            <returns><see langword="true"/> if the instances are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringBuilderSource.op_Inequality(Ultraviolet.Core.Text.StringBuilderSource,Ultraviolet.Core.Text.StringSource)">
            <summary>
            Compares a <see cref="T:Ultraviolet.Core.Text.StringBuilderSource"/> instance with a <see cref="T:Ultraviolet.Core.Text.StringSource"/> instance
            to determine whether they are unequal; that is, whether the contain different characters.
            </summary>
            <param name="ss">The <see cref="T:Ultraviolet.Core.Text.StringBuilderSource"/> instance to compare.</param>
            <param name="other">The <see cref="T:Ultraviolet.Core.Text.StringSource"/> instance to compare.</param>
            <returns><see langword="true"/> if the instances are unequal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringBuilderSource.op_Equality(Ultraviolet.Core.Text.StringBuilderSource,Ultraviolet.Core.Text.StringBuilderSource)">
            <summary>
            Compares a <see cref="T:Ultraviolet.Core.Text.StringBuilderSource"/> instance with a <see cref="T:Ultraviolet.Core.Text.StringBuilderSource"/> instance
            to determine whether they are equal; that is, whether the contain the same characters.
            </summary>
            <param name="ss">The <see cref="T:Ultraviolet.Core.Text.StringBuilderSource"/> instance to compare.</param>
            <param name="other">The <see cref="T:Ultraviolet.Core.Text.StringBuilderSource"/> instance to compare.</param>
            <returns><see langword="true"/> if the instances are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringBuilderSource.op_Inequality(Ultraviolet.Core.Text.StringBuilderSource,Ultraviolet.Core.Text.StringBuilderSource)">
            <summary>
            Compares a <see cref="T:Ultraviolet.Core.Text.StringBuilderSource"/> instance with a <see cref="T:Ultraviolet.Core.Text.StringBuilderSource"/> instance
            to determine whether they are unequal; that is, whether the contain different characters.
            </summary>
            <param name="ss">The <see cref="T:Ultraviolet.Core.Text.StringBuilderSource"/> instance to compare.</param>
            <param name="other">The <see cref="T:Ultraviolet.Core.Text.StringBuilderSource"/> instance to compare.</param>
            <returns><see langword="true"/> if the instances are unequal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringBuilderSource.op_Equality(Ultraviolet.Core.Text.StringBuilderSource,Ultraviolet.Core.Text.StringSegmentSource)">
            <summary>
            Compares a <see cref="T:Ultraviolet.Core.Text.StringBuilderSource"/> instance with a <see cref="T:Ultraviolet.Core.Text.StringSegmentSource"/> instance
            to determine whether they are equal; that is, whether the contain the same characters.
            </summary>
            <param name="ss">The <see cref="T:Ultraviolet.Core.Text.StringBuilderSource"/> instance to compare.</param>
            <param name="other">The <see cref="T:Ultraviolet.Core.Text.StringSegmentSource"/> instance to compare.</param>
            <returns><see langword="true"/> if the instances are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringBuilderSource.op_Inequality(Ultraviolet.Core.Text.StringBuilderSource,Ultraviolet.Core.Text.StringSegmentSource)">
            <summary>
            Compares a <see cref="T:Ultraviolet.Core.Text.StringBuilderSource"/> instance with a <see cref="T:Ultraviolet.Core.Text.StringSegmentSource"/> instance
            to determine whether they are unequal; that is, whether the contain different characters.
            </summary>
            <param name="ss">The <see cref="T:Ultraviolet.Core.Text.StringBuilderSource"/> instance to compare.</param>
            <param name="other">The <see cref="T:Ultraviolet.Core.Text.StringSegmentSource"/> instance to compare.</param>
            <returns><see langword="true"/> if the instances are unequal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringBuilderSource.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringBuilderSource.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringBuilderSource.Equals(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringBuilderSource.Equals(Ultraviolet.Core.Text.StringSource)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringBuilderSource.Equals(Ultraviolet.Core.Text.StringBuilderSource)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringBuilderSource.Equals(Ultraviolet.Core.Text.StringSegmentSource)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringBuilderSource.Equals(Ultraviolet.Core.Text.IStringSource{System.Char})">
            <inheritdoc/>
        </member>
        <member name="T:Ultraviolet.Core.Text.StringSegmentSource">
            <summary>
            Represents an <see cref="T:Ultraviolet.Core.Text.IStringSource`1"/> which encapsulates a <see cref="T:Ultraviolet.Core.Text.StringSegment"/> instance.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSegmentSource.#ctor(Ultraviolet.Core.Text.StringSegment)">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Text.StringSegmentSource"/> structure.
            </summary>
            <param name="str">The string segment which is encapsulated by this structure.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSegmentSource.op_Implicit(Ultraviolet.Core.Text.StringSegment)~Ultraviolet.Core.Text.StringSegmentSource">
            <summary>
            Implicitly converts a <see cref="T:Ultraviolet.Core.Text.StringSegment"/> instance to a <see cref="T:Ultraviolet.Core.Text.StringSegmentSource"/> instance.
            </summary>
            <param name="str">The <see cref="T:Ultraviolet.Core.Text.StringSegment"/> instance to convert.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSegmentSource.op_Explicit(Ultraviolet.Core.Text.StringSegmentSource)~Ultraviolet.Core.Text.StringSegment">
            <summary>
            Explicitly converts a <see cref="T:Ultraviolet.Core.Text.StringSegmentSource"/> instance to a <see cref="T:Ultraviolet.Core.Text.StringSegment"/> instance.
            </summary>
            <param name="src">The <see cref="T:Ultraviolet.Core.Text.StringSegmentSource"/> instance to convert.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSegmentSource.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSegmentSource.GetChar(System.Int32,System.Char@)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSegmentSource.CreateStringSegment">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSegmentSource.CreateStringSegmentFromSubstring(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSegmentSource.CreateStringSegmentFromSameOrigin(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.Core.Text.StringSegmentSource.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.Core.Text.StringSegmentSource.Length">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.Core.Text.StringSegmentSource.IsNull">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.Core.Text.StringSegmentSource.IsEmpty">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSegmentSource.op_Equality(Ultraviolet.Core.Text.StringSegmentSource,System.String)">
            <summary>
            Compares a <see cref="T:Ultraviolet.Core.Text.StringSegmentSource"/> instance with a <see cref="T:System.String"/> instance
            to determine whether they are equal; that is, whether the contain the same characters.
            </summary>
            <param name="ss">The <see cref="T:Ultraviolet.Core.Text.StringSegmentSource"/> instance to compare.</param>
            <param name="other">The <see cref="T:System.String"/> instance to compare.</param>
            <returns><see langword="true"/> if the instances are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSegmentSource.op_Inequality(Ultraviolet.Core.Text.StringSegmentSource,System.String)">
            <summary>
            Compares a <see cref="T:Ultraviolet.Core.Text.StringSegmentSource"/> instance with a <see cref="T:System.String"/> instance
            to determine whether they are unequal; that is, whether they contain different characters.
            </summary>
            <param name="ss">The <see cref="T:Ultraviolet.Core.Text.StringSegmentSource"/> instance to compare.</param>
            <param name="other">The <see cref="T:System.String"/> instance to compare.</param>
            <returns><see langword="true"/> if the instances are unequal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSegmentSource.op_Equality(System.String,Ultraviolet.Core.Text.StringSegmentSource)">
            <summary>
            Compares a <see cref="T:System.String"/> instance with a <see cref="T:Ultraviolet.Core.Text.StringSegmentSource"/> instance
            to determine whether they are equal; that is, whether the contain the same characters.
            </summary>
            <param name="str">The <see cref="T:System.String"/> instance to compare.</param>
            <param name="ss">The <see cref="T:Ultraviolet.Core.Text.StringSegmentSource"/> instance to compare.</param>
            <returns><see langword="true"/> if the instances are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSegmentSource.op_Inequality(System.String,Ultraviolet.Core.Text.StringSegmentSource)">
            <summary>
            Compares a <see cref="T:System.String"/> instance with a <see cref="T:Ultraviolet.Core.Text.StringSegmentSource"/> instance
            to determine whether they are unequal; that is, whether they contain different characters.
            </summary>
            <param name="str">The <see cref="T:System.String"/> instance to compare.</param>
            <param name="ss">The <see cref="T:Ultraviolet.Core.Text.StringSegmentSource"/> instance to compare.</param>
            <returns><see langword="true"/> if the instances are unequal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSegmentSource.op_Equality(Ultraviolet.Core.Text.StringSegmentSource,Ultraviolet.Core.Text.StringSource)">
            <summary>
            Compares a <see cref="T:Ultraviolet.Core.Text.StringSegmentSource"/> instance with a <see cref="T:Ultraviolet.Core.Text.StringSource"/> instance
            to determine whether they are equal; that is, whether the contain the same characters.
            </summary>
            <param name="ss">The <see cref="T:Ultraviolet.Core.Text.StringSegmentSource"/> instance to compare.</param>
            <param name="other">The <see cref="T:Ultraviolet.Core.Text.StringSource"/> instance to compare.</param>
            <returns><see langword="true"/> if the instances are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSegmentSource.op_Inequality(Ultraviolet.Core.Text.StringSegmentSource,Ultraviolet.Core.Text.StringSource)">
            <summary>
            Compares a <see cref="T:Ultraviolet.Core.Text.StringSegmentSource"/> instance with a <see cref="T:Ultraviolet.Core.Text.StringSource"/> instance
            to determine whether they are unequal; that is, whether the contain different characters.
            </summary>
            <param name="ss">The <see cref="T:Ultraviolet.Core.Text.StringSegmentSource"/> instance to compare.</param>
            <param name="other">The <see cref="T:Ultraviolet.Core.Text.StringSource"/> instance to compare.</param>
            <returns><see langword="true"/> if the instances are unequal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSegmentSource.op_Equality(Ultraviolet.Core.Text.StringSegmentSource,Ultraviolet.Core.Text.StringBuilderSource)">
            <summary>
            Compares a <see cref="T:Ultraviolet.Core.Text.StringSegmentSource"/> instance with a <see cref="T:Ultraviolet.Core.Text.StringBuilderSource"/> instance
            to determine whether they are equal; that is, whether the contain the same characters.
            </summary>
            <param name="ss">The <see cref="T:Ultraviolet.Core.Text.StringSegmentSource"/> instance to compare.</param>
            <param name="other">The <see cref="T:Ultraviolet.Core.Text.StringBuilderSource"/> instance to compare.</param>
            <returns><see langword="true"/> if the instances are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSegmentSource.op_Inequality(Ultraviolet.Core.Text.StringSegmentSource,Ultraviolet.Core.Text.StringBuilderSource)">
            <summary>
            Compares a <see cref="T:Ultraviolet.Core.Text.StringSegmentSource"/> instance with a <see cref="T:Ultraviolet.Core.Text.StringBuilderSource"/> instance
            to determine whether they are unequal; that is, whether the contain different characters.
            </summary>
            <param name="ss">The <see cref="T:Ultraviolet.Core.Text.StringSegmentSource"/> instance to compare.</param>
            <param name="other">The <see cref="T:Ultraviolet.Core.Text.StringBuilderSource"/> instance to compare.</param>
            <returns><see langword="true"/> if the instances are unequal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSegmentSource.op_Equality(Ultraviolet.Core.Text.StringSegmentSource,Ultraviolet.Core.Text.StringSegmentSource)">
            <summary>
            Compares a <see cref="T:Ultraviolet.Core.Text.StringSegmentSource"/> instance with a <see cref="T:Ultraviolet.Core.Text.StringSegmentSource"/> instance
            to determine whether they are equal; that is, whether the contain the same characters.
            </summary>
            <param name="ss">The <see cref="T:Ultraviolet.Core.Text.StringSegmentSource"/> instance to compare.</param>
            <param name="other">The <see cref="T:Ultraviolet.Core.Text.StringSegmentSource"/> instance to compare.</param>
            <returns><see langword="true"/> if the instances are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSegmentSource.op_Inequality(Ultraviolet.Core.Text.StringSegmentSource,Ultraviolet.Core.Text.StringSegmentSource)">
            <summary>
            Compares a <see cref="T:Ultraviolet.Core.Text.StringSegmentSource"/> instance with a <see cref="T:Ultraviolet.Core.Text.StringSegmentSource"/> instance
            to determine whether they are unequal; that is, whether the contain different characters.
            </summary>
            <param name="ss">The <see cref="T:Ultraviolet.Core.Text.StringSegmentSource"/> instance to compare.</param>
            <param name="other">The <see cref="T:Ultraviolet.Core.Text.StringSegmentSource"/> instance to compare.</param>
            <returns><see langword="true"/> if the instances are unequal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSegmentSource.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSegmentSource.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSegmentSource.Equals(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSegmentSource.Equals(Ultraviolet.Core.Text.StringSource)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSegmentSource.Equals(Ultraviolet.Core.Text.StringBuilderSource)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSegmentSource.Equals(Ultraviolet.Core.Text.StringSegmentSource)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSegmentSource.Equals(Ultraviolet.Core.Text.IStringSource{System.Char})">
            <inheritdoc/>
        </member>
        <member name="T:Ultraviolet.Core.Text.StringSource">
            <summary>
            Represents an <see cref="T:Ultraviolet.Core.Text.IStringSource`1"/> which encapsulates a <see cref="T:System.String"/> instance.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSource.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Text.StringSource"/> structure.
            </summary>
            <param name="str">The string which is encapsulated by this structure.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSource.op_Implicit(System.String)~Ultraviolet.Core.Text.StringSource">
            <summary>
            Implicitly converts a <see cref="T:System.String"/> instance to a <see cref="T:Ultraviolet.Core.Text.StringSource"/> instance.
            </summary>
            <param name="str">The <see cref="T:System.String"/> instance to convert.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSource.op_Explicit(Ultraviolet.Core.Text.StringSource)~System.String">
            <summary>
            Explicitly converts a <see cref="T:Ultraviolet.Core.Text.StringSource"/> instance to a <see cref="T:System.String"/> instance.
            </summary>
            <param name="src">The <see cref="T:Ultraviolet.Core.Text.StringSource"/> instance to convert.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSource.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSource.GetChar(System.Int32,System.Char@)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSource.CreateStringSegment">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSource.CreateStringSegmentFromSubstring(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSource.CreateStringSegmentFromSameOrigin(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.Core.Text.StringSource.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.Core.Text.StringSource.Length">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.Core.Text.StringSource.IsNull">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.Core.Text.StringSource.IsEmpty">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSource.op_Equality(Ultraviolet.Core.Text.StringSource,System.String)">
            <summary>
            Compares a <see cref="T:Ultraviolet.Core.Text.StringSource"/> instance with a <see cref="T:System.String"/> instance
            to determine whether they are equal; that is, whether the contain the same characters.
            </summary>
            <param name="ss">The <see cref="T:Ultraviolet.Core.Text.StringSource"/> instance to compare.</param>
            <param name="other">The <see cref="T:System.String"/> instance to compare.</param>
            <returns><see langword="true"/> if the instances are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSource.op_Inequality(Ultraviolet.Core.Text.StringSource,System.String)">
            <summary>
            Compares a <see cref="T:Ultraviolet.Core.Text.StringSource"/> instance with a <see cref="T:System.String"/> instance
            to determine whether they are unequal; that is, whether they contain different characters.
            </summary>
            <param name="ss">The <see cref="T:Ultraviolet.Core.Text.StringSource"/> instance to compare.</param>
            <param name="other">The <see cref="T:System.String"/> instance to compare.</param>
            <returns><see langword="true"/> if the instances are unequal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSource.op_Equality(System.String,Ultraviolet.Core.Text.StringSource)">
            <summary>
            Compares a <see cref="T:System.String"/> instance with a <see cref="T:Ultraviolet.Core.Text.StringSource"/> instance
            to determine whether they are equal; that is, whether the contain the same characters.
            </summary>
            <param name="str">The <see cref="T:System.String"/> instance to compare.</param>
            <param name="ss">The <see cref="T:Ultraviolet.Core.Text.StringSource"/> instance to compare.</param>
            <returns><see langword="true"/> if the instances are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSource.op_Inequality(System.String,Ultraviolet.Core.Text.StringSource)">
            <summary>
            Compares a <see cref="T:System.String"/> instance with a <see cref="T:Ultraviolet.Core.Text.StringSource"/> instance
            to determine whether they are unequal; that is, whether they contain different characters.
            </summary>
            <param name="str">The <see cref="T:System.String"/> instance to compare.</param>
            <param name="ss">The <see cref="T:Ultraviolet.Core.Text.StringSource"/> instance to compare.</param>
            <returns><see langword="true"/> if the instances are unequal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSource.op_Equality(Ultraviolet.Core.Text.StringSource,Ultraviolet.Core.Text.StringSource)">
            <summary>
            Compares a <see cref="T:Ultraviolet.Core.Text.StringSource"/> instance with a <see cref="T:Ultraviolet.Core.Text.StringSource"/> instance
            to determine whether they are equal; that is, whether the contain the same characters.
            </summary>
            <param name="ss">The <see cref="T:Ultraviolet.Core.Text.StringSource"/> instance to compare.</param>
            <param name="other">The <see cref="T:Ultraviolet.Core.Text.StringSource"/> instance to compare.</param>
            <returns><see langword="true"/> if the instances are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSource.op_Inequality(Ultraviolet.Core.Text.StringSource,Ultraviolet.Core.Text.StringSource)">
            <summary>
            Compares a <see cref="T:Ultraviolet.Core.Text.StringSource"/> instance with a <see cref="T:Ultraviolet.Core.Text.StringSource"/> instance
            to determine whether they are unequal; that is, whether the contain different characters.
            </summary>
            <param name="ss">The <see cref="T:Ultraviolet.Core.Text.StringSource"/> instance to compare.</param>
            <param name="other">The <see cref="T:Ultraviolet.Core.Text.StringSource"/> instance to compare.</param>
            <returns><see langword="true"/> if the instances are unequal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSource.op_Equality(Ultraviolet.Core.Text.StringSource,Ultraviolet.Core.Text.StringBuilderSource)">
            <summary>
            Compares a <see cref="T:Ultraviolet.Core.Text.StringSource"/> instance with a <see cref="T:Ultraviolet.Core.Text.StringBuilderSource"/> instance
            to determine whether they are equal; that is, whether the contain the same characters.
            </summary>
            <param name="ss">The <see cref="T:Ultraviolet.Core.Text.StringSource"/> instance to compare.</param>
            <param name="other">The <see cref="T:Ultraviolet.Core.Text.StringBuilderSource"/> instance to compare.</param>
            <returns><see langword="true"/> if the instances are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSource.op_Inequality(Ultraviolet.Core.Text.StringSource,Ultraviolet.Core.Text.StringBuilderSource)">
            <summary>
            Compares a <see cref="T:Ultraviolet.Core.Text.StringSource"/> instance with a <see cref="T:Ultraviolet.Core.Text.StringBuilderSource"/> instance
            to determine whether they are unequal; that is, whether the contain different characters.
            </summary>
            <param name="ss">The <see cref="T:Ultraviolet.Core.Text.StringSource"/> instance to compare.</param>
            <param name="other">The <see cref="T:Ultraviolet.Core.Text.StringBuilderSource"/> instance to compare.</param>
            <returns><see langword="true"/> if the instances are unequal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSource.op_Equality(Ultraviolet.Core.Text.StringSource,Ultraviolet.Core.Text.StringSegmentSource)">
            <summary>
            Compares a <see cref="T:Ultraviolet.Core.Text.StringSource"/> instance with a <see cref="T:Ultraviolet.Core.Text.StringSegmentSource"/> instance
            to determine whether they are equal; that is, whether the contain the same characters.
            </summary>
            <param name="ss">The <see cref="T:Ultraviolet.Core.Text.StringSource"/> instance to compare.</param>
            <param name="other">The <see cref="T:Ultraviolet.Core.Text.StringSegmentSource"/> instance to compare.</param>
            <returns><see langword="true"/> if the instances are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSource.op_Inequality(Ultraviolet.Core.Text.StringSource,Ultraviolet.Core.Text.StringSegmentSource)">
            <summary>
            Compares a <see cref="T:Ultraviolet.Core.Text.StringSource"/> instance with a <see cref="T:Ultraviolet.Core.Text.StringSegmentSource"/> instance
            to determine whether they are unequal; that is, whether the contain different characters.
            </summary>
            <param name="ss">The <see cref="T:Ultraviolet.Core.Text.StringSource"/> instance to compare.</param>
            <param name="other">The <see cref="T:Ultraviolet.Core.Text.StringSegmentSource"/> instance to compare.</param>
            <returns><see langword="true"/> if the instances are unequal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSource.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSource.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSource.Equals(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSource.Equals(Ultraviolet.Core.Text.StringSource)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSource.Equals(Ultraviolet.Core.Text.StringBuilderSource)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSource.Equals(Ultraviolet.Core.Text.StringSegmentSource)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSource.Equals(Ultraviolet.Core.Text.IStringSource{System.Char})">
            <inheritdoc/>
        </member>
        <member name="T:Ultraviolet.Core.Text.StringSourceEquality">
            <summary>
            Contains methods for equality comparisons between string sources.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSourceEquality.Equals``2(``0,``1)">
            <summary>
            Compares two string sources for equality.
            </summary>
            <typeparam name="TSource1">The type of the first string source to compare.</typeparam>
            <typeparam name="TSource2">The type of the second string source to compare.</typeparam>
            <param name="s1">The first string source to compare.</param>
            <param name="s2">The second string source to compare.</param>
            <returns><see langword="true"/> if the string sources are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Ultraviolet.Core.Text.ILocalizationPlugin">
            <summary>
            Represents a plugin for the Ultraviolet localization system.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Text.ILocalizationPlugin.GetPluralityEvaluators">
            <summary>
            Gets the plurality evaluators provided by this plugin.
            Plurality groups are used to categorize words by quantity. In English, there is only a singular (one)
            and a plural (many) group, but in some languages there are more.
            </summary>
            <returns>The collection of plurality group evaluators provided by this plugin.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.ILocalizationPlugin.GetMatchEvaluators">
            <summary>
            Gets the match evaluators provided by this plugin.
            Match evaluators are used to make words "agree" with one another. For example, the French language
            rules include a match evaluator called 'Def_art' which evaluates to either Les, Le, La, or L' depending on
            the word being matched.
            </summary>
            <returns>The collection of match evaluators provided by this plugin.</returns>
        </member>
        <member name="P:Ultraviolet.Core.Text.ILocalizationPlugin.Language">
            <summary>
            Gets the two-letter language code of the language provided by this plugin. Only one of <see cref="P:Ultraviolet.Core.Text.ILocalizationPlugin.Culture"/> and <see cref="P:Ultraviolet.Core.Text.ILocalizationPlugin.Language"/>
            should have a non-null value; if both are non-null, then <see cref="P:Ultraviolet.Core.Text.ILocalizationPlugin.Culture"/> takes precedence.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Text.ILocalizationPlugin.Culture">
            <summary>
            Gets the culture code of the culture provided by this plugin. Only one of <see cref="P:Ultraviolet.Core.Text.ILocalizationPlugin.Culture"/> and <see cref="P:Ultraviolet.Core.Text.ILocalizationPlugin.Language"/>
            should have a non-null value; if both are non-null, then <see cref="P:Ultraviolet.Core.Text.ILocalizationPlugin.Culture"/> takes precedence.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.Text.LocalizationPluralityEvaluator">
            <summary>
            Represents a method which is used to determine the plurality group associated with a specified quantity.
            </summary>
            <param name="source">The localized string which is being pluralized.</param>
            <param name="quantity">The quantity for which to determine a plurality group.</param>
            <returns>The name of the plurality group associated with the specified quantity.</returns>
        </member>
        <member name="T:Ultraviolet.Core.Text.LocalizationMatchEvaluator">
            <summary>
            Represents a method which is used to determine which of the specified source string's variants
            is the best match for the specified target variant.
            </summary>
            <param name="source">The source string from which to retrieve a variant.</param>
            <param name="target">The target string to match.</param>
            <returns>The variant of the source string that is the best match for the specified target variant.</returns>
        </member>
        <member name="T:Ultraviolet.Core.Text.Localization">
            <summary>
            Contains methods for managing the application's localized string tables.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Text.Localization.#cctor">
            <summary>
            Initializes the <see cref="T:Ultraviolet.Core.Text.Localization"/> type.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Text.Localization.LoadPlugins(System.Reflection.Assembly)">
            <summary>
            Loads any localization plugins defined in the specified assembly.
            </summary>
            <param name="asm">The assembly that contains the plugins to load.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.Localization.LoadPlugin(Ultraviolet.Core.Text.ILocalizationPlugin)">
            <summary>
            Loads the specified localization plugin.
            </summary>
            <param name="plugin">The localization plugin to load.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.Localization.RegisterPluralityEvaluatorForCulture(System.String,Ultraviolet.Core.Text.LocalizationPluralityEvaluator)">
            <summary>
            Registers a plurality evaluator function for the specified culture. Plurality evaluators are used to determine 
            which string variant to use for a given quantity of items.
            </summary>
            <param name="culture">The culture for which to register a plurality evaluator.</param>
            <param name="evaluator">The evaluator to register.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.Localization.RegisterMatchEvaluatorForCulture(System.String,System.String,Ultraviolet.Core.Text.LocalizationMatchEvaluator)">
            <summary>
            Registers a match evaluator function for the specified culture. Match evaluators are used to determine 
            how to make a localized string match another string variant.
            </summary>
            <param name="culture">The culture for which to register a match evaluator.</param>
            <param name="name">The evaluator's unique name.</param>
            <param name="evaluator">The evaluator to register.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.Localization.RegisterPluralityEvaluatorForLanguage(System.String,Ultraviolet.Core.Text.LocalizationPluralityEvaluator)">
            <summary>
            Registers a plurality evaluator function for the specified language. Plurality evaluators are used to determine 
            which string variant to use for a given quantity of items.
            </summary>
            <param name="language">The language for which to register a plurality evaluator.</param>
            <param name="evaluator">The evaluator to register.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.Localization.RegisterMatchEvaluatorForLanguage(System.String,System.String,Ultraviolet.Core.Text.LocalizationMatchEvaluator)">
            <summary>
            Registers a match evaluator function for the specified language. Match evaluators are used to determine 
            how to make a localized string match another string variant.
            </summary>
            <param name="language">The language for which to register a match evaluator.</param>
            <param name="name">The evaluator's unique name.</param>
            <param name="evaluator">The evaluator to register.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.Localization.ResetPluralityEvaluators">
            <summary>
            Removes all registered plurality evaluators and restores the defaults.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Text.Localization.ResetMatchEvaluators">
            <summary>
            Removes all registered match evaluators and restores the defaults.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Text.Localization.GetPluralityGroup(System.String,Ultraviolet.Core.Text.LocalizedString,System.Int32)">
            <summary>
            Gets the plurality group associated with the specified culture and quantity.
            </summary>
            <param name="culture">The culture for which to evaluate a plurality group.</param>
            <param name="source">The localized string which is being pluralized.</param>
            <param name="quantity">The quantity for which to evaluate a plurality group.</param>
            <returns>The plurality group associated with the specified culture and quantity.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.Localization.GetPluralityGroup(System.String,System.String,Ultraviolet.Core.Text.LocalizedString,System.Int32)">
            <summary>
            Gets the plurality group associated with the specified culture and quantity.
            </summary>
            <param name="culture">The culture for which to evaluate a plurality group.</param>
            <param name="language">The language for which to evaluate a plurality group, if no culture match is found.</param>
            <param name="source">The localized string which is being pluralized.</param>
            <param name="quantity">The quantity for which to evaluate a plurality group.</param>
            <returns>The plurality group associated with the specified culture and quantity.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.Localization.GetPluralityGroup(Ultraviolet.Core.Text.LocalizedString,System.Int32)">
            <summary>
            Gets the plurality group associated with the current culture and the specified quantity.
            </summary>
            <param name="source">The localized string which is being pluralized.</param>
            <param name="count">The quantity for which to evaluate a plurality group.</param>
            <returns>The plurality group associated with the current culture and the specified quantity.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.Localization.MatchVariant(Ultraviolet.Core.Text.LocalizedString,Ultraviolet.Core.Text.LocalizedStringVariant,System.String)">
            <summary>
            Matches a source string to a target variant according to the current culture and the specified rule.
            </summary>
            <param name="source">The source string.</param>
            <param name="target">The target string.</param>
            <param name="rule">The rule which defines how to perform the match.</param>
            <returns>The variant of <paramref name="source"/> which is the best match for <paramref name="target"/> according to the specified rule.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.Localization.MatchVariant(System.String,Ultraviolet.Core.Text.LocalizedString,Ultraviolet.Core.Text.LocalizedStringVariant,System.String)">
            <summary>
            Matches a source string to a target variant according to the specified culture and rule.
            </summary>
            <param name="culture">The culture for which to perform the match.</param>
            <param name="source">The source string.</param>
            <param name="target">The target string.</param>
            <param name="rule">The rule which defines how to perform the match.</param>
            <returns>The variant of <paramref name="source"/> which is the best match for <paramref name="target"/> according to the specified rule.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.Localization.MatchVariant(System.String,System.String,Ultraviolet.Core.Text.LocalizedString,Ultraviolet.Core.Text.LocalizedStringVariant,System.String)">
            <summary>
            Matches a source string to a target variant according to the specified culture and rule.
            </summary>
            <param name="culture">The culture for which to perform the match.</param>
            <param name="language">The language for which to perform the match, if no culture match is found.</param>
            <param name="source">The source string.</param>
            <param name="target">The target string.</param>
            <param name="rule">The rule which defines how to perform the match.</param>
            <returns>The variant of <paramref name="source"/> which is the best match for <paramref name="target"/> according to the specified rule.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.Localization.MatchVariant(Ultraviolet.Core.Text.LocalizedString,Ultraviolet.Core.Text.LocalizedStringVariant,Ultraviolet.Core.Text.StringSegment)">
            <summary>
            Matches a source string to a target variant according to the current culture and the specified rule.
            </summary>
            <param name="source">The source string.</param>
            <param name="target">The target string.</param>
            <param name="rule">The rule which defines how to perform the match.</param>
            <returns>The variant of <paramref name="source"/> which is the best match for <paramref name="target"/> according to the specified rule.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.Localization.MatchVariant(System.String,Ultraviolet.Core.Text.LocalizedString,Ultraviolet.Core.Text.LocalizedStringVariant,Ultraviolet.Core.Text.StringSegment)">
            <summary>
            Matches a source string to a target variant according to the specified culture and rule.
            </summary>
            <param name="culture">The culture for which to perform the match.</param>
            <param name="source">The source string.</param>
            <param name="target">The target string.</param>
            <param name="rule">The rule which defines how to perform the match.</param>
            <returns>The variant of <paramref name="source"/> which is the best match for <paramref name="target"/> according to the specified rule.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.Localization.MatchVariant(System.String,System.String,Ultraviolet.Core.Text.LocalizedString,Ultraviolet.Core.Text.LocalizedStringVariant,Ultraviolet.Core.Text.StringSegment)">
            <summary>
            Matches a source string to a target variant according to the specified culture and rule.
            </summary>
            <param name="culture">The culture for which to perform the match.</param>
            <param name="language">The language for which to perform the match, if no culture match is found.</param>
            <param name="source">The source string.</param>
            <param name="target">The target string.</param>
            <param name="rule">The rule which defines how to perform the match.</param>
            <returns>The variant of <paramref name="source"/> which is the best match for <paramref name="target"/> according to the specified rule.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.Localization.Get(System.String,System.String)">
            <summary>
            Retrieves the string with the specified key from the specified culture.
            </summary>
            <param name="culture">The culture from which to retrieve the string.</param>
            <param name="key">The localization key of the string to retrieve.</param>
            <returns>The <see cref="T:Ultraviolet.Core.Text.LocalizedString"/> that was retrieved.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.Localization.Get(System.String)">
            <summary>
            Retrieves the string with the specified key from the current culture.
            </summary>
            <param name="key">The localization key of the string to retrieve.</param>
            <returns>The <see cref="T:Ultraviolet.Core.Text.LocalizedString"/> that was retrieved.</returns>
        </member>
        <member name="P:Ultraviolet.Core.Text.Localization.Strings">
            <summary>
            Gets the application's default localization database.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Text.Localization.CurrentCulture">
            <summary>
            Gets or sets the current culture.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Text.Localization.CurrentLanguage">
            <summary>
            Gets the language code associated with the current culture.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Text.Localization.CurrentCultureDisplayName">
            <summary>
            Gets the display name of the current culture.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Text.Localization.PseudolocalizedCulture">
            <summary>
            Gets the culture code associated with the pseudolocalized culture.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Text.Localization.RegisterStandardPluralityEvaluators">
            <summary>
            Registers the localization system's standard plural group evaluators.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Text.Localization.RegisterStandardMatchEvaluators">
            <summary>
            Registers the localization system's standard match evaluators.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Text.Localization.MatchVariantInternal(System.String,System.String,Ultraviolet.Core.Text.LocalizedString,Ultraviolet.Core.Text.LocalizedStringVariant,System.String)">
            <summary>
            Matches a source string to a target variant according to the specified culture and rule.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Text.Localization.MatchVariantInternal(System.String,System.String,Ultraviolet.Core.Text.LocalizedString,Ultraviolet.Core.Text.LocalizedStringVariant,Ultraviolet.Core.Text.StringSegment)">
            <summary>
            Matches a source string to a target variant according to the specified culture and rule.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.Text.LocalizationDatabase">
            <summary>
            Represents a database of localized strings.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Text.LocalizationDatabase.IsCultureLoaded(System.String)">
            <summary>
            Gets a value indicating whether the database contains entries for the specified culture.
            </summary>
            <param name="culture">The culture to evaluate.</param>
            <returns><see langword="true"/> if the database contains entries for the specified culture; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.LocalizationDatabase.EnumerateStrings">
            <summary>
            Enumerates all of the strings belonging to the current culture.
            </summary>
            <returns>A collection of strings belonging to the current culture.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.LocalizationDatabase.EnumerateCultureStrings(System.String)">
            <summary>
            Enumerates all of the strings belonging to the specified culture.
            </summary>
            <param name="culture">The culture for which to enumerate strings.</param>
            <returns>A collection of strings belonging to the specified culture.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.LocalizationDatabase.LoadFromStream(System.IO.Stream)">
            <summary>
            Loads localization data from the specified XML stream. Loaded strings
            will overwrite any previously loaded strings that share the same key.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> from which to load localization data.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.LocalizationDatabase.LoadFromXmlStream(System.IO.Stream)">
            <summary>
            Loads localization data from the specified XML stream. Loaded strings
            will overwrite any previously loaded strings that share the same key.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> from which to load localization data.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.LocalizationDatabase.LoadFromJsonStream(System.IO.Stream)">
            <summary>
            Loads localization data from the specified JSON stream. Loaded strings
            will overwrite any previously loaded strings that share the same key.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> from which to load localization data.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.LocalizationDatabase.LoadFromFile(System.String[])">
            <summary>
            Loads localization data from the specified file. Loaded strings
            will overwrite any previously loaded strings that share the same key.
            </summary>
            <param name="paths">An array containing the parts of the path to the file from which to load localization data.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.LocalizationDatabase.LoadFromFile(System.String)">
            <summary>
            Loads localization data from the specified file. Loaded strings
            will overwrite any previously loaded strings that share the same key.
            </summary>
            <param name="path">The path to the file from which to load localization data.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.LocalizationDatabase.LoadFromDirectory(System.String[])">
            <summary>
            Loads localization data from any XML files found in the specified directory. Loaded strings
            will overwrite any previously loaded strings that share the same key.
            </summary>
            <param name="paths">An array containing the parts of the path to the directory from which to load localization data.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.LocalizationDatabase.LoadFromDirectory(System.String)">
            <summary>
            Loads localization data from any XML files found in the specified directory. Loaded strings
            will overwrite any previously loaded strings that share the same key.
            </summary>
            <param name="path">The path to the directory from which to load localization data.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.LocalizationDatabase.Unload">
            <summary>
            Removes all of the database's entries.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Text.LocalizationDatabase.UnloadCulture(System.String)">
            <summary>
            Removes all of the database's entries for the specified culture.
            </summary>
            <param name="culture">The culture for which to remove entries.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.LocalizationDatabase.CreatePseudolocale">
            <summary>
            Creates a pseudolocale for this database.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Text.LocalizationDatabase.Contains(System.String)">
            <summary>
            Gets a value indicating whether the database contains a string with the specified key for the current culture.
            </summary>
            <param name="key">The localization key for which to search.</param>
            <returns><see langword="true"/> if the database contains a string with the specified key for the current culture; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.LocalizationDatabase.Contains(System.String,System.String)">
            <summary>
            Gets a value indicating whether the database contains a string with the specified key for the specified culture.
            </summary>
            <param name="culture">The culture to evaluate.</param>
            <param name="key">The localization key for which to search.</param>
            <returns><see langword="true"/> if the database contains a string with the specified key for the specified culture; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.LocalizationDatabase.Get(System.String,System.String)">
            <summary>
            Retrieves the string with the specified key from the specified culture.
            </summary>
            <param name="culture">The culture from which to retrieve the string.</param>
            <param name="key">The localization key of the string to retrieve.</param>
            <returns>The string that was retrieved.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.LocalizationDatabase.Get(System.String)">
            <summary>
            Retrieves the string with the specified key from the current culture.
            </summary>
            <param name="key">The localization key of the string to retrieve.</param>
            <returns>The string that was retrieved.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.LocalizationDatabase.GetFallbackCulture(System.String)">
            <summary>
            Gets the culture which is currently being used as the fallback for the specified culture.
            </summary>
            <param name="culture">The culture for which to find a fallback culture.</param>
            <returns>The culture which is currently being used as the fallback for the specified
            culture, or <see langword="null"/> if the culture does not have a fallback.</returns>
        </member>
        <member name="P:Ultraviolet.Core.Text.LocalizationDatabase.StringCount">
            <summary>
            Gets the number of strings defined in this database.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Text.LocalizationDatabase.GetCultureStrings(System.String)">
            <summary>
            Gets the string database for the specified culture.
            </summary>
            <param name="culture">The culture for which to retrieve a string database.</param>
            <returns>The string database for the specified culture, or the en-US database if that culture doesn't exist.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.LocalizationDatabase.InvalidateFallbackCulture(System.String)">
            <summary>
            Invalidates the fallback culture for the specified culture.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Text.LocalizationDatabase.InvalidateFallbackCultures">
            <summary>
            Invalidates all known fallback cultures.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.Text.LocalizedString">
            <summary>
            Represents a localized string.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Text.LocalizedString.GetEnumerator">
            <summary>
            Gets an enumerator for the collection.
            </summary>
            <returns>An enumerator for the collection.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.LocalizedString.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,Ultraviolet#Core#Text#LocalizedStringVariant}}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Text.LocalizedString.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Text.LocalizedString.#ctor(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Text.LocalizedString"/> class.
            </summary>
            <param name="culture">The string's associated culture.</param>
            <param name="key">The string's localization key.</param>
            <param name="html">A value indicating whether the string contains HTML encoded characters.</param>
            <param name="nopseudo">A value indicating whether pseudolocalization is disabled for this string.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.LocalizedString.op_Implicit(Ultraviolet.Core.Text.LocalizedString)~System.String">
            <summary>
            Implicitly converts a localized string to a string.
            </summary>
            <param name="str">The localized string to convert.</param>
            <returns>The string to which the localized string was converted.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.LocalizedString.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Text.LocalizedString.HasProperty(System.String)">
            <summary>
            Gets a value indicating whether the string has the specified property.
            </summary>
            <param name="prop">The name of the property to evaluate.</param>
            <returns><see langword="true"/> if the string has the specified property; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.LocalizedString.HasProperty(Ultraviolet.Core.Text.StringSegment)">
            <summary>
            Gets a value indicating whether the string has the specified property.
            </summary>
            <param name="prop">The name of the property to evaluate.</param>
            <returns><see langword="true"/> if the string has the specified property; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.LocalizedString.HasPropertyRef(Ultraviolet.Core.Text.StringSegment@)">
            <summary>
            Gets a value indicating whether the string has the specified property.
            </summary>
            <param name="prop">The name of the property to evaluate.</param>
            <returns><see langword="true"/> if the string has the specified property; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.LocalizedString.GetVariant(Ultraviolet.Core.Text.StringSegment@)">
            <summary>
            Gets the specified string variant.
            </summary>
            <param name="group">The name of the variant group of the variant to retrieve.</param>
            <returns>The specified string variant.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.LocalizedString.GetVariant(System.String)">
            <summary>
            Gets the specified string variant.
            </summary>
            <param name="group">The name of the variant group of the variant to retrieve.</param>
            <returns>The specified string variant.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.LocalizedString.GetPluralVariant(System.Int32)">
            <summary>
            Gets the plural variant of this string that corresponds to the specified count.
            </summary>
            <param name="count">The number of objects.</param>
            <returns>The plural variant of this string that corresponds to the specified count.</returns>
        </member>
        <member name="P:Ultraviolet.Core.Text.LocalizedString.Culture">
            <summary>
            Gets the string's associated culture.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Text.LocalizedString.Language">
            <summary>
            Gets the string's associated language.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Text.LocalizedString.Key">
            <summary>
            Gets the string's localization key.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Text.LocalizedString.ContainsHtmlEncodedCharacters">
            <summary>
            Gets a value indicating whether the string contains HTML encoded characters.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Text.LocalizedString.PseudolocalizationDisabled">
            <summary>
            Gets a value indicating whether pseudolocalization is disabled for this string.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Text.LocalizedString.VariantCount">
            <summary>
            Gets the number of variants defined by this string.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Text.LocalizedString.CreateFromXml(System.Xml.Linq.XElement,System.Collections.Generic.Dictionary{System.String,Ultraviolet.Core.Text.LocalizedString})">
            <summary>
            Creates a set of localized strings from the specified XML element.
            </summary>
            <param name="xml">The XML element that contains the string definition.</param>
            <param name="strings">The dictionary to populate with strings for each loaded culture.</param>
            <returns>The localization key for the created strings.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.LocalizedString.CreateFromDescription(Ultraviolet.Core.Text.LocalizedStringDescription,System.Collections.Generic.Dictionary{System.String,Ultraviolet.Core.Text.LocalizedString})">
            <summary>
            Creates a set of localized strings from the specified string description.
            </summary>
            <param name="description">The string description from which to create the strings.</param>
            <param name="strings">The dictionary to populate with strings for each loaded culture.</param>
            <returns>The localization key for the created strings.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.LocalizedString.CreateFallback(System.String,System.String)">
            <summary>
            Creates a fallback string in the event that the specified key does not exist for a culture.
            </summary>
            <param name="culture">The string's associated culture.</param>
            <param name="key">The string's localization key.</param>
            <returns>The fallback string that was created.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.LocalizedString.CreatePseudolocalized(Ultraviolet.Core.Text.LocalizedString)">
            <summary>
            Creates a pseudolocalized copy of the specified source string.
            </summary>
            <param name="source">The source string to pseudolocalize.</param>
            <returns>A copy of the source string that is pseudolocalized.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.LocalizedString.GetLanguageFromCulture(System.String)">
            <summary>
            Gets the two-letter language code associated with the specified culture.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Text.LocalizedString.PseudolocalizeString(System.String)">
            <summary>
            Pseudolocalized the specified string.
            </summary>
            <param name="str">The string to pseudolocalize.</param>
        </member>
        <member name="T:Ultraviolet.Core.Text.LocalizedStringDescription">
            <summary>
            An intermediate representation of a <see cref="T:Ultraviolet.Core.Text.LocalizedStringDescription"/> used during serialization.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Text.LocalizedStringDescription.Key">
            <summary>
            Gets or sets the localized string's identifying key.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Text.LocalizedStringDescription.Html">
            <summary>
            Gets or sets a value indicating whether the string contains HTML.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Text.LocalizedStringDescription.Pseudo">
            <summary>
            Gets or sets a value indicating whether the string should be pseudolocalized.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Text.LocalizedStringDescription.Variants">
            <summary>
            Gets or sets the string's collection of variants.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.Text.LocalizationMatchEvaluatorData">
            <summary>
            Represents the data for a localization match evaluator.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Text.LocalizationMatchEvaluatorData.#ctor(System.String,Ultraviolet.Core.Text.LocalizationMatchEvaluator)">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Text.LocalizationMatchEvaluatorData"/> structure.
            </summary>
            <param name="name">The match evaluator name.</param>
            <param name="evaluator">The match evaluator.</param>
        </member>
        <member name="F:Ultraviolet.Core.Text.LocalizationMatchEvaluatorData.Name">
            <summary>
            The match evaluator name.
            </summary>
        </member>
        <member name="F:Ultraviolet.Core.Text.LocalizationMatchEvaluatorData.Evaluator">
            <summary>
            The match evaluator.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.Text.LocalizedStringVariant">
            <summary>
            Represents a variant form of a localized string.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Text.LocalizedStringVariant.#ctor(Ultraviolet.Core.Text.LocalizedString,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Text.LocalizedStringVariant"/> class.
            </summary>
            <param name="parent">The string variant's parent string.</param>
            <param name="group">The name of the string variant's variant group.</param>
            <param name="value">The value of the string variant.</param>
            <param name="properties">A collection of properties to attach to the string variant.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.LocalizedStringVariant.op_Implicit(Ultraviolet.Core.Text.LocalizedStringVariant)~System.String">
            <summary>
            Implicitly converts the object to a string.
            </summary>
            <param name="variant">The object to convert.</param>
            <returns>The converted object.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.LocalizedStringVariant.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Text.LocalizedStringVariant.HasProperty(System.String)">
            <summary>
            Gets a value indicating whether the string variant has the specified property.
            </summary>
            <param name="prop">The name of the property to evaluate.</param>
            <returns><see langword="true"/> if the string variant has the specified property; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.LocalizedStringVariant.HasProperty(Ultraviolet.Core.Text.StringSegment)">
            <summary>
            Gets a value indicating whether the string variant has the specified property.
            </summary>
            <param name="prop">The name of the property to evaluate.</param>
            <returns><see langword="true"/> if the string variant has the specified property; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.LocalizedStringVariant.HasPropertyRef(Ultraviolet.Core.Text.StringSegment@)">
            <summary>
            Gets a value indicating whether the string variant has the specified property.
            </summary>
            <param name="prop">The name of the property to evaluate.</param>
            <returns><see langword="true"/> if the string variant has the specified property; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:Ultraviolet.Core.Text.LocalizedStringVariant.Parent">
            <summary>
            Gets the string that owns this variant.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Text.LocalizedStringVariant.Key">
            <summary>
            Gets the string variant's localization key.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Text.LocalizedStringVariant.Culture">
            <summary>
            Gets the string variant's associated culture.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Text.LocalizedStringVariant.Group">
            <summary>
            Gets the name of the string variant's variant group.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Text.LocalizedStringVariant.Value">
            <summary>
            Gets the value of the string variant.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Text.LocalizedStringVariant.Properties">
            <summary>
            Gets the string variant's collection of properties.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.Text.LocalizedStringVariantCollection">
            <summary>
            Represents a collection of localized string variants.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Text.LocalizedStringVariantCollection.TryGetValue(System.String,Ultraviolet.Core.Text.LocalizedStringVariant@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key for which to retrieve a value.</param>
            <param name="value">The value that was retrieved for the specified key.</param>
            <returns><see langword="true"/> if the value was retrieved; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.LocalizedStringVariantCollection.GetEnumerator">
            <summary>
            Gets an enumerator for the collection.
            </summary>
            <returns>An enumerator for the collection.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.LocalizedStringVariantCollection.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,Ultraviolet#Core#Text#LocalizedStringVariant}}#GetEnumerator">
            <summary>
            Gets an enumerator for the collection.
            </summary>
            <returns>An enumerator for the collection.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.LocalizedStringVariantCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator for the collection.
            </summary>
            <returns>An enumerator for the collection.</returns>
        </member>
        <member name="P:Ultraviolet.Core.Text.LocalizedStringVariantCollection.Item(System.String)">
            <summary>
            Gets the string variant with the specified key.
            </summary>
            <param name="key">The key that identifies the variant to retrieve.</param>
            <returns>The string variant with the specified key.</returns>
        </member>
        <member name="P:Ultraviolet.Core.Text.LocalizedStringVariantCollection.DefaultVariant">
            <summary>
            Gets the default string variant.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Text.LocalizedStringVariantCollection.Count">
            <summary>
            Gets the number of variants in the collection.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.Text.LocalizedStringVariantCollectionDescription">
            <summary>
            An intermediate representation of a <see cref="T:Ultraviolet.Core.Text.LocalizedStringVariantCollection"/> used during serialization.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Text.LocalizedStringVariantCollectionDescription.Properties">
            <summary>
            Gets or sets the collection's comma-delimited list of properties.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Text.LocalizedStringVariantCollectionDescription.Items">
            <summary>
            Gets or sets the collection's list of variants.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.Text.LocalizationDatabaseDescription">
            <summary>
            An intermediate representation of a <see cref="T:Ultraviolet.Core.Text.LocalizationDatabase"/> used during serialization.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Text.LocalizationDatabaseDescription.Strings">
            <summary>
            Gets or sets the database's collection of localizable strings.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.Text.LocalizedStringVariantDescription">
            <summary>
            An intermediate representation of a <see cref="T:Ultraviolet.Core.Text.LocalizedStringVariant"/> used during serialization.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Text.LocalizedStringVariantDescription.Group">
            <summary>
            Gets or sets the name of the variant's group.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Text.LocalizedStringVariantDescription.Properties">
            <summary>
            Gets or sets the variant's comma-delimited list of properties.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Text.LocalizedStringVariantDescription.Text">
            <summary>
            Gets or sets the variant's text.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.Text.LocalizedStringVariantCollectionJsonConverter">
            <summary>
            Represents a custom JSON converter which supports collections of localized string variants.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Text.LocalizedStringVariantCollectionJsonConverter.CanConvert(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Text.LocalizedStringVariantCollectionJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Text.LocalizedStringVariantCollectionJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.Core.Text.LocalizedStringVariantCollectionJsonConverter.CanRead">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.Core.Text.LocalizedStringVariantCollectionJsonConverter.CanWrite">
            <inheritdoc/>
        </member>
        <member name="T:Ultraviolet.Core.Text.NamespaceDoc">
            <summary>
            The <see cref="N:Ultraviolet.Core.Text"/> contains types useful for localizing and manipulating strings of 
            text, and provides allocation-free alternatives to the Base Class Library's string formatting functions.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.Text.StringBuilderExtensions">
            <summary>
            Contains extension methods for the <see cref="T:System.Text.StringBuilder"/> class.
            </summary>
            <summary>
            Adapted from StringBuilderExtNumeric.cs by Gavin Pugh, available here: 
            http://www.gavpugh.com/source/StringBuilderExtNumeric.cs
            
            StringBuilderExtNumeric.cs is copyright (c) Gavin Pugh 2010.
            Released under the zlib license: http://www.opensource.org/licenses/zlib-license.php
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringBuilderExtensions.AppendStringPtr(System.Text.StringBuilder,Ultraviolet.Core.Text.StringPtr8)">
            <summary>
            Appends the specified string pointer to the <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="sb">The <see cref="T:System.Text.StringBuilder"/> to which to append the value.</param>
            <param name="ptr">A pointer to the unmanaged string to append.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringBuilderExtensions.AppendStringPtr(System.Text.StringBuilder,Ultraviolet.Core.Text.StringPtr8,System.Int32,System.Int32)">
            <summary>
            Appends a substring of the specified string pointer to the <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="sb">The <see cref="T:System.Text.StringBuilder"/> to which to append the value.</param>
            <param name="ptr">A pointer to the unmanaged string that contains the substring to append.</param>
            <param name="offset">The offset into the string at which the substring begins.</param>
            <param name="length">The length of the substring.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringBuilderExtensions.AppendStringPtr(System.Text.StringBuilder,Ultraviolet.Core.Text.StringPtr16)">
            <summary>
            Appends the specified string pointer to the <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="sb">The <see cref="T:System.Text.StringBuilder"/> to which to append the value.</param>
            <param name="ptr">A pointer to the unmanaged string to append.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringBuilderExtensions.AppendStringPtr(System.Text.StringBuilder,Ultraviolet.Core.Text.StringPtr16,System.Int32,System.Int32)">
            <summary>
            Appends a substring of the specified string pointer to the <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="sb">The <see cref="T:System.Text.StringBuilder"/> to which to append the value.</param>
            <param name="ptr">A pointer to the unmanaged string that contains the substring to append.</param>
            <param name="offset">The offset into the string at which the substring begins.</param>
            <param name="length">The length of the substring.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringBuilderExtensions.AppendSubstring(System.Text.StringBuilder,System.String,System.Int32,System.Int32)">
            <summary>
            Appends a substring of the specified string to the <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="sb">The <see cref="T:System.Text.StringBuilder"/> to which to append the value.</param>
            <param name="str">The string that contains the substring to append.</param>
            <param name="offset">The offset into the string at which the substring begins.</param>
            <param name="length">The length of the substring.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringBuilderExtensions.AppendSegment(System.Text.StringBuilder,Ultraviolet.Core.Text.StringSegment)">
            <summary>
            Appends the value of a string segment to the <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="sb">The <see cref="T:System.Text.StringBuilder"/> to which to append the value.</param>
            <param name="value">The <see cref="T:Ultraviolet.Core.Text.StringSegment"/> to append to the <see cref="T:System.Text.StringBuilder"/>.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringBuilderExtensions.AppendSegment(System.Text.StringBuilder,Ultraviolet.Core.Text.StringSegment@)">
            <summary>
            Appends the value of a string segment to the <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="sb">The <see cref="T:System.Text.StringBuilder"/> to which to append the value.</param>
            <param name="value">The <see cref="T:Ultraviolet.Core.Text.StringSegment"/> to append to the <see cref="T:System.Text.StringBuilder"/>.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringBuilderExtensions.AppendPaddedInt2(System.Text.StringBuilder,System.Int32)">
            <summary>
            Appends an integer to the specified StringBuilder, padding the string to contain at least 2 digits.
            </summary>
            <param name="sb">The <see cref="T:System.Text.StringBuilder"/> to which to append the value.</param>
            <param name="value">The value to append to the <see cref="T:System.Text.StringBuilder"/>.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringBuilderExtensions.AppendIntWithCommas(System.Text.StringBuilder,System.Int32)">
            <summary>
            Appends an integer to the specified StringBuilder, separating each group of 3 digits with commas.
            </summary>
            <param name="sb">The <see cref="T:System.Text.StringBuilder"/> to which to append the value.</param>
            <param name="value">The value to append to the <see cref="T:System.Text.StringBuilder"/>.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringBuilderExtensions.AppendPaddedSingle2(System.Text.StringBuilder,System.Single)">
            <summary>
            Appends a single-precision floating point value to the specified StringBuilder, padding the string to contain
            at exactly two digits after the decimal point.
            </summary>
            <param name="sb">The <see cref="T:System.Text.StringBuilder"/> to which to append the value.</param>
            <param name="value">The value to append to the <see cref="T:System.Text.StringBuilder"/>.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringBuilderExtensions.AppendPaddedDouble2(System.Text.StringBuilder,System.Double)">
            <summary>
            Appends a double-precision floating point value to the specified StringBuilder, padding the string to contain
            at exactly two digits after the decimal point.
            </summary>
            <param name="sb">The <see cref="T:System.Text.StringBuilder"/> to which to append the value.</param>
            <param name="value">The value to append to the <see cref="T:System.Text.StringBuilder"/>.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringBuilderExtensions.Substring(System.Text.StringBuilder,System.Int32,System.Int32,System.Text.StringBuilder)">
            <summary>
            Populates a StringBuilder with a specified substring of this StringBuilder.
            </summary>
            <param name="source">The source StringBuilder.</param>
            <param name="start">The starting index of the substring.</param>
            <param name="length">The number of character in the substring.</param>
            <param name="output">The <see cref="T:System.Text.StringBuilder"/> to populate with the substring.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringBuilderExtensions.Split(System.Text.StringBuilder,System.Char,System.Text.StringBuilder[])">
            <summary>
            Splits the <see cref="T:System.Text.StringBuilder"/> into subtrings separated by the specified delimiter.
            </summary>
            <param name="source">The source StringBuilder.</param>
            <param name="delimiter">The delimiter with which to split the string.</param>
            <param name="output">An array of StringBuilder objects to populate with substrings.</param>
            <returns>The number of substrings that were retrieved.</returns>
        </member>
        <member name="T:Ultraviolet.Core.Text.StringFormatter">
            <summary>
            Contains methods for formatting the contents of a <see cref="T:System.Text.StringBuilder"/> object without
            generating any allocations to the managed heap.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.Text.StringFormatter.MatchCommandHandler">
            <summary>
            Implements the built-in "match" command used by <see cref="T:Ultraviolet.Core.Text.StringFormatter"/> to match a localized
            string to another localized string.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatter.MatchCommandHandler.CanHandleCommand(Ultraviolet.Core.Text.StringSegment)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatter.MatchCommandHandler.HandleCommandLocalizedString(Ultraviolet.Core.Text.StringFormatter,System.Text.StringBuilder,Ultraviolet.Core.Text.StringSegment,Ultraviolet.Core.Text.StringFormatterCommandArguments,Ultraviolet.Core.Text.LocalizedString)">
            <inheritdoc/>
        </member>
        <member name="T:Ultraviolet.Core.Text.StringFormatter.VariantCommandHandler">
            <summary>
            Implements the built-in "variant" command used by <see cref="T:Ultraviolet.Core.Text.StringFormatter"/> to output localized string variants.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatter.VariantCommandHandler.CanHandleCommand(Ultraviolet.Core.Text.StringSegment)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatter.VariantCommandHandler.HandleCommandLocalizedString(Ultraviolet.Core.Text.StringFormatter,System.Text.StringBuilder,Ultraviolet.Core.Text.StringSegment,Ultraviolet.Core.Text.StringFormatterCommandArguments,Ultraviolet.Core.Text.LocalizedString)">
            <inheritdoc/>
        </member>
        <member name="T:Ultraviolet.Core.Text.StringFormatter.StringFormatterArgumentHandler">
            <summary>
            Represents a method that is used to handle a particular argument type.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.Text.StringFormatter.StringFormatterArgument">
            <summary>
            Represents an argument that has been added to the formatter.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatter.#cctor">
            <summary>
            Initializes the <see cref="T:Ultraviolet.Core.Text.StringFormatter"/> type.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Text.StringFormatter"/> class.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatter.Reset">
            <summary>
            Resets the string formatter's state.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatter.RegisterCommandHandler(Ultraviolet.Core.Text.StringFormatterCommandHandler)">
            <summary>
            Registers the specified command handler with the formatter.
            </summary>
            <param name="handler">The command handler to register.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatter.UnregisterCommandHandler(Ultraviolet.Core.Text.StringFormatterCommandHandler)">
            <summary>
            Unregisters the specified command handler from the formatter.
            </summary>
            <param name="handler">The command handler to unregister.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatter.UnregisterAllCommandHandlers">
            <summary>
            Unregisters all of the formatter's command handlers.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatter.AddArgument(System.Boolean)">
            <summary>
            Adds an argument to the string formatter.
            </summary>
            <param name="value">The value to add as an argument.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatter.AddArgument(System.Byte)">
            <summary>
            Adds an argument to the string formatter.
            </summary>
            <param name="value">The value to add as an argument.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatter.AddArgument(System.Char)">
            <summary>
            Adds an argument to the string formatter.
            </summary>
            <param name="value">The value to add as an argument.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatter.AddArgument(System.Int16)">
            <summary>
            Adds an argument to the string formatter.
            </summary>
            <param name="value">The value to add as an argument.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatter.AddArgument(System.Int32)">
            <summary>
            Adds an argument to the string formatter.
            </summary>
            <param name="value">The value to add as an argument.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatter.AddArgument(System.UInt16)">
            <summary>
            Adds an argument to the string formatter.
            </summary>
            <param name="value">The value to add as an argument.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatter.AddArgument(System.UInt32)">
            <summary>
            Adds an argument to the string formatter.
            </summary>
            <param name="value">The value to add as an argument.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatter.AddArgument(System.Single)">
            <summary>
            Adds an argument to the string formatter.
            </summary>
            <param name="value">The value to add as an argument.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatter.AddArgument(System.Double)">
            <summary>
            Adds an argument to the string formatter.
            </summary>
            <param name="value">The value to add as an argument.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatter.AddArgument(System.String)">
            <summary>
            Adds an argument to the string formatter.
            </summary>
            <param name="value">The value to add as an argument.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatter.AddArgument(Ultraviolet.Core.Text.LocalizedString)">
            <summary>
            Adds an argument to the string formatter.
            </summary>
            <param name="value">The value to add as an argument.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatter.AddArgument(Ultraviolet.Core.Text.LocalizedStringVariant)">
            <summary>
            Adds an argument to the string formatter.
            </summary>
            <param name="value">The value to add as an argument.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatter.Format(System.String,System.Text.StringBuilder)">
            <summary>
            Formats the content of the specified <see cref="T:System.Text.StringBuilder"/> using the formatter's current list of arguments.
            </summary>
            <param name="input">A string specifying how to format the formatter's arguments.</param>
            <param name="output">The <see cref="T:System.Text.StringBuilder"/> to which to write the formatted string.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatter.GetArgument(System.Int32)">
            <summary>
            Gets the specified formatter argument.
            </summary>
            <param name="ix">The index of the formatter argument to retrieve.</param>
            <returns>The formatter argument with the specified index..</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatter.IsFormatSpecifier(System.String,System.Int32,System.Int32@)">
            <summary>
            Gets a value indicating whether the character at the specified index within the string 
            is the beginning of a format specifier.
            </summary>
            <param name="str">The string to evaluate.</param>
            <param name="ix">The index to evaluate.</param>
            <param name="length">The format specifier's length.</param>
            <returns><see langword="true"/> if the specified index is the beginning of a format specifier; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatter.IsEscapedFormatSpecifier(System.String,System.Int32,System.Int32@)">
            <summary>
            Gets a value indicating whether the character at the specified index within the string 
            is an escaped format specifier character ({ or }).
            </summary>
            <param name="str">The string to evaluate.</param>
            <param name="ix">The index to evaluate.</param>
            <param name="length">The escape sequence's length.</param>
            <returns><see langword="true"/> if the specified index is an escaped format specifier; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatter.ProcessFormatSpecifier(System.String,System.Text.StringBuilder,System.Int32,System.Int32)">
            <summary>
            Attempts to process a format specifier.
            </summary>
            <param name="input">The input string.</param>
            <param name="output">The output buffer.</param>
            <param name="ix">The index at which the specifier begins.</param>
            <param name="length">The length of the specifier.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatter.AppendArgument(System.String,System.Text.StringBuilder,System.Int32,Ultraviolet.Core.Text.StringFormatter.StringFormatterArgument@,Ultraviolet.Core.Text.StringFormatterCommandInfo@)">
            <summary>
            Appends a formatter argument to the specified output buffer.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatter.AddArgumentHandler``1(Ultraviolet.Core.Text.StringFormatter.StringFormatterArgumentHandler)">
            <summary>
            Adds an argument handler to the argument handler registry.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatter.ArgumentHandler_Boolean(Ultraviolet.Core.Text.StringFormatter,System.String,System.Text.StringBuilder,System.Int32,Ultraviolet.Core.Text.StringFormatter.StringFormatterArgument@,Ultraviolet.Core.Text.StringFormatterCommandInfo@)">
            <summary>
            Handles <see cref="T:System.Boolean"/> formatter arguments.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatter.ArgumentHandler_Byte(Ultraviolet.Core.Text.StringFormatter,System.String,System.Text.StringBuilder,System.Int32,Ultraviolet.Core.Text.StringFormatter.StringFormatterArgument@,Ultraviolet.Core.Text.StringFormatterCommandInfo@)">
            <summary>
            Handles <see cref="T:System.Byte"/> formatter arguments.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatter.ArgumentHandler_Char(Ultraviolet.Core.Text.StringFormatter,System.String,System.Text.StringBuilder,System.Int32,Ultraviolet.Core.Text.StringFormatter.StringFormatterArgument@,Ultraviolet.Core.Text.StringFormatterCommandInfo@)">
            <summary>
            Handles <see cref="T:System.Char"/> formatter arguments.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatter.ArgumentHandler_Int16(Ultraviolet.Core.Text.StringFormatter,System.String,System.Text.StringBuilder,System.Int32,Ultraviolet.Core.Text.StringFormatter.StringFormatterArgument@,Ultraviolet.Core.Text.StringFormatterCommandInfo@)">
            <summary>
            Handles <see cref="T:System.Int16"/> formatter arguments.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatter.ArgumentHandler_Int32(Ultraviolet.Core.Text.StringFormatter,System.String,System.Text.StringBuilder,System.Int32,Ultraviolet.Core.Text.StringFormatter.StringFormatterArgument@,Ultraviolet.Core.Text.StringFormatterCommandInfo@)">
            <summary>
            Handles <see cref="T:System.Int32"/> formatter arguments.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatter.ArgumentHandler_UInt16(Ultraviolet.Core.Text.StringFormatter,System.String,System.Text.StringBuilder,System.Int32,Ultraviolet.Core.Text.StringFormatter.StringFormatterArgument@,Ultraviolet.Core.Text.StringFormatterCommandInfo@)">
            <summary>
            Handles <see cref="T:System.UInt16"/> formatter arguments.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatter.ArgumentHandler_UInt32(Ultraviolet.Core.Text.StringFormatter,System.String,System.Text.StringBuilder,System.Int32,Ultraviolet.Core.Text.StringFormatter.StringFormatterArgument@,Ultraviolet.Core.Text.StringFormatterCommandInfo@)">
            <summary>
            Handles <see cref="T:System.UInt32"/> formatter arguments.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatter.ArgumentHandler_Single(Ultraviolet.Core.Text.StringFormatter,System.String,System.Text.StringBuilder,System.Int32,Ultraviolet.Core.Text.StringFormatter.StringFormatterArgument@,Ultraviolet.Core.Text.StringFormatterCommandInfo@)">
            <summary>
            Handles <see cref="T:System.Single"/> formatter arguments.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatter.ArgumentHandler_Double(Ultraviolet.Core.Text.StringFormatter,System.String,System.Text.StringBuilder,System.Int32,Ultraviolet.Core.Text.StringFormatter.StringFormatterArgument@,Ultraviolet.Core.Text.StringFormatterCommandInfo@)">
            <summary>
            Handles <see cref="T:System.Double"/> formatter arguments.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatter.ArgumentHandler_LocalizedString(Ultraviolet.Core.Text.StringFormatter,System.String,System.Text.StringBuilder,System.Int32,Ultraviolet.Core.Text.StringFormatter.StringFormatterArgument@,Ultraviolet.Core.Text.StringFormatterCommandInfo@)">
            <summary>
            Handles <see cref="T:Ultraviolet.Core.Text.LocalizedString"/> formatter arguments.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.Text.StringFormatter.DecimalsCommandHandler">
            <summary>
            Implements the built-in "decimals" command used by <see cref="T:Ultraviolet.Core.Text.StringFormatter"/> to output floating-point
            values with the specified number of decimal places.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatter.DecimalsCommandHandler.CanHandleCommand(Ultraviolet.Core.Text.StringSegment)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatter.DecimalsCommandHandler.HandleCommandSingle(Ultraviolet.Core.Text.StringFormatter,System.Text.StringBuilder,Ultraviolet.Core.Text.StringSegment,Ultraviolet.Core.Text.StringFormatterCommandArguments,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatter.DecimalsCommandHandler.HandleCommandDouble(Ultraviolet.Core.Text.StringFormatter,System.Text.StringBuilder,Ultraviolet.Core.Text.StringSegment,Ultraviolet.Core.Text.StringFormatterCommandArguments,System.Double)">
            <inheritdoc/>
        </member>
        <member name="T:Ultraviolet.Core.Text.StringFormatter.PadCommandHandler">
            <summary>
            Implements the built-in "pad" command used by <see cref="T:Ultraviolet.Core.Text.StringFormatter"/> to output padded integers.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatter.PadCommandHandler.CanHandleCommand(Ultraviolet.Core.Text.StringSegment)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatter.PadCommandHandler.HandleCommandUInt16(Ultraviolet.Core.Text.StringFormatter,System.Text.StringBuilder,Ultraviolet.Core.Text.StringSegment,Ultraviolet.Core.Text.StringFormatterCommandArguments,System.UInt16)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatter.PadCommandHandler.HandleCommandInt32(Ultraviolet.Core.Text.StringFormatter,System.Text.StringBuilder,Ultraviolet.Core.Text.StringSegment,Ultraviolet.Core.Text.StringFormatterCommandArguments,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatter.PadCommandHandler.HandleCommandInt16(Ultraviolet.Core.Text.StringFormatter,System.Text.StringBuilder,Ultraviolet.Core.Text.StringSegment,Ultraviolet.Core.Text.StringFormatterCommandArguments,System.Int16)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatter.PadCommandHandler.HandleCommandUInt32(Ultraviolet.Core.Text.StringFormatter,System.Text.StringBuilder,Ultraviolet.Core.Text.StringSegment,Ultraviolet.Core.Text.StringFormatterCommandArguments,System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="T:Ultraviolet.Core.Text.StringFormatterCommandArgument">
            <summary>
            Represents an argument to a <see cref="T:Ultraviolet.Core.Text.StringFormatter"/> command.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatterCommandArgument.#ctor(Ultraviolet.Core.Text.StringFormatterCommandArguments@,Ultraviolet.Core.Text.StringSegment)">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Text.StringFormatterCommandArgument"/> structure.
            </summary>
            <param name="arglist">The argument list which produced this argument.</param>
            <param name="text">The argument's text.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatterCommandArgument.op_Equality(Ultraviolet.Core.Text.StringFormatterCommandArgument,Ultraviolet.Core.Text.StringFormatterCommandArgument)">
            <summary>
            Determines whether a <see cref="T:Ultraviolet.Core.Text.StringFormatterCommandArgument"/> is equal to
            another <see cref="T:Ultraviolet.Core.Text.StringFormatterCommandArgument"/>.
            </summary>
            <param name="x">The first <see cref="T:Ultraviolet.Core.Text.StringFormatterCommandArgument"/> to compare.</param>
            <param name="y">The second <see cref="T:Ultraviolet.Core.Text.StringFormatterCommandArgument"/> to compare.</param>
            <returns><see langword="true"/> if the two objects are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatterCommandArgument.op_Inequality(Ultraviolet.Core.Text.StringFormatterCommandArgument,Ultraviolet.Core.Text.StringFormatterCommandArgument)">
            <summary>
            Determines whether a <see cref="T:Ultraviolet.Core.Text.StringFormatterCommandArgument"/> is unequal to
            another <see cref="T:Ultraviolet.Core.Text.StringFormatterCommandArgument"/>.
            </summary>
            <param name="x">The first <see cref="T:Ultraviolet.Core.Text.StringFormatterCommandArgument"/> to compare.</param>
            <param name="y">The second <see cref="T:Ultraviolet.Core.Text.StringFormatterCommandArgument"/> to compare.</param>
            <returns><see langword="true"/> if the two objects are unequal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatterCommandArgument.op_Equality(Ultraviolet.Core.Text.StringFormatterCommandArgument,Ultraviolet.Core.Text.StringSegment)">
            <summary>
            Determines whether a <see cref="T:Ultraviolet.Core.Text.StringFormatterCommandArgument"/> is equal to
            a <see cref="T:Ultraviolet.Core.Text.StringSegment"/>.
            </summary>
            <param name="x">The <see cref="T:Ultraviolet.Core.Text.StringFormatterCommandArgument"/> being compared.</param>
            <param name="y">The <see cref="T:Ultraviolet.Core.Text.StringSegment"/> being compared.</param>
            <returns><see langword="true"/> if the two objects are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatterCommandArgument.op_Inequality(Ultraviolet.Core.Text.StringFormatterCommandArgument,Ultraviolet.Core.Text.StringSegment)">
            <summary>
            Determines whether a <see cref="T:Ultraviolet.Core.Text.StringFormatterCommandArgument"/> is unequal to
            a <see cref="T:Ultraviolet.Core.Text.StringSegment"/>.
            </summary>
            <param name="x">The <see cref="T:Ultraviolet.Core.Text.StringFormatterCommandArgument"/> being compared.</param>
            <param name="y">The <see cref="T:Ultraviolet.Core.Text.StringSegment"/> being compared.</param>
            <returns><see langword="true"/> if the two objects are unequal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatterCommandArgument.op_Equality(Ultraviolet.Core.Text.StringSegment,Ultraviolet.Core.Text.StringFormatterCommandArgument)">
            <summary>
            Determines whether a <see cref="T:Ultraviolet.Core.Text.StringSegment"/> is equal to
            a <see cref="T:Ultraviolet.Core.Text.StringFormatterCommandArgument"/>.
            </summary>
            <param name="x">The <see cref="T:Ultraviolet.Core.Text.StringSegment"/> being compared.</param>
            <param name="y">The <see cref="T:Ultraviolet.Core.Text.StringFormatterCommandArgument"/> being compared.</param>
            <returns><see langword="true"/> if the two objects are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatterCommandArgument.op_Inequality(Ultraviolet.Core.Text.StringSegment,Ultraviolet.Core.Text.StringFormatterCommandArgument)">
            <summary>
            Determines whether a <see cref="T:Ultraviolet.Core.Text.StringSegment"/> is unequal to
            a <see cref="T:Ultraviolet.Core.Text.StringFormatterCommandArgument"/>.
            </summary>
            <param name="x">The <see cref="T:Ultraviolet.Core.Text.StringSegment"/> being compared.</param>
            <param name="y">The <see cref="T:Ultraviolet.Core.Text.StringFormatterCommandArgument"/> being compared.</param>
            <returns><see langword="true"/> if the two objects are unequal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatterCommandArgument.op_Equality(Ultraviolet.Core.Text.StringFormatterCommandArgument,System.String)">
            <summary>
            Determines whether a <see cref="T:Ultraviolet.Core.Text.StringFormatterCommandArgument"/> is equal to
            a <see cref="T:System.String"/>.
            </summary>
            <param name="x">The <see cref="T:Ultraviolet.Core.Text.StringFormatterCommandArgument"/> being compared.</param>
            <param name="y">The <see cref="T:System.String"/> being compared.</param>
            <returns><see langword="true"/> if the two objects are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatterCommandArgument.op_Inequality(Ultraviolet.Core.Text.StringFormatterCommandArgument,System.String)">
            <summary>
            Determines whether a <see cref="T:Ultraviolet.Core.Text.StringFormatterCommandArgument"/> is unequal to
            a <see cref="T:System.String"/>.
            </summary>
            <param name="x">The <see cref="T:Ultraviolet.Core.Text.StringFormatterCommandArgument"/> being compared.</param>
            <param name="y">The <see cref="T:System.String"/> being compared.</param>
            <returns><see langword="true"/> if the two objects are unequal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatterCommandArgument.op_Equality(System.String,Ultraviolet.Core.Text.StringFormatterCommandArgument)">
            <summary>
            Determines whether a <see cref="T:System.String"/> is equal to
            a <see cref="T:Ultraviolet.Core.Text.StringFormatterCommandArgument"/>.
            </summary>
            <param name="x">The <see cref="T:System.String"/> being compared.</param>
            <param name="y">The <see cref="T:Ultraviolet.Core.Text.StringFormatterCommandArgument"/> being compared.</param>
            <returns><see langword="true"/> if the two objects are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatterCommandArgument.op_Inequality(System.String,Ultraviolet.Core.Text.StringFormatterCommandArgument)">
            <summary>
            Determines whether a <see cref="T:System.String"/> is unequal to
            a <see cref="T:Ultraviolet.Core.Text.StringFormatterCommandArgument"/>.
            </summary>
            <param name="x">The <see cref="T:System.String"/> being compared.</param>
            <param name="y">The <see cref="T:Ultraviolet.Core.Text.StringFormatterCommandArgument"/> being compared.</param>
            <returns><see langword="true"/> if the two objects are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatterCommandArgument.op_Equality(Ultraviolet.Core.Text.StringFormatterCommandArgument,System.Text.StringBuilder)">
            <summary>
            Determines whether a <see cref="T:Ultraviolet.Core.Text.StringFormatterCommandArgument"/> is equal to
            a <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="x">The <see cref="T:Ultraviolet.Core.Text.StringFormatterCommandArgument"/> being compared.</param>
            <param name="y">The <see cref="T:System.Text.StringBuilder"/> being compared.</param>
            <returns><see langword="true"/> if the two objects are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatterCommandArgument.op_Inequality(Ultraviolet.Core.Text.StringFormatterCommandArgument,System.Text.StringBuilder)">
            <summary>
            Determines whether a <see cref="T:Ultraviolet.Core.Text.StringFormatterCommandArgument"/> is unequal to
            a <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="x">The <see cref="T:Ultraviolet.Core.Text.StringFormatterCommandArgument"/> being compared.</param>
            <param name="y">The <see cref="T:System.Text.StringBuilder"/> being compared.</param>
            <returns><see langword="true"/> if the two objects are unequal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatterCommandArgument.op_Equality(System.Text.StringBuilder,Ultraviolet.Core.Text.StringFormatterCommandArgument)">
            <summary>
            Determines whether a <see cref="T:System.Text.StringBuilder"/> is equal to
            a <see cref="T:Ultraviolet.Core.Text.StringFormatterCommandArgument"/>.
            </summary>
            <param name="x">The <see cref="T:System.Text.StringBuilder"/> being compared.</param>
            <param name="y">The <see cref="T:Ultraviolet.Core.Text.StringFormatterCommandArgument"/> being compared.</param>
            <returns><see langword="true"/> if the two objects are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatterCommandArgument.op_Inequality(System.Text.StringBuilder,Ultraviolet.Core.Text.StringFormatterCommandArgument)">
            <summary>
            Determines whether a <see cref="T:System.Text.StringBuilder"/> is unequal to
            a <see cref="T:Ultraviolet.Core.Text.StringFormatterCommandArgument"/>.
            </summary>
            <param name="x">The <see cref="T:System.Text.StringBuilder"/> being compared.</param>
            <param name="y">The <see cref="T:Ultraviolet.Core.Text.StringFormatterCommandArgument"/> being compared.</param>
            <returns><see langword="true"/> if the two objects are unequal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatterCommandArgument.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatterCommandArgument.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatterCommandArgument.Equals(Ultraviolet.Core.Text.StringFormatterCommandArgument)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatterCommandArgument.Equals(Ultraviolet.Core.Text.StringSegment)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatterCommandArgument.Equals(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatterCommandArgument.Equals(System.Text.StringBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatterCommandArgument.GetValueAsByte">
            <summary>
            Retrieves the argument's value and converts it to an instance of <see cref="T:System.Byte"/>
            if possible, or throws an exception if the conversion is not possible.
            </summary>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatterCommandArgument.TryGetValueAsByte(System.Int16@)">
            <summary>
            Attempts to retrieve the argument's value and convert it to an 
            instance of <see cref="T:System.Byte"/> if possible.
            </summary>
            <param name="result">The converted value.</param>
            <returns><see langword="true"/> if the conversion succeeded; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatterCommandArgument.GetValueAsInt16">
            <summary>
            Retrieves the argument's value and converts it to an instance of <see cref="T:System.Int16"/>
            if possible, or throws an exception if the conversion is not possible.
            </summary>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatterCommandArgument.TryGetValueAsInt16(System.Int16@)">
            <summary>
            Attempts to retrieve the argument's value and convert it to an 
            instance of <see cref="T:System.UInt16"/> if possible.
            </summary>
            <param name="result">The converted value.</param>
            <returns><see langword="true"/> if the conversion succeeded; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatterCommandArgument.GetValueAsUInt16">
            <summary>
            Retrieves the argument's value and converts it to an instance of <see cref="T:System.UInt16"/>
            if possible, or throws an exception if the conversion is not possible.
            </summary>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatterCommandArgument.TryGetValueAsUInt16(System.UInt16@)">
            <summary>
            Attempts to retrieve the argument's value and convert it to an 
            instance of <see cref="T:System.UInt16"/> if possible.
            </summary>
            <param name="result">The converted value.</param>
            <returns><see langword="true"/> if the conversion succeeded; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatterCommandArgument.GetValueAsInt32">
            <summary>
            Retrieves the argument's value and converts it to an instance of <see cref="T:System.Int32"/>
            if possible, or throws an exception if the conversion is not possible.
            </summary>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatterCommandArgument.TryGetValueAsInt32(System.Int32@)">
            <summary>
            Attempts to retrieve the argument's value and convert it to an 
            instance of <see cref="T:System.Int32"/> if possible.
            </summary>
            <param name="result">The converted value.</param>
            <returns><see langword="true"/> if the conversion succeeded; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatterCommandArgument.GetValueAsUInt32">
            <summary>
            Retrieves the argument's value and converts it to an instance of <see cref="T:System.UInt32"/>
            if possible, or throws an exception if the conversion is not possible.
            </summary>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatterCommandArgument.TryGetValueAsUInt32(System.UInt32@)">
            <summary>
            Attempts to retrieve the argument's value and convert it to an 
            instance of <see cref="T:System.UInt32"/> if possible.
            </summary>
            <param name="result">The converted value.</param>
            <returns><see langword="true"/> if the conversion succeeded; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:Ultraviolet.Core.Text.StringFormatterCommandArgument.Text">
            <summary>
            Gets the argument's text.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Text.StringFormatterCommandArgument.Start">
            <summary>
            Gets the argument's offset within its source string.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Text.StringFormatterCommandArgument.Length">
            <summary>
            Gets the argument's length.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Text.StringFormatterCommandArgument.ArgumentListStart">
            <summary>
            Gets the starting index of the argument list that produced this argument.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Text.StringFormatterCommandArgument.ArgumentListLength">
            <summary>
            Gets the length of the argument list that produced this argument.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.Text.StringFormatterCommandHandler">
            <summary>
            Represents a custom command handler for the <see cref="T:Ultraviolet.Core.Text.StringFormatter"/> class.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatterCommandHandler.CanHandleCommand(Ultraviolet.Core.Text.StringSegment)">
            <summary>
            Gets a value indicating whether this command handler can handle
            a command with the specified name.
            </summary>
            <param name="name">The name of the command to evaluate.</param>
            <returns><see langword="true"/> if the handler can handle the specified command; 
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatterCommandHandler.HandleCommand(Ultraviolet.Core.Text.StringFormatter,System.Text.StringBuilder,Ultraviolet.Core.Text.StringSegment,Ultraviolet.Core.Text.StringFormatterCommandArguments)">
            <summary>
            Handles a command which does not have an associated formatter argument value (that is, a command
            in the format of {foo} rather than {0:foo}).
            </summary>
            <param name="formatter">The formatter which is parsing the command.</param>
            <param name="output">The output buffer.</param>
            <param name="command">The name of the command being handled.</param>
            <param name="arguments">The arguments for the command being handled.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatterCommandHandler.HandleCommandBoolean(Ultraviolet.Core.Text.StringFormatter,System.Text.StringBuilder,Ultraviolet.Core.Text.StringSegment,Ultraviolet.Core.Text.StringFormatterCommandArguments,System.Boolean)">
            <summary>
            Handles a command which has an associated formatter argument value of <see cref="T:System.Boolean"/> type.
            </summary>
            <param name="formatter">The formatter which is parsing the command.</param>
            <param name="output">The output buffer.</param>
            <param name="command">The name of the command being handled.</param>
            <param name="arguments">The arguments for the command being handled.</param>
            <param name="value">The command's associated value.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatterCommandHandler.HandleCommandByte(Ultraviolet.Core.Text.StringFormatter,System.Text.StringBuilder,Ultraviolet.Core.Text.StringSegment,Ultraviolet.Core.Text.StringFormatterCommandArguments,System.Byte)">
            <summary>
            Handles a command which has an associated formatter argument value of <see cref="T:System.Byte"/> type.
            </summary>
            <param name="formatter">The formatter which is parsing the command.</param>
            <param name="output">The output buffer.</param>
            <param name="command">The name of the command being handled.</param>
            <param name="arguments">The arguments for the command being handled.</param>
            <param name="value">The command's associated value.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatterCommandHandler.HandleCommandChar(Ultraviolet.Core.Text.StringFormatter,System.Text.StringBuilder,Ultraviolet.Core.Text.StringSegment,Ultraviolet.Core.Text.StringFormatterCommandArguments,System.Char)">
            <summary>
            Handles a command which has an associated formatter argument value of <see cref="T:System.Char"/> type.
            </summary>
            <param name="formatter">The formatter which is parsing the command.</param>
            <param name="output">The output buffer.</param>
            <param name="command">The name of the command being handled.</param>
            <param name="arguments">The arguments for the command being handled.</param>
            <param name="value">The command's associated value.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatterCommandHandler.HandleCommandInt16(Ultraviolet.Core.Text.StringFormatter,System.Text.StringBuilder,Ultraviolet.Core.Text.StringSegment,Ultraviolet.Core.Text.StringFormatterCommandArguments,System.Int16)">
            <summary>
            Handles a command which has an associated formatter argument value of <see cref="T:System.Int16"/> type.
            </summary>
            <param name="formatter">The formatter which is parsing the command.</param>
            <param name="output">The output buffer.</param>
            <param name="command">The name of the command being handled.</param>
            <param name="arguments">The arguments for the command being handled.</param>
            <param name="value">The command's associated value.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatterCommandHandler.HandleCommandInt32(Ultraviolet.Core.Text.StringFormatter,System.Text.StringBuilder,Ultraviolet.Core.Text.StringSegment,Ultraviolet.Core.Text.StringFormatterCommandArguments,System.Int32)">
            <summary>
            Handles a command which has an associated formatter argument value of <see cref="T:System.Int32"/> type.
            </summary>
            <param name="formatter">The formatter which is parsing the command.</param>
            <param name="output">The output buffer.</param>
            <param name="command">The name of the command being handled.</param>
            <param name="arguments">The arguments for the command being handled.</param>
            <param name="value">The command's associated value.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatterCommandHandler.HandleCommandUInt16(Ultraviolet.Core.Text.StringFormatter,System.Text.StringBuilder,Ultraviolet.Core.Text.StringSegment,Ultraviolet.Core.Text.StringFormatterCommandArguments,System.UInt16)">
            <summary>
            Handles a command which has an associated formatter argument value of <see cref="T:System.UInt16"/> type.
            </summary>
            <param name="formatter">The formatter which is parsing the command.</param>
            <param name="output">The output buffer.</param>
            <param name="command">The name of the command being handled.</param>
            <param name="arguments">The arguments for the command being handled.</param>
            <param name="value">The command's associated value.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatterCommandHandler.HandleCommandUInt32(Ultraviolet.Core.Text.StringFormatter,System.Text.StringBuilder,Ultraviolet.Core.Text.StringSegment,Ultraviolet.Core.Text.StringFormatterCommandArguments,System.UInt32)">
            <summary>
            Handles a command which has an associated formatter argument value of <see cref="T:System.UInt32"/> type.
            </summary>
            <param name="formatter">The formatter which is parsing the command.</param>
            <param name="output">The output buffer.</param>
            <param name="command">The name of the command being handled.</param>
            <param name="arguments">The arguments for the command being handled.</param>
            <param name="value">The command's associated value.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatterCommandHandler.HandleCommandSingle(Ultraviolet.Core.Text.StringFormatter,System.Text.StringBuilder,Ultraviolet.Core.Text.StringSegment,Ultraviolet.Core.Text.StringFormatterCommandArguments,System.Single)">
            <summary>
            Handles a command which has an associated formatter argument value of <see cref="T:System.Single"/> type.
            </summary>
            <param name="formatter">The formatter which is parsing the command.</param>
            <param name="output">The output buffer.</param>
            <param name="command">The name of the command being handled.</param>
            <param name="arguments">The arguments for the command being handled.</param>
            <param name="value">The command's associated value.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatterCommandHandler.HandleCommandDouble(Ultraviolet.Core.Text.StringFormatter,System.Text.StringBuilder,Ultraviolet.Core.Text.StringSegment,Ultraviolet.Core.Text.StringFormatterCommandArguments,System.Double)">
            <summary>
            Handles a command which has an associated formatter argument value of <see cref="T:System.Double"/> type.
            </summary>
            <param name="formatter">The formatter which is parsing the command.</param>
            <param name="output">The output buffer.</param>
            <param name="command">The name of the command being handled.</param>
            <param name="arguments">The arguments for the command being handled.</param>
            <param name="value">The command's associated value.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatterCommandHandler.HandleCommandLocalizedString(Ultraviolet.Core.Text.StringFormatter,System.Text.StringBuilder,Ultraviolet.Core.Text.StringSegment,Ultraviolet.Core.Text.StringFormatterCommandArguments,Ultraviolet.Core.Text.LocalizedString)">
            <summary>
            Handles a command which has an associated formatter argument value of <see cref="T:Ultraviolet.Core.Text.LocalizedString"/> type.
            </summary>
            <param name="formatter">The formatter which is parsing the command.</param>
            <param name="output">The output buffer.</param>
            <param name="command">The name of the command being handled.</param>
            <param name="arguments">The arguments for the command being handled.</param>
            <param name="value">The command's associated value.</param>
        </member>
        <member name="T:Ultraviolet.Core.Text.StringFormatterCommandArguments">
            <summary>
            Represents the collection of arguments which have been passed to a <see cref="T:Ultraviolet.Core.Text.StringFormatter"/> command.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatterCommandArguments.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Text.StringFormatterCommandArguments"/> structure.
            </summary>
            <param name="input">The input string.</param>
            <param name="start">The starting position of the command within the input string.</param>
            <param name="length">The number of characters to examine in the input string.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatterCommandArguments.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatterCommandArguments.Discard(System.Int32)">
            <summary>
            Returns a new instance of the <see cref="T:Ultraviolet.Core.Text.StringFormatterCommandArguments"/> structure which
            contains the same arguments as this structure, but with the first <paramref name="count"/>
            arguments discarded.
            </summary>
            <param name="count">The number of arguments to discard.</param>
            <returns>The <see cref="T:Ultraviolet.Core.Text.StringFormatterCommandArguments"/> structure that was created.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatterCommandArguments.GetArgument(System.Int32)">
            <summary>
            Retrieves the argument with the specified index.
            </summary>
            <param name="index">The index of the argument to retrieve.</param>
            <returns>The argument with the specified index.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatterCommandArguments.GetNextArgument(Ultraviolet.Core.Text.StringFormatterCommandArgument@)">
            <summary>
            Retrieves the argument that comes immediately after the specified argument. 
            </summary>
            <param name="previousArgument">The argument which comes immediatley before the argument to retrieve.</param>
            <returns>The argument with the specified index.</returns>
        </member>
        <member name="P:Ultraviolet.Core.Text.StringFormatterCommandArguments.Input">
            <summary>
            Gets the input string from which the argument list was created.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Text.StringFormatterCommandArguments.Start">
            <summary>
            Gets the argument list's offset within the input string.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Text.StringFormatterCommandArguments.Length">
            <summary>
            Gets the argument list's length within the input string.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Text.StringFormatterCommandArguments.Count">
            <summary>
            Gets the number of arguments in the collection.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatterCommandArguments.GetArgumentInternal(System.Int32,System.Int32)">
            <summary>
            Searches the argument list for the specified argument.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.Text.StringFormatterCommandInfo">
            <summary>
            Represents the metadata required to handle a string formatter command.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringFormatterCommandInfo.#ctor(Ultraviolet.Core.Text.StringSegment,Ultraviolet.Core.Text.StringFormatterCommandArguments,Ultraviolet.Core.Text.StringFormatterCommandHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Text.StringFormatterCommandInfo"/> structure.
            </summary>
            <param name="commandName">The name of the command being handled.</param>
            <param name="commandArgs">The command's argument list.</param>
            <param name="commandHandler">The command's handler.</param>
        </member>
        <member name="P:Ultraviolet.Core.Text.StringFormatterCommandInfo.CommandName">
            <summary>
            Gets the name of the command being handled.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Text.StringFormatterCommandInfo.CommandArguments">
            <summary>
            Gets the command's argument list.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Text.StringFormatterCommandInfo.CommandHandler">
            <summary>
            Gets the command's handler.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.Text.StringPtr16">
            <summary>
            Represent a pointer to an unmanaged string where each character is 16 bits.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringPtr16.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Text.StringPtr16"/> structure from the specified <see langword="null"/>-terminated string.
            </summary>
            <param name="ptr">A pointer to the <see langword="null"/>-terminated string data.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringPtr16.#ctor(System.IntPtr,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Text.StringPtr16"/> structure.
            </summary>
            <param name="ptr">A pointer to the string data.</param>
            <param name="length">The number of characters in the string data.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringPtr16.op_Explicit(Ultraviolet.Core.Text.StringPtr16)~System.IntPtr">
            <summary>
            Converts the string pointer to an instance of <see cref="T:System.IntPtr"/>.
            </summary>
            <param name="ptr">The string pointer to convert.</param>
            <returns>The converted pointer.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringPtr16.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringPtr16.ToPointer">
            <summary>
            Converts the string pointer to a pointer to an unspecified type.
            </summary>
            <returns>A pointer to the string data.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringPtr16.ToTypedPointer">
            <summary>
            Converts the string pointer to a pointer to a sequence of characters.
            </summary>
            <returns>A pointer to the string data.</returns>
        </member>
        <member name="P:Ultraviolet.Core.Text.StringPtr16.Zero">
            <summary>
            Gets a <see langword="null"/> string pointer.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Text.StringPtr16.Item(System.Int32)">
            <summary>
            Gets the character at the specified index within the string.
            </summary>
            <param name="index">The index of the character to retrieve.</param>
            <returns>The character at the specified index within the string.</returns>
        </member>
        <member name="P:Ultraviolet.Core.Text.StringPtr16.Length">
            <summary>
            Gets the length of the string in characters.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringPtr16.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringPtr16.op_Equality(Ultraviolet.Core.Text.StringPtr16,Ultraviolet.Core.Text.StringPtr16)">
            <summary>
            Compares two objects to determine whether they are equal.
            </summary>
            <param name="v1">The first value to compare.</param>
            <param name="v2">The second value to compare.</param>
            <returns><see langword="true"/> if the two values are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringPtr16.op_Inequality(Ultraviolet.Core.Text.StringPtr16,Ultraviolet.Core.Text.StringPtr16)">
            <summary>
            Compares two objects to determine whether they are unequal.
            </summary>
            <param name="v1">The first value to compare.</param>
            <param name="v2">The second value to compare.</param>
            <returns><see langword="true"/> if the two values are unequal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringPtr16.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringPtr16.Equals(Ultraviolet.Core.Text.StringPtr16)">
            <inheritdoc/>
        </member>
        <member name="T:Ultraviolet.Core.Text.StringPtr8">
            <summary>
            Represent a pointer to an unmanaged string where each character is 8 bits.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringPtr8.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Text.StringPtr8"/> structure from the specified <see langword="null"/>-terminated string.
            </summary>
            <param name="ptr">A pointer to the <see langword="null"/>-terminated string data.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringPtr8.#ctor(System.IntPtr,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Text.StringPtr8"/> structure.
            </summary>
            <param name="ptr">A pointer to the string data.</param>
            <param name="length">The number of characters in the string data.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringPtr8.op_Explicit(Ultraviolet.Core.Text.StringPtr8)~System.IntPtr">
            <summary>
            Converts the string pointer to an instance of <see cref="T:System.IntPtr"/>.
            </summary>
            <param name="ptr">The string pointer to convert.</param>
            <returns>The converted pointer.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringPtr8.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringPtr8.ToPointer">
            <summary>
            Converts the string pointer to a pointer to an unspecified type.
            </summary>
            <returns>A pointer to the string data.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringPtr8.ToTypedPointer">
            <summary>
            Converts the string pointer to a pointer to an sequence of signed bytes.
            </summary>
            <returns>A pointer to the string data.</returns>
        </member>
        <member name="P:Ultraviolet.Core.Text.StringPtr8.Zero">
            <summary>
            Gets a <see langword="null"/> string pointer.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Text.StringPtr8.Item(System.Int32)">
            <summary>
            Gets the character at the specified index within the string.
            </summary>
            <param name="index">The index of the character to retrieve.</param>
            <returns>The character at the specified index within the string.</returns>
        </member>
        <member name="P:Ultraviolet.Core.Text.StringPtr8.Length">
            <summary>
            Gets the length of the string in characters.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringPtr8.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringPtr8.op_Equality(Ultraviolet.Core.Text.StringPtr8,Ultraviolet.Core.Text.StringPtr8)">
            <summary>
            Compares two objects to determine whether they are equal.
            </summary>
            <param name="v1">The first value to compare.</param>
            <param name="v2">The second value to compare.</param>
            <returns><see langword="true"/> if the two values are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringPtr8.op_Inequality(Ultraviolet.Core.Text.StringPtr8,Ultraviolet.Core.Text.StringPtr8)">
            <summary>
            Compares two objects to determine whether they are unequal.
            </summary>
            <param name="v1">The first value to compare.</param>
            <param name="v2">The second value to compare.</param>
            <returns><see langword="true"/> if the two values are unequal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringPtr8.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringPtr8.Equals(Ultraviolet.Core.Text.StringPtr8)">
            <inheritdoc/>
        </member>
        <member name="T:Ultraviolet.Core.Text.StringResource">
            <summary>
            Represents a localizable string resource.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringResource.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Text.StringResource"/> class.
            </summary>
            <param name="key">The string's localization key.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringResource.#ctor(Ultraviolet.Core.Text.LocalizationDatabase,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Text.StringResource"/> class.
            </summary>
            <param name="database">The localization database that contains the string resource.</param>
            <param name="key">The string's localization key.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringResource.op_Implicit(System.String)~Ultraviolet.Core.Text.StringResource">
            <summary>
            Implicitly converts a .NET string to a string resource.
            </summary>
            <param name="key">The <see cref="T:System.String"/> to convert.</param>
            <returns>The converted <see cref="T:Ultraviolet.Core.Text.StringResource"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringResource.op_Implicit(Ultraviolet.Core.Text.StringResource)~System.String">
            <summary>
            Implicitly converts a string resource resource to a .NET string.
            </summary>
            <param name="resource">The <see cref="T:Ultraviolet.Core.Text.StringResource"/> to convert.</param>
            <returns>The converted <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringResource.Format(System.Object[])">
            <summary>
            Formats the string with the specified arguments.
            </summary>
            <param name="args">The arguments with which to format the string.</param>
            <returns>The formatted string.</returns>
        </member>
        <member name="P:Ultraviolet.Core.Text.StringResource.Database">
            <summary>
            Gets the string resource's associated localization database.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Text.StringResource.Key">
            <summary>
            Gets the string resource's localization key.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Text.StringResource.Value">
            <summary>
            Gets the string resource's localized value.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.Text.StringSegment">
            <summary>
            Represents a segment of a string.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSegment.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Text.StringSegment"/> structure.
            </summary>
            <param name="source">The source <see cref="T:System.String"/> object from which the segment's characters are retrieved.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSegment.#ctor(System.Text.StringBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Text.StringSegment"/> structure.
            </summary>
            <param name="source">The source <see cref="T:System.Text.StringBuilder"/> object from which the segment's characters are retrieved.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSegment.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Text.StringSegment"/> structure.
            </summary>
            <param name="source">The source <see cref="T:System.String"/> object from which the segment's characters are retrieved.</param>
            <param name="start">The index of the segment's first character within its parent string.</param>
            <param name="length">The number of characters in the segment.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSegment.#ctor(System.Text.StringBuilder,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Text.StringSegment"/> structure.
            </summary>
            <param name="source">The source <see cref="T:System.Text.StringBuilder"/> object from which the segment's characters are retrieved.</param>
            <param name="start">The index of the segment's first character within its parent string.</param>
            <param name="length">The number of characters in the segment.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSegment.#ctor(Ultraviolet.Core.Text.StringSegment,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.Text.StringSegment"/> structure.
            </summary>
            <param name="source">The source <see cref="T:Ultraviolet.Core.Text.StringSegment"/> object from which the segment's characters are retrieved.</param>
            <param name="start">The index of the segment's first character within its parent string.</param>
            <param name="length">The number of characters in the segment.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSegment.op_Implicit(System.String)~Ultraviolet.Core.Text.StringSegment">
            <summary>
            Implicitly converts a <see cref="T:System.String"/> to a string segment.
            </summary>
            <param name="s">The <see cref="T:System.String"/> to convert.</param>
            <returns>The converted <see cref="T:Ultraviolet.Core.Text.StringSegment"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSegment.op_Explicit(System.Text.StringBuilder)~Ultraviolet.Core.Text.StringSegment">
            <summary>
            Explicitly converts a <see cref="T:System.Text.StringBuilder"/> to a string segment.
            </summary>
            <param name="sb">The <see cref="T:System.Text.StringBuilder"/> to convert.</param>
            <returns>The converted <see cref="T:Ultraviolet.Core.Text.StringSegment"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSegment.AreSegmentsContiguous(Ultraviolet.Core.Text.StringSegment,Ultraviolet.Core.Text.StringSegment)">
            <summary>
            Gets a value indicating whether the specified string segments are contiguous.
            </summary>
            <param name="s1">The first <see cref="T:Ultraviolet.Core.Text.StringSegment"/>.</param>
            <param name="s2">The second <see cref="T:Ultraviolet.Core.Text.StringSegment"/>.</param>
            <returns><see langword="true"/> if the string segments are contiguous; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSegment.CombineSegments(Ultraviolet.Core.Text.StringSegment,Ultraviolet.Core.Text.StringSegment)">
            <summary>
            Combines two contiguous string segments.
            </summary>
            <param name="s1">The first <see cref="T:Ultraviolet.Core.Text.StringSegment"/> to combine.</param>
            <param name="s2">The second <see cref="T:Ultraviolet.Core.Text.StringSegment"/> to combine.</param>
            <returns>The combined string segment.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSegment.FromSource(Ultraviolet.Core.Text.StringSegment,System.Int32,System.Int32)">
            <summary>
            Creates a new <see cref="T:Ultraviolet.Core.Text.StringSegment"/> from the same source as the specified segment.
            </summary>
            <param name="segment">The segment from which to retrieve a string source.</param>
            <param name="start">The index of the segment's first character within its parent string.</param>
            <param name="length">The number of characters in the segment.</param>
            <returns>The string segment that was created.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSegment.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSegment.Substring(System.Int32)">
            <summary>
            Creates a string segment which is a substring of this segment.
            </summary>
            <param name="start">The starting character of the substring within this string segment.</param>
            <returns>A <see cref="T:Ultraviolet.Core.Text.StringSegment"/> which is a substring of this segment.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSegment.Substring(System.Int32,System.Int32)">
            <summary>
            Creates a string segment which is a substring of this segment.
            </summary>
            <param name="start">The starting character of the substring within this string segment.</param>
            <param name="length">The number of characters in the substring.</param>
            <returns>A <see cref="T:Ultraviolet.Core.Text.StringSegment"/> which is a substring of this segment.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSegment.IndexOf(System.Char)">
            <summary>
            Gets the index of the first occurrence of the specified character within the string segment.
            </summary>
            <param name="value">The character for which to search.</param>
            <returns>The index of the first occurrence of the specified character, or -1 if the segment does not contain the character.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSegment.IndexOf(System.String)">
            <summary>
            Gets the index of the first occurrence of the specified string within the string segment.
            </summary>
            <param name="value">The string for which to search.</param>
            <returns>The index of the first occurrence of the specified string, or -1 if the segment does not contain the string.</returns>
        </member>
        <member name="P:Ultraviolet.Core.Text.StringSegment.Item(System.Int32)">
            <summary>
            Gets the character at the specified index within the string segment.
            </summary>
            <param name="ix">The index of the character to retrieve.</param>
            <returns>The character at the specified index.</returns>
        </member>
        <member name="P:Ultraviolet.Core.Text.StringSegment.Source">
            <summary>
            Gets the source object from which the segment's characters are retrieved.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Text.StringSegment.SourceString">
            <summary>
            Gets the source <see cref="T:System.String"/> from which the segment's characters are retrieved,
            if the segment's source is a <see cref="T:System.String"/> object; otherwise, returns <see langword="null"/>.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Text.StringSegment.SourceStringBuilder">
            <summary>
            Gets the source <see cref="T:System.Text.StringBuilder"/> from which the segment's characters are retrieved,
            if the segment's source is a <see cref="T:System.Text.StringBuilder"/> object; otherwise, returns <see langword="null"/>.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Text.StringSegment.Start">
            <summary>
            Gets the index of the string segment's first character within its parent string.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Text.StringSegment.Length">
            <summary>
            Gets the number of characters in the segment.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Text.StringSegment.SourceLength">
            <summary>
            Gets the number of characters in the segment's source string.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Text.StringSegment.IsEmpty">
            <summary>
            Gets a value indicating whether this is an empty string segment.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Text.StringSegment.IsBackedByString">
            <summary>
            Gets a value indicating whether <see cref="P:Ultraviolet.Core.Text.StringSegment.Source"/> is a <see cref="T:System.String"/> instance.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.Text.StringSegment.IsBackedByStringBuilder">
            <summary>
            Gets a value indicating whether <see cref="P:Ultraviolet.Core.Text.StringSegment.Source"/> is a <see cref="T:System.Text.StringBuilder"/> instance.
            </summary>
        </member>
        <member name="F:Ultraviolet.Core.Text.StringSegment.Empty">
            <summary>
            Represents an empty string segment.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSegment.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSegment.op_Equality(Ultraviolet.Core.Text.StringSegment,Ultraviolet.Core.Text.StringSegment)">
            <summary>
            Compares two objects to determine whether they are equal.
            </summary>
            <param name="v1">The first value to compare.</param>
            <param name="v2">The second value to compare.</param>
            <returns><see langword="true"/> if the two values are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSegment.op_Inequality(Ultraviolet.Core.Text.StringSegment,Ultraviolet.Core.Text.StringSegment)">
            <summary>
            Compares two objects to determine whether they are unequal.
            </summary>
            <param name="v1">The first value to compare.</param>
            <param name="v2">The second value to compare.</param>
            <returns><see langword="true"/> if the two values are unequal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSegment.op_Equality(Ultraviolet.Core.Text.StringSegment,System.String)">
            <summary>
            Compares two objects to determine whether they are equal.
            </summary>
            <param name="v1">The first value to compare.</param>
            <param name="v2">The second value to compare.</param>
            <returns><see langword="true"/> if the two values are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSegment.op_Inequality(Ultraviolet.Core.Text.StringSegment,System.String)">
            <summary>
            Compares two objects to determine whether they are unequal.
            </summary>
            <param name="v1">The first value to compare.</param>
            <param name="v2">The second value to compare.</param>
            <returns><see langword="true"/> if the two values are unequal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSegment.op_Equality(Ultraviolet.Core.Text.StringSegment,System.Text.StringBuilder)">
            <summary>
            Compares two objects to determine whether they are equal.
            </summary>
            <param name="v1">The first value to compare.</param>
            <param name="v2">The second value to compare.</param>
            <returns><see langword="true"/> if the two values are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSegment.op_Inequality(Ultraviolet.Core.Text.StringSegment,System.Text.StringBuilder)">
            <summary>
            Compares two objects to determine whether they are unequal.
            </summary>
            <param name="v1">The first value to compare.</param>
            <param name="v2">The second value to compare.</param>
            <returns><see langword="true"/> if the two values are unequal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSegment.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSegment.Equals(Ultraviolet.Core.Text.StringSegment)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSegment.Equals(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSegment.Equals(System.Text.StringBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSegment.CalculateHashCode(System.Object,System.Int32,System.Int32)">
            <summary>
            Calculates the hash code for the specified instance.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.Text.StringSegmentConversion">
            <summary>
            Contains methods for performing low- or no-allocation conversions 
            of the <see cref="T:Ultraviolet.Core.Text.StringSegment"/> structure to other types.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSegmentConversion.ParseInt32(Ultraviolet.Core.Text.StringSegment)">
            <summary>
            Converts the decimal text of the specified <see cref="T:Ultraviolet.Core.Text.StringSegment"/> to an
            instance of <see cref="T:System.Int32"/>, throwing a <see cref="T:System.FormatException"/> if the conversion fails.
            </summary>
            <param name="segment">The string segment to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSegmentConversion.TryParseInt32(Ultraviolet.Core.Text.StringSegment,System.Int32@)">
            <summary>
            Converts the decimal text of the specified <see cref="T:Ultraviolet.Core.Text.StringSegment"/> to an 
            instance of <see cref="T:System.Int32"/> if possible.
            </summary>
            <param name="segment">The string segment to convert.</param>
            <param name="result">The converted value.</param>
            <returns><see langword="true"/> if the conversion succeeded; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSegmentConversion.ParseHexadecimalInt32(Ultraviolet.Core.Text.StringSegment)">
            <summary>
            Converts the hexadecimal text of the specified <see cref="T:Ultraviolet.Core.Text.StringSegment"/> to an
            instance of <see cref="T:System.Int32"/>, throwing a <see cref="T:System.FormatException"/> if the conversion fails.
            </summary>
            <param name="segment">The string segment to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSegmentConversion.TryParseHexadecimalInt32(Ultraviolet.Core.Text.StringSegment,System.Int32@)">
            <summary>
            Converts the hexadecimal text of the specified <see cref="T:Ultraviolet.Core.Text.StringSegment"/> to an 
            instance of <see cref="T:System.Int32"/> if possible.
            </summary>
            <param name="segment">The string segment to convert.</param>
            <param name="result">The converted value.</param>
            <returns><see langword="true"/> if the conversion succeeded; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSegmentConversion.ParseUInt32(Ultraviolet.Core.Text.StringSegment)">
            <summary>
            Converts the decimal text of the specified <see cref="T:Ultraviolet.Core.Text.StringSegment"/> to an
            instance of <see cref="T:System.UInt32"/>, throwing a <see cref="T:System.FormatException"/> if the conversion fails.
            </summary>
            <param name="segment">The string segment to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSegmentConversion.TryParseUInt32(Ultraviolet.Core.Text.StringSegment,System.UInt32@)">
            <summary>
            Converts the decimal text of the specified <see cref="T:Ultraviolet.Core.Text.StringSegment"/> to an 
            instance of <see cref="T:System.UInt32"/> if possible.
            </summary>
            <param name="segment">The string segment to convert.</param>
            <param name="result">The converted value.</param>
            <returns><see langword="true"/> if the conversion succeeded; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSegmentConversion.ParseHexadecimalUInt32(Ultraviolet.Core.Text.StringSegment)">
            <summary>
            Converts the hexadecimal text of the specified <see cref="T:Ultraviolet.Core.Text.StringSegment"/> to an
            instance of <see cref="T:System.UInt32"/>, throwing a <see cref="T:System.FormatException"/> if the conversion fails.
            </summary>
            <param name="segment">The string segment to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSegmentConversion.TryParseHexadecimalUInt32(Ultraviolet.Core.Text.StringSegment,System.UInt32@)">
            <summary>
            Converts the hexadecimal text of the specified <see cref="T:Ultraviolet.Core.Text.StringSegment"/> to an 
            instance of <see cref="T:System.UInt32"/> if possible.
            </summary>
            <param name="segment">The string segment to convert.</param>
            <param name="result">The converted value.</param>
            <returns><see langword="true"/> if the conversion succeeded; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSegmentConversion.CountLeadingSpace(Ultraviolet.Core.Text.StringSegment@)">
            <summary>
            Counts the number of leading spaces in the specified string segment.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSegmentConversion.CountTrailingSpace(Ultraviolet.Core.Text.StringSegment@)">
            <summary>
            Counts the number of trailing spaces in the specified string segment.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSegmentConversion.ConvertDecimalDigit(System.Char,System.Int32@)">
            <summary>
            Converts a character that represents a decimal digit into an integer value.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSegmentConversion.ConvertHexadecimalDigit(System.Char,System.Int32@)">
            <summary>
            Converts a character that represents a hexadecimal digit into an integer value.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.Text.StringSegmentExtensions">
            <summary>
            Contains extension methods relating to the <see cref="T:Ultraviolet.Core.Text.StringSegment"/> structure.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSegmentExtensions.Segment(System.String,System.Int32)">
            <summary>
            Creates a string segment starting from the specified character and continuing to the end of the string.
            </summary>
            <param name="str">The <see cref="T:System.String"/> from which to create a string segment.</param>
            <param name="start">The index of the first character in the string segment.</param>
            <returns>A <see cref="T:Ultraviolet.Core.Text.StringSegment"/> that was created from the specified substring.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.StringSegmentExtensions.Segment(System.String,System.Int32,System.Int32)">
            <summary>
            Creates a string segment starting from the specified character and continuing for the specified number of characters.
            </summary>
            <param name="str">The <see cref="T:System.String"/> from which to create a string segment.</param>
            <param name="start">The index of the first character in the string segment.</param>
            <param name="length">The number of characters in the string segment.</param>
            <returns>A <see cref="T:Ultraviolet.Core.Text.StringSegment"/> that was created from the specified substring.</returns>
        </member>
        <member name="T:Ultraviolet.Core.Text.Tokenizer">
            <summary>
            Represents a class that splits strings into tokens.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Text.Tokenizer.Tokenize(System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            Splits the specified string into tokens.
            </summary>
            <param name="str">The <see cref="T:System.String"/> to tokenize.</param>
            <param name="tokens">The list to populate with the retrieved tokens.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.Tokenizer.Tokenize(System.String,System.Collections.Generic.IList{System.String},System.Int32)">
            <summary>
            Splits the specified string into tokens.
            </summary>
            <param name="str">The <see cref="T:System.String"/> to tokenize.</param>
            <param name="count">The maximum number of tokens to retrieve.</param>
            <param name="tokens">The list to populate with the retrieved tokens.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.Tokenizer.Tokenize(System.String,System.Collections.Generic.IList{System.String},System.Int32,System.String@)">
            <summary>
            Splits the specified string into tokens.
            </summary>
            <param name="str">The <see cref="T:System.String"/> to tokenize.</param>
            <param name="tokens">The list to populate with the retrieved tokens.</param>
            <param name="count">The maximum number of tokens to retrieve.</param>
            <param name="remainder">The portion of the original string that was not tokenized.</param>
        </member>
        <member name="M:Ultraviolet.Core.Text.Tokenizer.IsStartOfToken(System.String,System.Int32,System.Nullable{System.Char}@)">
            <summary>
            Gets a value indicating whether the specified character is the beginning of a token.
            </summary>
            <param name="str">The string that contains the character to evaluate.</param>
            <param name="index">The index of the character to evaluate.</param>
            <param name="delimiter">The character that delimits the start of the token.</param>
            <returns><see langword="true"/> if the specified character is the beginning of a token; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.Tokenizer.IsEndOfToken(System.String,System.Int32,System.Nullable{System.Char})">
            <summary>
            Gets a value indicating whether the specified character is the end of a token.
            </summary>
            <param name="str">The string that contains the character to evaluate.</param>
            <param name="index">The index of the character to evaluate.</param>
            <param name="delimiter">The character that must delimit the end of the token.</param>
            <returns><see langword="true"/> if the specified character is the end of a token; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Text.Tokenizer.IsDelimiter(System.String,System.Int32)">
            <summary>
            Gets a value indicating whether the specified character is a token delimiter.
            </summary>
            <param name="str">The string that contains the character to evaluate.</param>
            <param name="index">The index of the character to evaluate.</param>
            <returns><see langword="true"/> if the specified character is a token delimiter; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Ultraviolet.Core.UltravioletNative">
            <summary>
            Contains native methods used by the Ultraviolet Framework.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.UltravioletPlatform">
            <summary>
            Represents the platforms on which an Ultraviolet application can run.
            </summary>
        </member>
        <member name="F:Ultraviolet.Core.UltravioletPlatform.Windows">
            <summary>
            Dekstop Windows.
            </summary>
        </member>
        <member name="F:Ultraviolet.Core.UltravioletPlatform.Linux">
            <summary>
            Desktop Linux.
            </summary>
        </member>
        <member name="F:Ultraviolet.Core.UltravioletPlatform.Android">
            <summary>
            Mobile Android.
            </summary>
        </member>
        <member name="F:Ultraviolet.Core.UltravioletPlatform.macOS">
            <summary>
            Desktop macOS.
            </summary>
        </member>
        <member name="F:Ultraviolet.Core.UltravioletPlatform.iOS">
            <summary>
            Mobile iOS.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.UltravioletPlatformInfo">
            <summary>
            Contains information relating to the current platform.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.UltravioletPlatformInfo.#cctor">
            <summary>
            Initializes the <see cref="T:Ultraviolet.Core.UltravioletPlatformInfo"/> type.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.UltravioletPlatformInfo.IsRuntimeCodeGenerationSupported">
            <summary>
            Gets a value indicating whether runtime code generation is supported on the current platform.
            </summary>
            <returns><see langword="true"/> if the current platform supports runtime code generation; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.UltravioletPlatformInfo.IsRuntimeCodeGenerationSupported(Ultraviolet.Core.UltravioletPlatform)">
            <summary>
            Gets a value indicating whether runtime code generation is supported on the specified platform.
            </summary>
            <param name="platform">The platform to evaluate.</param>
            <returns><see langword="true"/> if the specified platform supports runtime code generation; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:Ultraviolet.Core.UltravioletPlatformInfo.CurrentRuntime">
            <summary>
            Gets an <see cref="T:Ultraviolet.Core.UltravioletRuntime"/> value indicating which of Ultraviolet's supported
            runtimes is currently executing this application.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.UltravioletPlatformInfo.CurrentPlatform">
            <summary>
            Gets an <see cref="T:Ultraviolet.Core.UltravioletPlatform"/> value indicating which of Ultraviolet's supported
            platforms is currently executing this application.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.UltravioletPlatformInfo.CurrentPlatformMachineHardwareName">
            <summary>
            Gets the string which contains the machine hardware name for the current platform.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.UltravioletPlatformInfo.CurrentPlatformVersion">
            <summary>
            Gets the string which contains the version information for the current platform.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.UltravioletPlatformInfo.DetectCurrentRuntime">
            <summary>
            Attempts to detect the current runtime.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.UltravioletPlatformInfo.DetectCurrentPlatform(System.String@)">
            <summary>
            Attempts to detect the current platform.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.PreserveAttribute">
            <summary>
            Prevents the Xamarin linker from linking the target.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.PreserveAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.PreserveAttribute"/> class.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.PreserveAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.PreserveAttribute"/> class.
            </summary>
        </member>
        <member name="F:Ultraviolet.Core.PreserveAttribute.AllMembers">
            <summary>
            Ensures that all members of this type are preserved.
            </summary>
        </member>
        <member name="F:Ultraviolet.Core.PreserveAttribute.Conditional">
            <summary>
            Flags the method as a method to preserve during linking if the container class is pulled in.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.SafeDispose">
            <summary>
            Contains methods for safely disposing of objects without needing to check them for nullity.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.SafeDispose.Dispose(System.Object)">
            <summary>
            Safely disposes the specified object, if it implements <see cref="T:System.IDisposable"/>.
            </summary>
            <param name="obj">The object to dispose.</param>
        </member>
        <member name="M:Ultraviolet.Core.SafeDispose.DisposeRef(System.Object@)">
            <summary>
            Safely disposes the specified object, if it implements <see cref="T:System.IDisposable"/>, and sets the passed reference to <see langword="null"/>.
            </summary>
            <param name="obj">The object to dispose.</param>
        </member>
        <member name="M:Ultraviolet.Core.SafeDispose.Dispose``1(``0)">
            <summary>
            Safely disposes the specified object.
            </summary>
            <typeparam name="T">The type of object being disposed.</typeparam>
            <param name="obj">The object to dispose.</param>
        </member>
        <member name="M:Ultraviolet.Core.SafeDispose.DisposeRef``1(``0@)">
            <summary>
            Safely disposes the specified object and sets the passed reference to <see langword="null"/>.
            </summary>
            <typeparam name="T">The type of object being disposed.</typeparam>
            <param name="obj">The object to dispose.</param>
            <returns>A <see langword="null"/> reference.</returns>
        </member>
        <member name="T:Ultraviolet.Core.Splinq.NamespaceDoc">
            <summary>
            The <see cref="N:Ultraviolet.Core.Splinq"/> namespace contains alternative implementations of 
            common LINQ methods (such as <see cref="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})"/> and
            <see cref="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})"/>) for specific collection types
            which are designed to reduce allocations caused by boxing.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.Splinq.StackExtensions">
            <summary>
            Contains SpLINQ extension methods for the <see cref="T:System.Collections.Generic.Stack`1"/> class.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.StackExtensions.Any``1(System.Collections.Generic.Stack{``0})">
            <summary>
            Gets a value indicating whether the specified stack contains any elements.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.Stack`1"/> to evaluate.</param>
            <returns><see langword="true"/> if the source stack contains any elements; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.StackExtensions.Any``1(System.Collections.Generic.Stack{``0},System.Predicate{``0})">
            <summary>
            Gets a value indicating whether the specified stack contains any elements which match the specified predicate.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.Stack`1"/> to evaluate.</param>
            <param name="predicate">The predicate against which to evaluate the items of <paramref name="source"/>.</param>
            <returns><see langword="true"/> if the source stack contains any elements; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.StackExtensions.All``1(System.Collections.Generic.Stack{``0},System.Predicate{``0})">
            <summary>
            Gets a value indicating whether all of the items in the specified stack match the specified predicate.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.Stack`1"/> to evaluate.</param>
            <param name="predicate">The predicate against which to evaluate the items of <paramref name="source"/>.</param>
            <returns><see langword="true"/> if all of the items in the source stack match the specified predicate; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.StackExtensions.Count``1(System.Collections.Generic.Stack{``0})">
            <summary>
            Gets the number of items in the specified stack.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.Stack`1"/> to evaluate.</param>
            <returns>The number of items in the source stack.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.StackExtensions.Count``1(System.Collections.Generic.Stack{``0},System.Predicate{``0})">
            <summary>
            Gets the number of items in the specified stack which match the specified predicate.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.Stack`1"/> to evaluate.</param>
            <param name="predicate">The predicate against which to evaluate the items of <paramref name="source"/>.</param>
            <returns>The number of items in the source stack.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.StackExtensions.First``1(System.Collections.Generic.Stack{``0})">
            <summary>
            Gets the first item in the specified stack.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.Stack`1"/> to evaluate.</param>
            <returns>The first item in the source stack.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.StackExtensions.First``1(System.Collections.Generic.Stack{``0},System.Predicate{``0})">
            <summary>
            Gets the first item in the specified stack that satisfies the given predicate.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.Stack`1"/> to evaluate.</param>
            <param name="predicate">The predicate against which to evaluate the items of <paramref name="source"/>.</param>
            <returns>The first item in the source stack that satisfies the predicate.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.StackExtensions.Last``1(System.Collections.Generic.Stack{``0})">
            <summary>
            Gets the last item in the specified stack.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.Stack`1"/> to evaluate.</param>
            <returns>The last item in the source stack.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.StackExtensions.Last``1(System.Collections.Generic.Stack{``0},System.Predicate{``0})">
            <summary>
            Gets the last item in the specified stack that satisfies the given predicate.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.Stack`1"/> to evaluate.</param>
            <param name="predicate">The predicate against which to evaluate the items of <paramref name="source"/>.</param>
            <returns>The last item in the source stack that satisfies the predicate.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.StackExtensions.Single``1(System.Collections.Generic.Stack{``0})">
            <summary>
            Returns the only element in the stack, and throws an exception if there is not exactly
            one item in the stack.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.Stack`1"/> to evaluate.</param>
            <returns>The single item in the source stack.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.StackExtensions.Single``1(System.Collections.Generic.Stack{``0},System.Predicate{``0})">
            <summary>
            Returns the only element in the stack that satisfies the given predicate, and throws an exception if there 
            is not exactly one such item in the stack.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.Stack`1"/> to evaluate.</param>
            <param name="predicate">The predicate against which to evaluate the items of <paramref name="source"/>.</param>
            <returns>The single item in the source stack that matches the specified predicate.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.StackExtensions.SingleOrDefault``1(System.Collections.Generic.Stack{``0})">
            <summary>
            Returns the only element in the stack, or a default value if no items exist in the stack.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.Stack`1"/> to evaluate.</param>
            <returns>The single item in the source stack, or a default value.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.StackExtensions.SingleOrDefault``1(System.Collections.Generic.Stack{``0},System.Predicate{``0})">
            <summary>
            Returns the only element in the stack that satisfies the given predicate, or a default value if 
            no such items exist in the stack.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.Stack`1"/> to evaluate.</param>
            <param name="predicate">The predicate against which to evaluate the items of <paramref name="source"/>.</param>
            <returns>The single item in the source stack, or a default value.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.StackExtensions.Max``1(System.Collections.Generic.Stack{``0})">
            <summary>
            Gets the maximum item in the stack.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.Stack`1"/> to evaluate.</param>
            <returns>The maximum item in the stack.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.StackExtensions.Min``1(System.Collections.Generic.Stack{``0})">
            <summary>
            Gets the minimum item in the stack.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.Stack`1"/> to evaluate.</param>
            <returns>The minimum item in the stack.</returns>
        </member>
        <member name="T:Ultraviolet.Core.Splinq.QueueExtensions">
            <summary>
            Contains SpLINQ extension methods for the <see cref="T:System.Collections.Generic.Queue`1"/> class.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.QueueExtensions.Any``1(System.Collections.Generic.Queue{``0})">
            <summary>
            Gets a value indicating whether the specified queue contains any elements.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.Queue`1"/> to evaluate.</param>
            <returns><see langword="true"/> if the source queue contains any elements; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.QueueExtensions.Any``1(System.Collections.Generic.Queue{``0},System.Predicate{``0})">
            <summary>
            Gets a value indicating whether the specified queue contains any elements which match the specified predicate.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.Queue`1"/> to evaluate.</param>
            <param name="predicate">The predicate against which to evaluate the items of <paramref name="source"/>.</param>
            <returns><see langword="true"/> if the source queue contains any elements; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.QueueExtensions.All``1(System.Collections.Generic.Queue{``0},System.Predicate{``0})">
            <summary>
            Gets a value indicating whether all of the items in the specified queue match the specified predicate.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.Queue`1"/> to evaluate.</param>
            <param name="predicate">The predicate against which to evaluate the items of <paramref name="source"/>.</param>
            <returns><see langword="true"/> if all of the items in the source queue match the specified predicate; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.QueueExtensions.Count``1(System.Collections.Generic.Queue{``0})">
            <summary>
            Gets the number of items in the specified queue.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.Queue`1"/> to evaluate.</param>
            <returns>The number of items in the source queue.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.QueueExtensions.Count``1(System.Collections.Generic.Queue{``0},System.Predicate{``0})">
            <summary>
            Gets the number of items in the specified queue which match the specified predicate.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.Queue`1"/> to evaluate.</param>
            <param name="predicate">The predicate against which to evaluate the items of <paramref name="source"/>.</param>
            <returns>The number of items in the source queue.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.QueueExtensions.First``1(System.Collections.Generic.Queue{``0})">
            <summary>
            Gets the first item in the specified queue.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.Queue`1"/> to evaluate.</param>
            <returns>The first item in the source queue.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.QueueExtensions.First``1(System.Collections.Generic.Queue{``0},System.Predicate{``0})">
            <summary>
            Gets the first item in the specified queue that satisfies the given predicate.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.Queue`1"/> to evaluate.</param>
            <param name="predicate">The predicate against which to evaluate the items of <paramref name="source"/>.</param>
            <returns>The first item in the source queue that satisfies the predicate.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.QueueExtensions.Last``1(System.Collections.Generic.Queue{``0})">
            <summary>
            Gets the last item in the specified queue.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.Queue`1"/> to evaluate.</param>
            <returns>The last item in the source queue.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.QueueExtensions.Last``1(System.Collections.Generic.Queue{``0},System.Predicate{``0})">
            <summary>
            Gets the last item in the specified queue that satisfies the given predicate.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.Queue`1"/> to evaluate.</param>
            <param name="predicate">The predicate against which to evaluate the items of <paramref name="source"/>.</param>
            <returns>The last item in the source queue that satisfies the predicate.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.QueueExtensions.Single``1(System.Collections.Generic.Queue{``0})">
            <summary>
            Returns the only element in the queue, and throws an exception if there is not exactly
            one item in the queue.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.Queue`1"/> to evaluate.</param>
            <returns>The single item in the source queue.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.QueueExtensions.Single``1(System.Collections.Generic.Queue{``0},System.Predicate{``0})">
            <summary>
            Returns the only element in the queue that satisfies the given predicate, and throws an exception if there 
            is not exactly one such item in the queue.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.Queue`1"/> to evaluate.</param>
            <param name="predicate">The predicate against which to evaluate the items of <paramref name="source"/>.</param>
            <returns>The single item in the source queue that matches the specified predicate.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.QueueExtensions.SingleOrDefault``1(System.Collections.Generic.Queue{``0})">
            <summary>
            Returns the only element in the queue, or a default value if no items exist in the queue.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.Queue`1"/> to evaluate.</param>
            <returns>The single item in the source queue, or a default value.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.QueueExtensions.SingleOrDefault``1(System.Collections.Generic.Queue{``0},System.Predicate{``0})">
            <summary>
            Returns the only element in the queue that satisfies the given predicate, or a default value if 
            no such items exist in the queue.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.Queue`1"/> to evaluate.</param>
            <param name="predicate">The predicate against which to evaluate the items of <paramref name="source"/>.</param>
            <returns>The single item in the source queue, or a default value.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.QueueExtensions.Max``1(System.Collections.Generic.Queue{``0})">
            <summary>
            Gets the maximum item in the queue.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.Queue`1"/> to evaluate.</param>
            <returns>The maximum item in the queue.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.QueueExtensions.Min``1(System.Collections.Generic.Queue{``0})">
            <summary>
            Gets the minimum item in the queue.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.Queue`1"/> to evaluate.</param>
            <returns>The minimum item in the queue.</returns>
        </member>
        <member name="T:Ultraviolet.Core.Splinq.HashSetExtensions">
            <summary>
            Contains SpLINQ extension methods for the <see cref="T:System.Collections.Generic.HashSet`1"/> class.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.HashSetExtensions.Any``1(System.Collections.Generic.HashSet{``0})">
            <summary>
            Gets a value indicating whether the specified set contains any elements.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.HashSet`1"/> to evaluate.</param>
            <returns><see langword="true"/> if the source set contains any elements; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.HashSetExtensions.Any``1(System.Collections.Generic.HashSet{``0},System.Predicate{``0})">
            <summary>
            Gets a value indicating whether the specified set contains any elements which match the specified predicate.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.HashSet`1"/> to evaluate.</param>
            <param name="predicate">The predicate against which to evaluate the items of <paramref name="source"/>.</param>
            <returns><see langword="true"/> if the source set contains any elements; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.HashSetExtensions.All``1(System.Collections.Generic.HashSet{``0},System.Predicate{``0})">
            <summary>
            Gets a value indicating whether all of the items in the specified set match the specified predicate.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.HashSet`1"/> to evaluate.</param>
            <param name="predicate">The predicate against which to evaluate the items of <paramref name="source"/>.</param>
            <returns><see langword="true"/> if all of the items in the source set match the specified predicate; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.HashSetExtensions.Count``1(System.Collections.Generic.HashSet{``0})">
            <summary>
            Gets the number of items in the specified set.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.HashSet`1"/> to evaluate.</param>
            <returns>The number of items in the source set.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.HashSetExtensions.Count``1(System.Collections.Generic.HashSet{``0},System.Predicate{``0})">
            <summary>
            Gets the number of items in the specified set which match the specified predicate.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.HashSet`1"/> to evaluate.</param>
            <param name="predicate">The predicate against which to evaluate the items of <paramref name="source"/>.</param>
            <returns>The number of items in the source set.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.HashSetExtensions.First``1(System.Collections.Generic.HashSet{``0})">
            <summary>
            Gets the first item in the specified set.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.HashSet`1"/> to evaluate.</param>
            <returns>The first item in the source set.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.HashSetExtensions.First``1(System.Collections.Generic.HashSet{``0},System.Predicate{``0})">
            <summary>
            Gets the first item in the specified set that satisfies the given predicate.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.HashSet`1"/> to evaluate.</param>
            <param name="predicate">The predicate against which to evaluate the items of <paramref name="source"/>.</param>
            <returns>The first item in the source set that satisfies the predicate.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.HashSetExtensions.Last``1(System.Collections.Generic.HashSet{``0})">
            <summary>
            Gets the last item in the specified set.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.HashSet`1"/> to evaluate.</param>
            <returns>The last item in the source set.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.HashSetExtensions.Last``1(System.Collections.Generic.HashSet{``0},System.Predicate{``0})">
            <summary>
            Gets the last item in the specified set that satisfies the given predicate.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.HashSet`1"/> to evaluate.</param>
            <param name="predicate">The predicate against which to evaluate the items of <paramref name="source"/>.</param>
            <returns>The last item in the source set that satisfies the predicate.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.HashSetExtensions.Single``1(System.Collections.Generic.HashSet{``0})">
            <summary>
            Returns the only element in the set, and throws an exception if there is not exactly
            one item in the set.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.HashSet`1"/> to evaluate.</param>
            <returns>The single item in the source set.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.HashSetExtensions.Single``1(System.Collections.Generic.HashSet{``0},System.Predicate{``0})">
            <summary>
            Returns the only element in the set that satisfies the given predicate, and throws an exception if there 
            is not exactly one such item in the set.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.HashSet`1"/> to evaluate.</param>
            <param name="predicate">The predicate against which to evaluate the items of <paramref name="source"/>.</param>
            <returns>The single item in the source set that matches the specified predicate.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.HashSetExtensions.SingleOrDefault``1(System.Collections.Generic.HashSet{``0})">
            <summary>
            Returns the only element in the set, or a default value if no items exist in the set.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.HashSet`1"/> to evaluate.</param>
            <returns>The single item in the source set, or a default value.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.HashSetExtensions.SingleOrDefault``1(System.Collections.Generic.HashSet{``0},System.Predicate{``0})">
            <summary>
            Returns the only element in the set that satisfies the given predicate, or a default value if 
            no such items exist in the set.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.HashSet`1"/> to evaluate.</param>
            <param name="predicate">The predicate against which to evaluate the items of <paramref name="source"/>.</param>
            <returns>The single item in the source set, or a default value.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.HashSetExtensions.Max``1(System.Collections.Generic.HashSet{``0})">
            <summary>
            Gets the maximum item in the set.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.HashSet`1"/> to evaluate.</param>
            <returns>The maximum item in the set.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.HashSetExtensions.Min``1(System.Collections.Generic.HashSet{``0})">
            <summary>
            Gets the minimum item in the set.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.HashSet`1"/> to evaluate.</param>
            <returns>The minimum item in the set.</returns>
        </member>
        <member name="T:Ultraviolet.Core.Splinq.ObservableDictionaryExtensions">
            <summary>
            Contains SpLINQ extension methods for the <see cref="T:Ultraviolet.Core.Collections.ObservableDictionary`2"/> class.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.ObservableDictionaryExtensions.Any``2(Ultraviolet.Core.Collections.ObservableDictionary{``0,``1})">
            <summary>
            Gets a value indicating whether the specified dictionary contains any elements.
            </summary>
            <typeparam name="TKey">The type of key used by <paramref name="source"/>.</typeparam>
            <typeparam name="TValue">The type of value used by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:Ultraviolet.Core.Collections.ObservableDictionary`2"/> to evaluate.</param>
            <returns><see langword="true"/> if the source dictionary contains any elements; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.ObservableDictionaryExtensions.Any``2(Ultraviolet.Core.Collections.ObservableDictionary{``0,``1},System.Predicate{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Gets a value indicating whether the specified dictionary contains any elements which match the specified predicate.
            </summary>
            <typeparam name="TKey">The type of key used by <paramref name="source"/>.</typeparam>
            <typeparam name="TValue">The type of value used by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:Ultraviolet.Core.Collections.ObservableDictionary`2"/> to evaluate.</param>
            <param name="predicate">The predicate against which to evaluate the items of <paramref name="source"/>.</param>
            <returns><see langword="true"/> if the source dictionary contains any elements; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.ObservableDictionaryExtensions.All``2(Ultraviolet.Core.Collections.ObservableDictionary{``0,``1},System.Predicate{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Gets a value indicating whether all of the items in the specified dictionary match the specified predicate.
            </summary>
            <typeparam name="TKey">The type of key used by <paramref name="source"/>.</typeparam>
            <typeparam name="TValue">The type of value used by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:Ultraviolet.Core.Collections.ObservableDictionary`2"/> to evaluate.</param>
            <param name="predicate">The predicate against which to evaluate the items of <paramref name="source"/>.</param>
            <returns><see langword="true"/> if all of the items in the source dictionary match the specified predicate; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.ObservableDictionaryExtensions.Count``2(Ultraviolet.Core.Collections.ObservableDictionary{``0,``1})">
            <summary>
            Gets the number of items in the specified dictionary.
            </summary>
            <typeparam name="TKey">The type of key used by <paramref name="source"/>.</typeparam>
            <typeparam name="TValue">The type of value used by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:Ultraviolet.Core.Collections.ObservableDictionary`2"/> to evaluate.</param>
            <returns>The number of items in the source dictionary.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.ObservableDictionaryExtensions.Count``2(Ultraviolet.Core.Collections.ObservableDictionary{``0,``1},System.Predicate{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Gets the number of items in the specified dictionary which match the specified predicate.
            </summary>
            <typeparam name="TKey">The type of key used by <paramref name="source"/>.</typeparam>
            <typeparam name="TValue">The type of value used by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:Ultraviolet.Core.Collections.ObservableDictionary`2"/> to evaluate.</param>
            <param name="predicate">The predicate against which to evaluate the items of <paramref name="source"/>.</param>
            <returns>The number of items in the source dictionary.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.ObservableDictionaryExtensions.First``2(Ultraviolet.Core.Collections.ObservableDictionary{``0,``1})">
            <summary>
            Gets the first item in the specified dictionary.
            </summary>
            <typeparam name="TKey">The type of key used by <paramref name="source"/>.</typeparam>
            <typeparam name="TValue">The type of value used by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:Ultraviolet.Core.Collections.ObservableDictionary`2"/> to evaluate.</param>
            <returns>The first item in the source dictionary.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.ObservableDictionaryExtensions.First``2(Ultraviolet.Core.Collections.ObservableDictionary{``0,``1},System.Predicate{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Gets the first item in the specified dictionary that satisfies the given predicate.
            </summary>
            <typeparam name="TKey">The type of key used by <paramref name="source"/>.</typeparam>
            <typeparam name="TValue">The type of value used by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:Ultraviolet.Core.Collections.ObservableDictionary`2"/> to evaluate.</param>
            <param name="predicate">The predicate against which to evaluate the items of <paramref name="source"/>.</param>
            <returns>The first item in the source dictionary that satisfies the predicate.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.ObservableDictionaryExtensions.Last``2(Ultraviolet.Core.Collections.ObservableDictionary{``0,``1})">
            <summary>
            Gets the last item in the specified dictionary.
            </summary>
            <typeparam name="TKey">The type of key used by <paramref name="source"/>.</typeparam>
            <typeparam name="TValue">The type of value used by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:Ultraviolet.Core.Collections.ObservableDictionary`2"/> to evaluate.</param>
            <returns>The last item in the source dictionary.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.ObservableDictionaryExtensions.Last``2(Ultraviolet.Core.Collections.ObservableDictionary{``0,``1},System.Predicate{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Gets the last item in the specified dictionary that satisfies the given predicate.
            </summary>
            <typeparam name="TKey">The type of key used by <paramref name="source"/>.</typeparam>
            <typeparam name="TValue">The type of value used by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:Ultraviolet.Core.Collections.ObservableDictionary`2"/> to evaluate.</param>
            <param name="predicate">The predicate against which to evaluate the items of <paramref name="source"/>.</param>
            <returns>The last item in the source dictionary that satisfies the predicate.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.ObservableDictionaryExtensions.Single``2(Ultraviolet.Core.Collections.ObservableDictionary{``0,``1})">
            <summary>
            Returns the only element in the dictionary, and throws an exception if there is not exactly
            one item in the dictionary.
            </summary>
            <typeparam name="TKey">The type of key used by <paramref name="source"/>.</typeparam>
            <typeparam name="TValue">The type of value used by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:Ultraviolet.Core.Collections.ObservableDictionary`2"/> to evaluate.</param>
            <returns>The single item in the source dictionary.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.ObservableDictionaryExtensions.Single``2(Ultraviolet.Core.Collections.ObservableDictionary{``0,``1},System.Predicate{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Returns the only element in the dictionary that satisfies the given predicate, and throws an exception if there 
            is not exactly one such item in the dictionary.
            </summary>
            <typeparam name="TKey">The type of key used by <paramref name="source"/>.</typeparam>
            <typeparam name="TValue">The type of value used by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:Ultraviolet.Core.Collections.ObservableDictionary`2"/> to evaluate.</param>
            <param name="predicate">The predicate against which to evaluate the items of <paramref name="source"/>.</param>
            <returns>The single item in the source dictionary that matches the specified predicate.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.ObservableDictionaryExtensions.SingleOrDefault``2(Ultraviolet.Core.Collections.ObservableDictionary{``0,``1})">
            <summary>
            Returns the only element in the dictionary, or a default value if no items exist in the dictionary.
            </summary>
            <typeparam name="TKey">The type of key used by <paramref name="source"/>.</typeparam>
            <typeparam name="TValue">The type of value used by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:Ultraviolet.Core.Collections.ObservableDictionary`2"/> to evaluate.</param>
            <returns>The single item in the source dictionary, or a default value.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.ObservableDictionaryExtensions.SingleOrDefault``2(Ultraviolet.Core.Collections.ObservableDictionary{``0,``1},System.Predicate{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Returns the only element in the dictionary that satisfies the given predicate, or a default value if 
            no such items exist in the dictionary.
            </summary>
            <typeparam name="TKey">The type of key used by <paramref name="source"/>.</typeparam>
            <typeparam name="TValue">The type of value used by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:Ultraviolet.Core.Collections.ObservableDictionary`2"/> to evaluate.</param>
            <param name="predicate">The predicate against which to evaluate the items of <paramref name="source"/>.</param>
            <returns>The single item in the source dictionary, or a default value.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.ObservableDictionaryExtensions.Max``3(Ultraviolet.Core.Collections.ObservableDictionary{``0,``1},System.Func{System.Collections.Generic.KeyValuePair{``0,``1},``2})">
            <summary>
            Gets the maximum item in the dictionary.
            </summary>
            <typeparam name="TKey">The type of key used by <paramref name="source"/>.</typeparam>
            <typeparam name="TValue">The type of value used by <paramref name="source"/>.</typeparam>
            <typeparam name="TResult">The type of value which is produced by this method.</typeparam>
            <param name="source">The <see cref="T:Ultraviolet.Core.Collections.ObservableDictionary`2"/> to evaluate.</param>
            <param name="selector">A function which selects the value to maximize.</param>
            <returns>The maximum item in the dictionary.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.ObservableDictionaryExtensions.Min``3(Ultraviolet.Core.Collections.ObservableDictionary{``0,``1},System.Func{System.Collections.Generic.KeyValuePair{``0,``1},``2})">
            <summary>
            Gets the minimum item in the dictionary.
            </summary>
            <typeparam name="TKey">The type of key used by <paramref name="source"/>.</typeparam>
            <typeparam name="TValue">The type of value used by <paramref name="source"/>.</typeparam>
            <typeparam name="TResult">The type of value which is produced by this method.</typeparam>
            <param name="source">The <see cref="T:Ultraviolet.Core.Collections.ObservableDictionary`2"/> to evaluate.</param>
            <param name="selector">A function which selects the value to maximize.</param>
            <returns>The minimum item in the dictionary.</returns>
        </member>
        <member name="T:Ultraviolet.Core.Splinq.DictionaryExtensions">
            <summary>
            Contains SpLINQ extension methods for the <see cref="T:System.Collections.Generic.Dictionary`2"/> class.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.DictionaryExtensions.Any``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            Gets a value indicating whether the specified dictionary contains any elements.
            </summary>
            <typeparam name="TKey">The type of key used by <paramref name="source"/>.</typeparam>
            <typeparam name="TValue">The type of value used by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.Dictionary`2"/> to evaluate.</param>
            <returns><see langword="true"/> if the source dictionary contains any elements; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.DictionaryExtensions.Any``2(System.Collections.Generic.Dictionary{``0,``1},System.Predicate{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Gets a value indicating whether the specified dictionary contains any elements which match the specified predicate.
            </summary>
            <typeparam name="TKey">The type of key used by <paramref name="source"/>.</typeparam>
            <typeparam name="TValue">The type of value used by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.Dictionary`2"/> to evaluate.</param>
            <param name="predicate">The predicate against which to evaluate the items of <paramref name="source"/>.</param>
            <returns><see langword="true"/> if the source dictionary contains any elements; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.DictionaryExtensions.All``2(System.Collections.Generic.Dictionary{``0,``1},System.Predicate{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Gets a value indicating whether all of the items in the specified dictionary match the specified predicate.
            </summary>
            <typeparam name="TKey">The type of key used by <paramref name="source"/>.</typeparam>
            <typeparam name="TValue">The type of value used by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.Dictionary`2"/> to evaluate.</param>
            <param name="predicate">The predicate against which to evaluate the items of <paramref name="source"/>.</param>
            <returns><see langword="true"/> if all of the items in the source dictionary match the specified predicate; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.DictionaryExtensions.Count``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            Gets the number of items in the specified dictionary.
            </summary>
            <typeparam name="TKey">The type of key used by <paramref name="source"/>.</typeparam>
            <typeparam name="TValue">The type of value used by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.Dictionary`2"/> to evaluate.</param>
            <returns>The number of items in the source dictionary.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.DictionaryExtensions.Count``2(System.Collections.Generic.Dictionary{``0,``1},System.Predicate{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Gets the number of items in the specified dictionary which match the specified predicate.
            </summary>
            <typeparam name="TKey">The type of key used by <paramref name="source"/>.</typeparam>
            <typeparam name="TValue">The type of value used by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.Dictionary`2"/> to evaluate.</param>
            <param name="predicate">The predicate against which to evaluate the items of <paramref name="source"/>.</param>
            <returns>The number of items in the source dictionary.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.DictionaryExtensions.First``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            Gets the first item in the specified dictionary.
            </summary>
            <typeparam name="TKey">The type of key used by <paramref name="source"/>.</typeparam>
            <typeparam name="TValue">The type of value used by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.Dictionary`2"/> to evaluate.</param>
            <returns>The first item in the source dictionary.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.DictionaryExtensions.First``2(System.Collections.Generic.Dictionary{``0,``1},System.Predicate{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Gets the first item in the specified dictionary that satisfies the given predicate.
            </summary>
            <typeparam name="TKey">The type of key used by <paramref name="source"/>.</typeparam>
            <typeparam name="TValue">The type of value used by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.Dictionary`2"/> to evaluate.</param>
            <param name="predicate">The predicate against which to evaluate the items of <paramref name="source"/>.</param>
            <returns>The first item in the source dictionary that satisfies the predicate.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.DictionaryExtensions.Last``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            Gets the last item in the specified dictionary.
            </summary>
            <typeparam name="TKey">The type of key used by <paramref name="source"/>.</typeparam>
            <typeparam name="TValue">The type of value used by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.Dictionary`2"/> to evaluate.</param>
            <returns>The last item in the source dictionary.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.DictionaryExtensions.Last``2(System.Collections.Generic.Dictionary{``0,``1},System.Predicate{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Gets the last item in the specified dictionary that satisfies the given predicate.
            </summary>
            <typeparam name="TKey">The type of key used by <paramref name="source"/>.</typeparam>
            <typeparam name="TValue">The type of value used by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.Dictionary`2"/> to evaluate.</param>
            <param name="predicate">The predicate against which to evaluate the items of <paramref name="source"/>.</param>
            <returns>The last item in the source dictionary that satisfies the predicate.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.DictionaryExtensions.Single``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            Returns the only element in the dictionary, and throws an exception if there is not exactly
            one item in the dictionary.
            </summary>
            <typeparam name="TKey">The type of key used by <paramref name="source"/>.</typeparam>
            <typeparam name="TValue">The type of value used by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.Dictionary`2"/> to evaluate.</param>
            <returns>The single item in the source dictionary.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.DictionaryExtensions.Single``2(System.Collections.Generic.Dictionary{``0,``1},System.Predicate{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Returns the only element in the dictionary that satisfies the given predicate, and throws an exception if there 
            is not exactly one such item in the dictionary.
            </summary>
            <typeparam name="TKey">The type of key used by <paramref name="source"/>.</typeparam>
            <typeparam name="TValue">The type of value used by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.Dictionary`2"/> to evaluate.</param>
            <param name="predicate">The predicate against which to evaluate the items of <paramref name="source"/>.</param>
            <returns>The single item in the source dictionary that matches the specified predicate.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.DictionaryExtensions.SingleOrDefault``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            Returns the only element in the dictionary, or a default value if no items exist in the dictionary.
            </summary>
            <typeparam name="TKey">The type of key used by <paramref name="source"/>.</typeparam>
            <typeparam name="TValue">The type of value used by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.Dictionary`2"/> to evaluate.</param>
            <returns>The single item in the source dictionary, or a default value.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.DictionaryExtensions.SingleOrDefault``2(System.Collections.Generic.Dictionary{``0,``1},System.Predicate{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Returns the only element in the dictionary that satisfies the given predicate, or a default value if 
            no such items exist in the dictionary.
            </summary>
            <typeparam name="TKey">The type of key used by <paramref name="source"/>.</typeparam>
            <typeparam name="TValue">The type of value used by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.Dictionary`2"/> to evaluate.</param>
            <param name="predicate">The predicate against which to evaluate the items of <paramref name="source"/>.</param>
            <returns>The single item in the source dictionary, or a default value.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.DictionaryExtensions.Max``3(System.Collections.Generic.Dictionary{``0,``1},System.Func{System.Collections.Generic.KeyValuePair{``0,``1},``2})">
            <summary>
            Gets the maximum item in the dictionary.
            </summary>
            <typeparam name="TKey">The type of key used by <paramref name="source"/>.</typeparam>
            <typeparam name="TValue">The type of value used by <paramref name="source"/>.</typeparam>
            <typeparam name="TResult">The type of value which is produced by this method.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.Dictionary`2"/> to evaluate.</param>
            <param name="selector">A function which selects the value to maximize.</param>
            <returns>The maximum item in the dictionary.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.DictionaryExtensions.Min``3(System.Collections.Generic.Dictionary{``0,``1},System.Func{System.Collections.Generic.KeyValuePair{``0,``1},``2})">
            <summary>
            Gets the minimum item in the dictionary.
            </summary>
            <typeparam name="TKey">The type of key used by <paramref name="source"/>.</typeparam>
            <typeparam name="TValue">The type of value used by <paramref name="source"/>.</typeparam>
            <typeparam name="TResult">The type of value which is produced by this method.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.Dictionary`2"/> to evaluate.</param>
            <param name="selector">A function which selects the value to minimize.</param>
            <returns>The minimum item in the dictionary.</returns>
        </member>
        <member name="T:Ultraviolet.Core.Splinq.ObservableListExtensions">
            <summary>
            Contains SpLINQ extension methods for the <see cref="T:Ultraviolet.Core.Collections.ObservableList`1"/> class.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.ObservableListExtensions.Any``1(Ultraviolet.Core.Collections.ObservableList{``0})">
            <summary>
            Gets a value indicating whether the specified list contains any elements.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:Ultraviolet.Core.Collections.ObservableList`1"/> to evaluate.</param>
            <returns><see langword="true"/> if the source list contains any elements; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.ObservableListExtensions.Any``1(Ultraviolet.Core.Collections.ObservableList{``0},System.Predicate{``0})">
            <summary>
            Gets a value indicating whether the specified list contains any elements which match the specified predicate.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:Ultraviolet.Core.Collections.ObservableList`1"/> to evaluate.</param>
            <param name="predicate">The predicate against which to evaluate the items of <paramref name="source"/>.</param>
            <returns><see langword="true"/> if the source list contains any elements; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.ObservableListExtensions.All``1(Ultraviolet.Core.Collections.ObservableList{``0},System.Predicate{``0})">
            <summary>
            Gets a value indicating whether all of the items in the specified list match the specified predicate.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:Ultraviolet.Core.Collections.ObservableList`1"/> to evaluate.</param>
            <param name="predicate">The predicate against which to evaluate the items of <paramref name="source"/>.</param>
            <returns><see langword="true"/> if all of the items in the source list match the specified predicate; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.ObservableListExtensions.Count``1(Ultraviolet.Core.Collections.ObservableList{``0})">
            <summary>
            Gets the number of items in the specified list.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:Ultraviolet.Core.Collections.ObservableList`1"/> to evaluate.</param>
            <returns>The number of items in the source list.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.ObservableListExtensions.Count``1(Ultraviolet.Core.Collections.ObservableList{``0},System.Predicate{``0})">
            <summary>
            Gets the number of items in the specified list which match the specified predicate.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:Ultraviolet.Core.Collections.ObservableList`1"/> to evaluate.</param>
            <param name="predicate">The predicate against which to evaluate the items of <paramref name="source"/>.</param>
            <returns>The number of items in the source list.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.ObservableListExtensions.First``1(Ultraviolet.Core.Collections.ObservableList{``0})">
            <summary>
            Gets the first item in the specified list.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:Ultraviolet.Core.Collections.ObservableList`1"/> to evaluate.</param>
            <returns>The first item in the source list.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.ObservableListExtensions.First``1(Ultraviolet.Core.Collections.ObservableList{``0},System.Predicate{``0})">
            <summary>
            Gets the first item in the specified list that satisfies the given predicate.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:Ultraviolet.Core.Collections.ObservableList`1"/> to evaluate.</param>
            <param name="predicate">The predicate against which to evaluate the items of <paramref name="source"/>.</param>
            <returns>The first item in the source list that satisfies the predicate.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.ObservableListExtensions.Last``1(Ultraviolet.Core.Collections.ObservableList{``0})">
            <summary>
            Gets the last item in the specified list.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:Ultraviolet.Core.Collections.ObservableList`1"/> to evaluate.</param>
            <returns>The last item in the source list.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.ObservableListExtensions.Last``1(Ultraviolet.Core.Collections.ObservableList{``0},System.Predicate{``0})">
            <summary>
            Gets the last item in the specified list that satisfies the given predicate.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:Ultraviolet.Core.Collections.ObservableList`1"/> to evaluate.</param>
            <param name="predicate">The predicate against which to evaluate the items of <paramref name="source"/>.</param>
            <returns>The last item in the source list that satisfies the predicate.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.ObservableListExtensions.Single``1(Ultraviolet.Core.Collections.ObservableList{``0})">
            <summary>
            Returns the only element in the list, and throws an exception if there is not exactly
            one item in the list.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:Ultraviolet.Core.Collections.ObservableList`1"/> to evaluate.</param>
            <returns>The single item in the source list.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.ObservableListExtensions.Single``1(Ultraviolet.Core.Collections.ObservableList{``0},System.Predicate{``0})">
            <summary>
            Returns the only element in the list that satisfies the given predicate, and throws an exception if there 
            is not exactly one such item in the list.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:Ultraviolet.Core.Collections.ObservableList`1"/> to evaluate.</param>
            <param name="predicate">The predicate against which to evaluate the items of <paramref name="source"/>.</param>
            <returns>The single item in the source list that matches the specified predicate.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.ObservableListExtensions.SingleOrDefault``1(Ultraviolet.Core.Collections.ObservableList{``0})">
            <summary>
            Returns the only element in the list, or a default value if no items exist in the list.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:Ultraviolet.Core.Collections.ObservableList`1"/> to evaluate.</param>
            <returns>The single item in the source list, or a default value.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.ObservableListExtensions.SingleOrDefault``1(Ultraviolet.Core.Collections.ObservableList{``0},System.Predicate{``0})">
            <summary>
            Returns the only element in the list that satisfies the given predicate, or a default value if 
            no such items exist in the list.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:Ultraviolet.Core.Collections.ObservableList`1"/> to evaluate.</param>
            <param name="predicate">The predicate against which to evaluate the items of <paramref name="source"/>.</param>
            <returns>The single item in the source list, or a default value.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.ObservableListExtensions.Max``1(Ultraviolet.Core.Collections.ObservableList{``0})">
            <summary>
            Gets the maximum item in the list.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:Ultraviolet.Core.Collections.ObservableList`1"/> to evaluate.</param>
            <returns>The maximum item in the list.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.ObservableListExtensions.Min``1(Ultraviolet.Core.Collections.ObservableList{``0})">
            <summary>
            Gets the minimum item in the list.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:Ultraviolet.Core.Collections.ObservableList`1"/> to evaluate.</param>
            <returns>The minimum item in the list.</returns>
        </member>
        <member name="T:Ultraviolet.Core.Splinq.PooledLinkedListExtensions">
            <summary>
            Contains SpLINQ extension methods for the <see cref="T:Ultraviolet.Core.Collections.PooledLinkedList`1"/> class.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.PooledLinkedListExtensions.Any``1(Ultraviolet.Core.Collections.PooledLinkedList{``0})">
            <summary>
            Gets a value indicating whether the specified list contains any elements.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:Ultraviolet.Core.Collections.PooledLinkedList`1"/> to evaluate.</param>
            <returns><see langword="true"/> if the source list contains any elements; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.PooledLinkedListExtensions.Any``1(Ultraviolet.Core.Collections.PooledLinkedList{``0},System.Predicate{``0})">
            <summary>
            Gets a value indicating whether the specified list contains any elements which match the specified predicate.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:Ultraviolet.Core.Collections.PooledLinkedList`1"/> to evaluate.</param>
            <param name="predicate">The predicate against which to evaluate the items of <paramref name="source"/>.</param>
            <returns><see langword="true"/> if the source list contains any elements; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.PooledLinkedListExtensions.All``1(Ultraviolet.Core.Collections.PooledLinkedList{``0},System.Predicate{``0})">
            <summary>
            Gets a value indicating whether all of the items in the specified list match the specified predicate.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:Ultraviolet.Core.Collections.PooledLinkedList`1"/> to evaluate.</param>
            <param name="predicate">The predicate against which to evaluate the items of <paramref name="source"/>.</param>
            <returns><see langword="true"/> if all of the items in the source list match the specified predicate; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.PooledLinkedListExtensions.Count``1(Ultraviolet.Core.Collections.PooledLinkedList{``0})">
            <summary>
            Gets the number of items in the specified list.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:Ultraviolet.Core.Collections.PooledLinkedList`1"/> to evaluate.</param>
            <returns>The number of items in the source list.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.PooledLinkedListExtensions.Count``1(Ultraviolet.Core.Collections.PooledLinkedList{``0},System.Predicate{``0})">
            <summary>
            Gets the number of items in the specified list which match the specified predicate.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:Ultraviolet.Core.Collections.PooledLinkedList`1"/> to evaluate.</param>
            <param name="predicate">The predicate against which to evaluate the items of <paramref name="source"/>.</param>
            <returns>The number of items in the source list.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.PooledLinkedListExtensions.First``1(Ultraviolet.Core.Collections.PooledLinkedList{``0})">
            <summary>
            Gets the first item in the specified list.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:Ultraviolet.Core.Collections.PooledLinkedList`1"/> to evaluate.</param>
            <returns>The first item in the source list.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.PooledLinkedListExtensions.First``1(Ultraviolet.Core.Collections.PooledLinkedList{``0},System.Predicate{``0})">
            <summary>
            Gets the first item in the specified list that satisfies the given predicate.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:Ultraviolet.Core.Collections.PooledLinkedList`1"/> to evaluate.</param>
            <param name="predicate">The predicate against which to evaluate the items of <paramref name="source"/>.</param>
            <returns>The first item in the source list that satisfies the predicate.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.PooledLinkedListExtensions.Last``1(Ultraviolet.Core.Collections.PooledLinkedList{``0})">
            <summary>
            Gets the last item in the specified list.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:Ultraviolet.Core.Collections.PooledLinkedList`1"/> to evaluate.</param>
            <returns>The last item in the source list.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.PooledLinkedListExtensions.Last``1(Ultraviolet.Core.Collections.PooledLinkedList{``0},System.Predicate{``0})">
            <summary>
            Gets the last item in the specified list that satisfies the given predicate.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:Ultraviolet.Core.Collections.PooledLinkedList`1"/> to evaluate.</param>
            <param name="predicate">The predicate against which to evaluate the items of <paramref name="source"/>.</param>
            <returns>The last item in the source list that satisfies the predicate.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.PooledLinkedListExtensions.Single``1(Ultraviolet.Core.Collections.PooledLinkedList{``0})">
            <summary>
            Returns the only element in the list, and throws an exception if there is not exactly
            one item in the list.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:Ultraviolet.Core.Collections.PooledLinkedList`1"/> to evaluate.</param>
            <returns>The single item in the source list.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.PooledLinkedListExtensions.Single``1(Ultraviolet.Core.Collections.PooledLinkedList{``0},System.Predicate{``0})">
            <summary>
            Returns the only element in the list that satisfies the given predicate, and throws an exception if there 
            is not exactly one such item in the list.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:Ultraviolet.Core.Collections.PooledLinkedList`1"/> to evaluate.</param>
            <param name="predicate">The predicate against which to evaluate the items of <paramref name="source"/>.</param>
            <returns>The single item in the source list that matches the specified predicate.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.PooledLinkedListExtensions.SingleOrDefault``1(Ultraviolet.Core.Collections.PooledLinkedList{``0})">
            <summary>
            Returns the only element in the list, or a default value if no items exist in the list.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:Ultraviolet.Core.Collections.PooledLinkedList`1"/> to evaluate.</param>
            <returns>The single item in the source list, or a default value.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.PooledLinkedListExtensions.SingleOrDefault``1(Ultraviolet.Core.Collections.PooledLinkedList{``0},System.Predicate{``0})">
            <summary>
            Returns the only element in the list that satisfies the given predicate, or a default value if 
            no such items exist in the list.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:Ultraviolet.Core.Collections.PooledLinkedList`1"/> to evaluate.</param>
            <param name="predicate">The predicate against which to evaluate the items of <paramref name="source"/>.</param>
            <returns>The single item in the source list, or a default value.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.PooledLinkedListExtensions.Max``1(Ultraviolet.Core.Collections.PooledLinkedList{``0})">
            <summary>
            Gets the maximum item in the list.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:Ultraviolet.Core.Collections.PooledLinkedList`1"/> to evaluate.</param>
            <returns>The maximum item in the list.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.PooledLinkedListExtensions.Min``1(Ultraviolet.Core.Collections.PooledLinkedList{``0})">
            <summary>
            Gets the minimum item in the list.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:Ultraviolet.Core.Collections.PooledLinkedList`1"/> to evaluate.</param>
            <returns>The minimum item in the list.</returns>
        </member>
        <member name="T:Ultraviolet.Core.Splinq.LinkedListExtensions">
            <summary>
            Contains SpLINQ extension methods for the <see cref="T:System.Collections.Generic.LinkedList`1"/> class.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.LinkedListExtensions.Any``1(System.Collections.Generic.LinkedList{``0})">
            <summary>
            Gets a value indicating whether the specified list contains any elements.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.LinkedList`1"/> to evaluate.</param>
            <returns><see langword="true"/> if the source list contains any elements; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.LinkedListExtensions.Any``1(System.Collections.Generic.LinkedList{``0},System.Predicate{``0})">
            <summary>
            Gets a value indicating whether the specified list contains any elements which match the specified predicate.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.LinkedList`1"/> to evaluate.</param>
            <param name="predicate">The predicate against which to evaluate the items of <paramref name="source"/>.</param>
            <returns><see langword="true"/> if the source list contains any elements; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.LinkedListExtensions.All``1(System.Collections.Generic.LinkedList{``0},System.Predicate{``0})">
            <summary>
            Gets a value indicating whether all of the items in the specified list match the specified predicate.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.LinkedList`1"/> to evaluate.</param>
            <param name="predicate">The predicate against which to evaluate the items of <paramref name="source"/>.</param>
            <returns><see langword="true"/> if all of the items in the source list match the specified predicate; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.LinkedListExtensions.Count``1(System.Collections.Generic.LinkedList{``0})">
            <summary>
            Gets the number of items in the specified list.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.LinkedList`1"/> to evaluate.</param>
            <returns>The number of items in the source list.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.LinkedListExtensions.Count``1(System.Collections.Generic.LinkedList{``0},System.Predicate{``0})">
            <summary>
            Gets the number of items in the specified list which match the specified predicate.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.LinkedList`1"/> to evaluate.</param>
            <param name="predicate">The predicate against which to evaluate the items of <paramref name="source"/>.</param>
            <returns>The number of items in the source list.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.LinkedListExtensions.First``1(System.Collections.Generic.LinkedList{``0})">
            <summary>
            Gets the first item in the specified list.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.LinkedList`1"/> to evaluate.</param>
            <returns>The first item in the source list.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.LinkedListExtensions.First``1(System.Collections.Generic.LinkedList{``0},System.Predicate{``0})">
            <summary>
            Gets the first item in the specified list that satisfies the given predicate.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.LinkedList`1"/> to evaluate.</param>
            <param name="predicate">The predicate against which to evaluate the items of <paramref name="source"/>.</param>
            <returns>The first item in the source list that satisfies the predicate.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.LinkedListExtensions.Last``1(System.Collections.Generic.LinkedList{``0})">
            <summary>
            Gets the last item in the specified list.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.LinkedList`1"/> to evaluate.</param>
            <returns>The last item in the source list.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.LinkedListExtensions.Last``1(System.Collections.Generic.LinkedList{``0},System.Predicate{``0})">
            <summary>
            Gets the last item in the specified list that satisfies the given predicate.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.LinkedList`1"/> to evaluate.</param>
            <param name="predicate">The predicate against which to evaluate the items of <paramref name="source"/>.</param>
            <returns>The last item in the source list that satisfies the predicate.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.LinkedListExtensions.Single``1(System.Collections.Generic.LinkedList{``0})">
            <summary>
            Returns the only element in the list, and throws an exception if there is not exactly
            one item in the list.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.LinkedList`1"/> to evaluate.</param>
            <returns>The single item in the source list.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.LinkedListExtensions.Single``1(System.Collections.Generic.LinkedList{``0},System.Predicate{``0})">
            <summary>
            Returns the only element in the list that satisfies the given predicate, and throws an exception if there 
            is not exactly one such item in the list.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.LinkedList`1"/> to evaluate.</param>
            <param name="predicate">The predicate against which to evaluate the items of <paramref name="source"/>.</param>
            <returns>The single item in the source list that matches the specified predicate.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.LinkedListExtensions.SingleOrDefault``1(System.Collections.Generic.LinkedList{``0})">
            <summary>
            Returns the only element in the list, or a default value if no items exist in the list.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.LinkedList`1"/> to evaluate.</param>
            <returns>The single item in the source list, or a default value.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.LinkedListExtensions.SingleOrDefault``1(System.Collections.Generic.LinkedList{``0},System.Predicate{``0})">
            <summary>
            Returns the only element in the list that satisfies the given predicate, or a default value if 
            no such items exist in the list.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.LinkedList`1"/> to evaluate.</param>
            <param name="predicate">The predicate against which to evaluate the items of <paramref name="source"/>.</param>
            <returns>The single item in the source list, or a default value.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.LinkedListExtensions.Max``1(System.Collections.Generic.LinkedList{``0})">
            <summary>
            Gets the maximum item in the list.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.LinkedList`1"/> to evaluate.</param>
            <returns>The maximum item in the list.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.LinkedListExtensions.Min``1(System.Collections.Generic.LinkedList{``0})">
            <summary>
            Gets the minimum item in the list.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.LinkedList`1"/> to evaluate.</param>
            <returns>The minimum item in the list.</returns>
        </member>
        <member name="T:Ultraviolet.Core.Splinq.ListExtensions">
            <summary>
            Contains SpLINQ extension methods for the <see cref="T:System.Collections.Generic.List`1"/> class.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.ListExtensions.Any``1(System.Collections.Generic.List{``0})">
            <summary>
            Gets a value indicating whether the specified list contains any elements.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.List`1"/> to evaluate.</param>
            <returns><see langword="true"/> if the source list contains any elements; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.ListExtensions.Any``1(System.Collections.Generic.List{``0},System.Predicate{``0})">
            <summary>
            Gets a value indicating whether the specified list contains any elements which match the specified predicate.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.List`1"/> to evaluate.</param>
            <param name="predicate">The predicate against which to evaluate the items of <paramref name="source"/>.</param>
            <returns><see langword="true"/> if the source list contains any elements; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.ListExtensions.All``1(System.Collections.Generic.List{``0},System.Predicate{``0})">
            <summary>
            Gets a value indicating whether all of the items in the specified list match the specified predicate.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.List`1"/> to evaluate.</param>
            <param name="predicate">The predicate against which to evaluate the items of <paramref name="source"/>.</param>
            <returns><see langword="true"/> if all of the items in the source list match the specified predicate; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.ListExtensions.Count``1(System.Collections.Generic.List{``0})">
            <summary>
            Gets the number of items in the specified list.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.List`1"/> to evaluate.</param>
            <returns>The number of items in the source list.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.ListExtensions.Count``1(System.Collections.Generic.List{``0},System.Predicate{``0})">
            <summary>
            Gets the number of items in the specified list which match the specified predicate.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.List`1"/> to evaluate.</param>
            <param name="predicate">The predicate against which to evaluate the items of <paramref name="source"/>.</param>
            <returns>The number of items in the source list.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.ListExtensions.First``1(System.Collections.Generic.List{``0})">
            <summary>
            Gets the first item in the specified list.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.List`1"/> to evaluate.</param>
            <returns>The first item in the source list.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.ListExtensions.First``1(System.Collections.Generic.List{``0},System.Predicate{``0})">
            <summary>
            Gets the first item in the specified list that satisfies the given predicate.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.List`1"/> to evaluate.</param>
            <param name="predicate">The predicate against which to evaluate the items of <paramref name="source"/>.</param>
            <returns>The first item in the source list that satisfies the predicate.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.ListExtensions.Last``1(System.Collections.Generic.List{``0})">
            <summary>
            Gets the last item in the specified list.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.List`1"/> to evaluate.</param>
            <returns>The last item in the source list.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.ListExtensions.Last``1(System.Collections.Generic.List{``0},System.Predicate{``0})">
            <summary>
            Gets the last item in the specified list that satisfies the given predicate.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.List`1"/> to evaluate.</param>
            <param name="predicate">The predicate against which to evaluate the items of <paramref name="source"/>.</param>
            <returns>The last item in the source list that satisfies the predicate.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.ListExtensions.Single``1(System.Collections.Generic.List{``0})">
            <summary>
            Returns the only element in the list, and throws an exception if there is not exactly
            one item in the list.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.List`1"/> to evaluate.</param>
            <returns>The single item in the source list.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.ListExtensions.Single``1(System.Collections.Generic.List{``0},System.Predicate{``0})">
            <summary>
            Returns the only element in the list that satisfies the given predicate, and throws an exception if there 
            is not exactly one such item in the list.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.List`1"/> to evaluate.</param>
            <param name="predicate">The predicate against which to evaluate the items of <paramref name="source"/>.</param>
            <returns>The single item in the source list that matches the specified predicate.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.ListExtensions.SingleOrDefault``1(System.Collections.Generic.List{``0})">
            <summary>
            Returns the only element in the list, or a default value if no items exist in the list.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.List`1"/> to evaluate.</param>
            <returns>The single item in the source list, or a default value.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.ListExtensions.SingleOrDefault``1(System.Collections.Generic.List{``0},System.Predicate{``0})">
            <summary>
            Returns the only element in the list that satisfies the given predicate, or a default value if 
            no such items exist in the list.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.List`1"/> to evaluate.</param>
            <param name="predicate">The predicate against which to evaluate the items of <paramref name="source"/>.</param>
            <returns>The single item in the source list, or a default value.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.ListExtensions.Max``1(System.Collections.Generic.List{``0})">
            <summary>
            Gets the maximum item in the list.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.List`1"/> to evaluate.</param>
            <returns>The maximum item in the list.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Splinq.ListExtensions.Min``1(System.Collections.Generic.List{``0})">
            <summary>
            Gets the minimum item in the list.
            </summary>
            <typeparam name="T">The type of item contained by <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.List`1"/> to evaluate.</param>
            <returns>The minimum item in the list.</returns>
        </member>
        <member name="T:Ultraviolet.Core.UltravioletRuntime">
            <summary>
            Represents the .NET runtime implementations which are supported by the Ultraviolet Framework.
            </summary>
        </member>
        <member name="F:Ultraviolet.Core.UltravioletRuntime.CLR">
            <summary>
            The Microsoft CLR.
            </summary>
        </member>
        <member name="F:Ultraviolet.Core.UltravioletRuntime.CoreCLR">
            <summary>
            The .NET Core runtime.
            </summary>
        </member>
        <member name="F:Ultraviolet.Core.UltravioletRuntime.Mono">
            <summary>
            The Mono runtime.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.WeakNullReference`1">
            <summary>
            Represents a strongly-typed null weak reference.
            </summary>
            <typeparam name="T">The type of object being referenced.</typeparam>
        </member>
        <member name="M:Ultraviolet.Core.WeakNullReference`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.WeakNullReference`1"/> class.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.WeakNullReference`1.Singleton">
            <summary>
            Gets the singleton instance of the <see cref="T:Ultraviolet.Core.WeakNullReference`1"/> class.
            </summary>
        </member>
        <member name="P:Ultraviolet.Core.WeakNullReference`1.IsAlive">
            <inheritdoc/>
        </member>
        <member name="T:Ultraviolet.Core.WeakReference`1">
            <summary>
            Represents a strongly-typed weak reference.
            </summary>
            <typeparam name="T">The type of object being referenced.</typeparam>
        </member>
        <member name="M:Ultraviolet.Core.WeakReference`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.Core.WeakReference`1"/> class.
            </summary>
            <param name="target">The object to track, or <see langword="null"/>.</param>
        </member>
        <member name="M:Ultraviolet.Core.WeakReference`1.Create(`0)">
            <summary>
            Creates a new weak reference to the specified object.
            </summary>
            <param name="target">The object to track, or <see langword="null"/>.</param>
            <returns>The weak reference that was created.</returns>
        </member>
        <member name="P:Ultraviolet.Core.WeakReference`1.Target">
            <summary>
            Gets the object which is being tracked by the weak reference.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.Xml.NamespaceDoc">
            <summary>
            The <see cref="N:Ultraviolet.Core.Xml"/> contains extension methods for manipulating XML documents.
            </summary>
        </member>
        <member name="T:Ultraviolet.Core.Xml.XElementExtensions">
            <summary>
            Contains extension methods for the <see cref="T:System.Xml.Linq.XElement"/> type which simplify the process of querying
            an XML element's attributes and values.
            </summary>
        </member>
        <member name="M:Ultraviolet.Core.Xml.XElementExtensions.AttributeValueString(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
            <summary>
            Gets the value of the specified attribute as a string.
            </summary>
            <param name="element">The <see cref="T:System.Xml.Linq.XElement"/> from which to retrieve the attribute.</param>
            <param name="name">The name of the attribute to retrieve.</param>
            <returns>The string value of the attribute if it exists, or <see langword="null"/> if it does not exist.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Xml.XElementExtensions.ElementValueString(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
            <summary>
            Gets the value of the specified element as a string.
            </summary>
            <param name="element">The <see cref="T:System.Xml.Linq.XElement"/> from which to retrieve the element.</param>
            <param name="name">The name of the element to retrieve.</param>
            <returns>The string value of the element if it exists, or <see langword="null"/> if it does not exist.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Xml.XElementExtensions.AttributeValueInt32(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
            <summary>
            Gets the value of the specified attribute as an <see cref="T:System.Int32"/>.
            </summary>
            <param name="element">The <see cref="T:System.Xml.Linq.XElement"/> from which to retrieve the attribute.</param>
            <param name="name">The name of the attribute to retrieve.</param>
            <returns>The <see cref="T:System.Int32"/> value of the attribute if it exists, or <see langword="null"/> if it does not exist.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Xml.XElementExtensions.ElementValueInt32(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
            <summary>
            Gets the value of the specified element as an <see cref="T:System.Int32"/>.
            </summary>
            <param name="element">The <see cref="T:System.Xml.Linq.XElement"/> from which to retrieve the element.</param>
            <param name="name">The name of the element to retrieve.</param>
            <returns>The <see cref="T:System.Int32"/> value of the element if it exists, or <see langword="null"/> if it does not exist.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Xml.XElementExtensions.AttributeValueSingle(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
            <summary>
            Gets the value of the specified attribute as a <see cref="T:System.Single"/>.
            </summary>
            <param name="element">The <see cref="T:System.Xml.Linq.XElement"/> from which to retrieve the attribute.</param>
            <param name="name">The name of the attribute to retrieve.</param>
            <returns>The <see cref="T:System.Single"/> value of the attribute if it exists, or <see langword="null"/> if it does not exist.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Xml.XElementExtensions.ElementValueSingle(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
            <summary>
            Gets the value of the specified element as a <see cref="T:System.Single"/>.
            </summary>
            <param name="element">The <see cref="T:System.Xml.Linq.XElement"/> from which to retrieve the element.</param>
            <param name="name">The name of the element to retrieve.</param>
            <returns>The <see cref="T:System.Single"/> value of the element if it exists, or <see langword="null"/> if it does not exist.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Xml.XElementExtensions.AttributeValueDouble(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
            <summary>
            Gets the value of the specified attribute as a <see cref="T:System.Double"/>.
            </summary>
            <param name="element">The <see cref="T:System.Xml.Linq.XElement"/> from which to retrieve the attribute.</param>
            <param name="name">The name of the attribute to retrieve.</param>
            <returns>The <see cref="T:System.Double"/> value of the attribute if it exists, or <see langword="null"/> if it does not exist.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Xml.XElementExtensions.ElementValueDouble(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
            <summary>
            Gets the value of the specified element as a <see cref="T:System.Double"/>.
            </summary>
            <param name="element">The <see cref="T:System.Xml.Linq.XElement"/> from which to retrieve the element.</param>
            <param name="name">The name of the element to retrieve.</param>
            <returns>The <see cref="T:System.Double"/> value of the element if it exists, or <see langword="null"/> if it does not exist.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Xml.XElementExtensions.AttributeValueBoolean(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
            <summary>
            Gets the value of the specified attribute as a <see cref="T:System.Boolean"/>.
            </summary>
            <param name="element">The <see cref="T:System.Xml.Linq.XElement"/> from which to retrieve the attribute.</param>
            <param name="name">The name of the attribute to retrieve.</param>
            <returns>The <see cref="T:System.Boolean"/> value of the attribute if it exists, or <see langword="null"/> if it does not exist.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Xml.XElementExtensions.ElementValueBoolean(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
            <summary>
            Gets the value of the specified element as a <see cref="T:System.Boolean"/>.
            </summary>
            <param name="element">The <see cref="T:System.Xml.Linq.XElement"/> from which to retrieve the element.</param>
            <param name="name">The name of the element to retrieve.</param>
            <returns>The <see cref="T:System.Boolean"/> value of the element if it exists, or <see langword="null"/> if it does not exist.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Xml.XElementExtensions.AttributeValue``1(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
            <summary>
            Gets the value of the specified attribute as the specified type.
            </summary>
            <typeparam name="T">The type to which to convert the attribute value.</typeparam>
            <param name="element">The <see cref="T:System.Xml.Linq.XElement"/> from which to retrieve the attribute.</param>
            <param name="name">The name of the attribute to retrieve.</param>
            <returns>The value of the attribute if it exists, or <see langword="null"/> if it does not exist.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Xml.XElementExtensions.ElementValue``1(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
            <summary>
            Gets the value of the specified element as the specified type.
            </summary>
            <typeparam name="T">The type to which to convert the element value.</typeparam>
            <param name="element">The <see cref="T:System.Xml.Linq.XElement"/> from which to retrieve the element.</param>
            <param name="name">The name of the element to retrieve.</param>
            <returns>The value of the element if it exists, or <see langword="null"/> if it does not exist.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Xml.XElementExtensions.AttributeValueEnum``1(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
            <summary>
            Gets the value of the specified attribute as an enumeration value.
            </summary>
            <typeparam name="T">The enumeration type to which to convert the attribute value.</typeparam>
            <param name="element">The <see cref="T:System.Xml.Linq.XElement"/> from which to retrieve the attribute.</param>
            <param name="name">The name of the attribute to retrieve.</param>
            <returns>The enumeration value of the attribute if it exists, or <see langword="null"/> if it does not exist.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Xml.XElementExtensions.ElementValueEnum``1(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
            <summary>
            Gets the value of the specified element as an enumeration value.
            </summary>
            <typeparam name="T">The enumeration type to which to convert the element value.</typeparam>
            <param name="element">The <see cref="T:System.Xml.Linq.XElement"/> from which to retrieve the element.</param>
            <param name="name">The name of the element to retrieve.</param>
            <returns>The enumeration value of the element if it exists, or <see langword="null"/> if it does not exist.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Xml.XElementExtensions.IsNullableType(System.Type)">
            <summary>
            Gets a value indicating whether the specified type is an implementation of the <see cref="T:System.Nullable`1"/> type.
            </summary>
            <param name="type">The type to evaluate.</param>
            <returns><see langword="true"/> if the specified type is a <see langword="null"/>able; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.Core.Xml.XElementExtensions.GetNullableBaseType(System.Type)">
            <summary>
            Gets the base type of the specified nullable type.
            </summary>
            <param name="type">The nullable type to evaluate.</param>
            <returns>The base type of the specified nullable type.</returns>
        </member>
    </members>
</doc>
