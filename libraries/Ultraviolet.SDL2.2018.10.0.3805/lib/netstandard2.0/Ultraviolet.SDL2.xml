<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ultraviolet.SDL2</name>
    </assembly>
    <members>
        <member name="T:Ultraviolet.SDL2.Graphics.SDL2PlatformNativeSurface">
            <summary>
            Represents an SDL native surface.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Graphics.SDL2PlatformNativeSurface.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.SDL2.Graphics.SDL2PlatformNativeSurface"/> class.
            </summary>
            <param name="width">The surface's width.</param>
            <param name="height">The surface's height.</param>
        </member>
        <member name="M:Ultraviolet.SDL2.Graphics.SDL2PlatformNativeSurface.#ctor(Ultraviolet.SDL2.Native.SDL_Surface*)">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.SDL2.Graphics.SDL2PlatformNativeSurface"/> class.
            </summary>
            <param name="src">A pointer to the native SDL surface.</param>
        </member>
        <member name="M:Ultraviolet.SDL2.Graphics.SDL2PlatformNativeSurface.#ctor(Ultraviolet.Graphics.SurfaceSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.SDL2.Graphics.SDL2PlatformNativeSurface"/> class.
            </summary>
            <param name="source">The <see cref="T:Ultraviolet.Graphics.SurfaceSource"/> from which to create the surface.</param>
        </member>
        <member name="M:Ultraviolet.SDL2.Graphics.SDL2PlatformNativeSurface.Flip(Ultraviolet.Graphics.SurfaceFlipDirection)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Graphics.SDL2PlatformNativeSurface.FlipAndProcessAlpha(Ultraviolet.Graphics.SurfaceFlipDirection,System.Boolean,System.Nullable{Ultraviolet.Color})">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Graphics.SDL2PlatformNativeSurface.ProcessAlpha(System.Boolean,System.Nullable{Ultraviolet.Color})">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Graphics.SDL2PlatformNativeSurface.GetData(Ultraviolet.Color[],Ultraviolet.Rectangle)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Graphics.SDL2PlatformNativeSurface.SetData(Ultraviolet.Color[],Ultraviolet.Rectangle)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Graphics.SDL2PlatformNativeSurface.SetRawData(System.IntPtr,System.Int32,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Graphics.SDL2PlatformNativeSurface.CreateCopy">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Graphics.SDL2PlatformNativeSurface.SrgbEncoded">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Graphics.SDL2PlatformNativeSurface.IsFlippedHorizontally">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Graphics.SDL2PlatformNativeSurface.IsFlippedVertically">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Graphics.SDL2PlatformNativeSurface.IsAlphaPremultiplied">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Graphics.SDL2PlatformNativeSurface.BytesPerPixel">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Graphics.SDL2PlatformNativeSurface.Width">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Graphics.SDL2PlatformNativeSurface.Height">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Graphics.SDL2PlatformNativeSurface.Pitch">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Graphics.SDL2PlatformNativeSurface.Native">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Graphics.SDL2PlatformNativeSurface.NativePtr">
            <summary> 
            Gets a pointer to the surface's underlying <see cref="T:Ultraviolet.SDL2.Native.SDL_Surface"/> structure.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Graphics.SDL2PlatformNativeSurface.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Graphics.SDL2PlatformNativeSurface.GammaCorrectedPremultiply(System.UInt32)">
            <summary>
            Premultiplies the specified color.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Graphics.SDL2PlatformNativeSurface.FlipHAndProcessAlpha(System.Boolean,System.Nullable{Ultraviolet.Color})">
            <summary>
            Horizontally flips the surface and optionally premultiplies its alpha.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Graphics.SDL2PlatformNativeSurface.FlipVAndProcessAlpha(System.Boolean,System.Nullable{Ultraviolet.Color})">
            <summary>
            Vertically flips the surface and optionally premultiplies its alpha.
            </summary>
        </member>
        <member name="T:Ultraviolet.SDL2.Graphics.SDL2PlatformNativeSurfaceImporter">
            <summary>
            Imports .bmp, .png, and .jpg files.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Graphics.SDL2PlatformNativeSurfaceImporter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.SDL2.Graphics.SDL2PlatformNativeSurfaceImporter"/> class.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Graphics.SDL2PlatformNativeSurfaceImporter.Import(Ultraviolet.Content.IContentImporterMetadata,System.IO.Stream)">
            <summary>
            Imports the data from the specified file.
            </summary>
            <param name="metadata">The asset metadata for the asset to import.</param>
            <param name="stream">The stream that contains the data to import.</param>
            <returns>The data structure that was imported from the file.</returns>
        </member>
        <member name="T:Ultraviolet.SDL2.Graphics.SDL2Surface2D">
            <summary>
            Represents the SDL2 implementation of the <see cref="T:Ultraviolet.Graphics.Surface2D"/> class.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Graphics.SDL2Surface2D.#ctor(Ultraviolet.UltravioletContext,Ultraviolet.Graphics.SurfaceSource,Ultraviolet.Graphics.SurfaceOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.SDL2.Graphics.SDL2Surface2D"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
            <param name="source">The surface source from which to create the surface.</param>
            <param name="options">The surface's configuration options.</param>
        </member>
        <member name="M:Ultraviolet.SDL2.Graphics.SDL2Surface2D.#ctor(Ultraviolet.UltravioletContext,Ultraviolet.Graphics.PlatformNativeSurface,Ultraviolet.Graphics.SurfaceOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.SDL2.Graphics.SDL2Surface2D"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
            <param name="nativesurf">The native SDL surface that this object represents.</param>
            <param name="options">The surface's configuration options.</param>
        </member>
        <member name="M:Ultraviolet.SDL2.Graphics.SDL2Surface2D.#ctor(Ultraviolet.UltravioletContext,System.Int32,System.Int32,Ultraviolet.Graphics.SurfaceOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.SDL2.Graphics.SDL2Surface2D"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
            <param name="width">The width of the surface in pixels.</param>
            <param name="height">The height of the surface in pixels.</param>
            <param name="options">The surface's configuration options.</param>
        </member>
        <member name="M:Ultraviolet.SDL2.Graphics.SDL2Surface2D.Flip(Ultraviolet.Graphics.SurfaceFlipDirection)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Graphics.SDL2Surface2D.FlipAndProcessAlpha(Ultraviolet.Graphics.SurfaceFlipDirection,System.Boolean,System.Nullable{Ultraviolet.Color})">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Graphics.SDL2Surface2D.ProcessAlpha(System.Boolean,System.Nullable{Ultraviolet.Color})">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Graphics.SDL2Surface2D.Clear(Ultraviolet.Color)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Graphics.SDL2Surface2D.GetData(Ultraviolet.Color[])">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Graphics.SDL2Surface2D.GetData(Ultraviolet.Color[],Ultraviolet.Rectangle)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Graphics.SDL2Surface2D.SetData(Ultraviolet.Color[])">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Graphics.SDL2Surface2D.SetData(Ultraviolet.Color[],Ultraviolet.Rectangle)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Graphics.SDL2Surface2D.SetRawData(System.IntPtr,System.Int32,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Graphics.SDL2Surface2D.Blit(Ultraviolet.Graphics.Surface2D)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Graphics.SDL2Surface2D.Blit(Ultraviolet.Graphics.Surface2D,Ultraviolet.Rectangle)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Graphics.SDL2Surface2D.Blit(Ultraviolet.Rectangle,Ultraviolet.Graphics.Surface2D,Ultraviolet.Rectangle)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Graphics.SDL2Surface2D.Blit(Ultraviolet.Graphics.Surface2D,Ultraviolet.Point2)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Graphics.SDL2Surface2D.Blit(Ultraviolet.Graphics.Surface2D,Ultraviolet.Point2,Ultraviolet.Graphics.SurfaceFlipDirection)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Graphics.SDL2Surface2D.CreateSurface">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Graphics.SDL2Surface2D.CreateSurface(Ultraviolet.Rectangle)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Graphics.SDL2Surface2D.CreateTexture(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Graphics.SDL2Surface2D.SaveAsJpeg(System.IO.Stream)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Graphics.SDL2Surface2D.SaveAsPng(System.IO.Stream)">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Graphics.SDL2Surface2D.SrgbEncoded">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Graphics.SDL2Surface2D.Width">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Graphics.SDL2Surface2D.Height">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Graphics.SDL2Surface2D.Pitch">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Graphics.SDL2Surface2D.BytesPerPixel">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Graphics.SDL2Surface2D.IsFlippedHorizontally">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Graphics.SDL2Surface2D.IsFlippedVertically">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Graphics.SDL2Surface2D.IsAlphaPremultiplied">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Graphics.SDL2Surface2D.Pixels">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Graphics.SDL2Surface2D.NativePtr">
            <summary>
            Gets a pointer to the native SDL surface that is encapsulated by this object.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Graphics.SDL2Surface2D.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Graphics.SDL2Surface2D.BlitInternal(Ultraviolet.SDL2.Graphics.SDL2Surface2D,Ultraviolet.Rectangle,Ultraviolet.SDL2.Graphics.SDL2Surface2D,Ultraviolet.Rectangle)">
            <summary>
            Blits the surface onto the specified destination surface.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Graphics.SDL2Surface2D.BlitInternal(Ultraviolet.SDL2.Graphics.SDL2Surface2D,Ultraviolet.SDL2.Graphics.SDL2Surface2D,Ultraviolet.Point2,Ultraviolet.Graphics.SurfaceFlipDirection)">
            <summary>
            Blits the surface onto the specified destination surface.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Graphics.SDL2Surface2D.BlitInternalFlipH(Ultraviolet.SDL2.Graphics.SDL2Surface2D,Ultraviolet.SDL2.Graphics.SDL2Surface2D,Ultraviolet.Point2)">
            <summary>
            Blits the surface onto the specified destination surface, flipping it horizontally.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Graphics.SDL2Surface2D.BlitInternalFlipV(Ultraviolet.SDL2.Graphics.SDL2Surface2D,Ultraviolet.SDL2.Graphics.SDL2Surface2D,Ultraviolet.Point2)">
            <summary>
            Blits the surface onto the specified destination surface, flipping it vertically.
            </summary>
        </member>
        <member name="T:Ultraviolet.SDL2.Graphics.SDL2Surface3DProcessorMetadata">
            <summary>
            Contains metadata for <see cref="T:Ultraviolet.SDL2.Graphics.SDL2Surface3DProcessor"/>.
            </summary>
        </member>
        <member name="P:Ultraviolet.SDL2.Graphics.SDL2Surface3DProcessorMetadata.SrgbEncoded">
            <summary>
            Gets or sets a value indicating whether the surface is SRGB encoded. If <see langword="null"/>, the
            value specified by the <see cref="P:Ultraviolet.UltravioletContextProperties.SrgbDefaultForSurface3D"/> property is used.
            </summary>
        </member>
        <member name="T:Ultraviolet.SDL2.Graphics.SDL2Surface2DProcessorMetadata">
            <summary>
            Contains metadata for <see cref="T:Ultraviolet.SDL2.Graphics.SDL2Surface2DProcessor"/>.
            </summary>
        </member>
        <member name="P:Ultraviolet.SDL2.Graphics.SDL2Surface2DProcessorMetadata.SrgbEncoded">
            <summary>
            Gets or sets a value indicating whether the surface is SRGB encoded. If <see langword="null"/>, the
            value specified by the <see cref="P:Ultraviolet.UltravioletContextProperties.SrgbDefaultForSurface2D"/> property is used.
            </summary>
        </member>
        <member name="T:Ultraviolet.SDL2.Graphics.SDL2Surface3DProcessor">
            <summary>
            Loads 3D surface assets.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Graphics.SDL2Surface3DProcessor.Process(Ultraviolet.Content.ContentManager,Ultraviolet.Content.IContentProcessorMetadata,Ultraviolet.Graphics.PlatformNativeSurface)">
            <summary>
            Processes the specified data structure into a game asset.
            </summary>
            <param name="manager">The content manager with which the asset is being processed.</param>
            <param name="metadata">The asset's metadata.</param>
            <param name="input">The input data structure to process.</param>
            <returns>The game asset that was created.</returns>
        </member>
        <member name="M:Ultraviolet.SDL2.Graphics.SDL2Surface3DProcessor.ProcessSingleFile(Ultraviolet.Content.ContentManager,Ultraviolet.Content.IContentProcessorMetadata,Ultraviolet.Graphics.PlatformNativeSurface,System.String)">
            <summary>
            Processes a single file which has all of the layers of the surface within it.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Graphics.SDL2Surface3DProcessor.ProcessMultipleFiles(Ultraviolet.Content.ContentManager,Ultraviolet.Content.IContentProcessorMetadata,Ultraviolet.Graphics.PlatformNativeSurface,System.String)">
            <summary>
            Processes a collection of files, each of which represents a separate layer of the surface.
            </summary>
        </member>
        <member name="T:Ultraviolet.SDL2.Graphics.SDL2Surface2DProcessor">
            <summary>
            Loads 2D surface assets.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Graphics.SDL2Surface2DProcessor.Process(Ultraviolet.Content.ContentManager,Ultraviolet.Content.IContentProcessorMetadata,Ultraviolet.Graphics.PlatformNativeSurface)">
            <summary>
            Processes the specified data structure into a game asset.
            </summary>
            <param name="manager">The content manager with which the asset is being processed.</param>
            <param name="metadata">The asset's metadata.</param>
            <param name="input">The input data structure to process.</param>
            <returns>The game asset that was created.</returns>
        </member>
        <member name="T:Ultraviolet.SDL2.Graphics.SDL2Surface3D">
            <summary>
            Represents the SDL2 implementation of the <see cref="T:Ultraviolet.Graphics.Surface3D"/> class.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Graphics.SDL2Surface3D.#ctor(Ultraviolet.UltravioletContext,System.Int32,System.Int32,System.Int32,System.Int32,Ultraviolet.Graphics.SurfaceOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.SDL2.Graphics.SDL2Surface3D"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
            <param name="width">The surface's width in pixels.</param>
            <param name="height">The surface's height in pixels.</param>
            <param name="depth">The surface's depth in pixels.</param>
            <param name="bytesPerPixel">The number of bytes used to represent a pixel on the surface.</param>
            <param name="options">The surface's configuration options.</param>
        </member>
        <member name="M:Ultraviolet.SDL2.Graphics.SDL2Surface3D.GetLayer(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Graphics.SDL2Surface3D.SetLayer(System.Int32,Ultraviolet.Graphics.Surface2D,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Graphics.SDL2Surface3D.SetLayers(System.Collections.Generic.IEnumerable{Ultraviolet.Graphics.Surface2D},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Graphics.SDL2Surface3D.SetLayers(System.Collections.Generic.IEnumerable{Ultraviolet.Graphics.Surface2D},System.Int32,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Graphics.SDL2Surface3D.CreateSurface">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Graphics.SDL2Surface3D.CreateTexture(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Graphics.SDL2Surface3D.SaveAsJpeg(System.IO.Stream)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Graphics.SDL2Surface3D.SaveAsPng(System.IO.Stream)">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Graphics.SDL2Surface3D.SrgbEncoded">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Graphics.SDL2Surface3D.Width">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Graphics.SDL2Surface3D.Height">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Graphics.SDL2Surface3D.Depth">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Graphics.SDL2Surface3D.BytesPerPixel">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Graphics.SDL2Surface3D.IsComplete">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Graphics.SDL2Surface3D.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Graphics.SDL2Surface3D.EnsureAllLayersMatchSrgbEncoding">
            <summary>
            Throws an exception if any of the surface's layers don't match the current value 
            of the surface's <see cref="P:Ultraviolet.SDL2.Graphics.SDL2Surface3D.SrgbEncoded"/> property.
            </summary>
        </member>
        <member name="T:Ultraviolet.SDL2.Input.GamePadDeviceInfo">
            <summary>
            Manages the Ultraviolet context's connected game pad devices.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.GamePadDeviceInfo.#ctor(Ultraviolet.UltravioletContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.SDL2.Input.GamePadDeviceInfo"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.GamePadDeviceInfo.Ultraviolet#Core#Messages#IMessageSubscriber{Ultraviolet#UltravioletMessageID}#ReceiveMessage(Ultraviolet.UltravioletMessageID,Ultraviolet.Core.Messages.MessageData)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.GamePadDeviceInfo.ResetDeviceStates">
            <summary>
            Resets the states of the connected devices in preparation for the next frame.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.GamePadDeviceInfo.Update(Ultraviolet.UltravioletTime)">
            <summary>
            Updates the state of the attached game pad devices.
            </summary>
            <param name="time">Time elapsed since the last call to <see cref="M:Ultraviolet.UltravioletContext.Update(Ultraviolet.UltravioletTime)"/>.</param>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.GamePadDeviceInfo.GetGamePadForPlayer(System.Int32)">
            <summary>
            Gets the game pad that belongs to the specified player.
            </summary>
            <param name="playerIndex">The index of the player for which to retrieve a game pad.</param>
            <returns>The game pad that belongs to the specified player, or <see langword="null"/> if no such game pad exists.</returns>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.GamePadDeviceInfo.GetFirstConnectedGamePad">
            <summary>
            Gets the first connected game pad device.
            </summary>
            <returns>The first connected game pad device, or <see langword="null"/> if no game pads are connected.</returns>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.GamePadDeviceInfo.GetFirstRegisteredGamePad">
            <summary>
            Gets the first registered game pad device.
            </summary>
            <returns>The first registered game pad device, or <see langword="null"/> if no game pads are registered.</returns>
        </member>
        <member name="P:Ultraviolet.SDL2.Input.GamePadDeviceInfo.Count">
            <summary>
            Gets the number of attached game pads.
            </summary>
        </member>
        <member name="E:Ultraviolet.SDL2.Input.GamePadDeviceInfo.GamePadConnected">
            <inheritdoc/>
        </member>
        <member name="E:Ultraviolet.SDL2.Input.GamePadDeviceInfo.GamePadDisconnected">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.GamePadDeviceInfo.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.GamePadDeviceInfo.OnControllerDeviceAdded(System.Int32)">
            <summary>
            Called when a controller device is added.
            </summary>
            <param name="joystickIndex">The index of the device to add.</param>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.GamePadDeviceInfo.OnControllerDeviceRemoved(System.Int32)">
            <summary>
            Called when a controller device is removed.
            </summary>
            <param name="instanceID">The instance identifier of the device to remove.</param>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.GamePadDeviceInfo.OnGamePadConnected(Ultraviolet.Input.GamePadDevice,System.Int32)">
            <summary>
            Raises the <see cref="E:Ultraviolet.SDL2.Input.GamePadDeviceInfo.GamePadConnected"/> event.
            </summary>
            <param name="device">The device that was connected.</param>
            <param name="playerIndex">The player index associated with the game pad.</param>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.GamePadDeviceInfo.OnGamePadDisconnected(Ultraviolet.Input.GamePadDevice,System.Int32)">
            <summary>
            Raises the <see cref="E:Ultraviolet.SDL2.Input.GamePadDeviceInfo.GamePadDisconnected"/> event.
            </summary>
            <param name="device">The device that was disconnected.</param>
            <param name="playerIndex">The player index associated with the game pad.</param>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.GamePadDeviceInfo.GetFirstAvailablePlayerIndex">
            <summary>
            Gets the index of the first player which does not have an associated game pad.
            </summary>
            <returns>The index of the first player which does not have an associated game pad.</returns>
        </member>
        <member name="T:Ultraviolet.SDL2.Input.InternalButtonState">
            <summary>
            An internal representation of the state of a button on an input device.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.InternalButtonState.Reset">
            <summary>
            Resets the button's pressed/released state.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.InternalButtonState.OnDown(System.Boolean)">
            <summary>
            Puts the button into the "down" state.
            </summary>
            <param name="repeat">A value indicating whether this is a button repeat event.</param>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.InternalButtonState.OnUp">
            <summary>
            Puts the button into the "up" state.
            </summary>
        </member>
        <member name="P:Ultraviolet.SDL2.Input.InternalButtonState.Down">
            <summary>
            Gets a value indicating whether the button is in the Down state.
            </summary>
        </member>
        <member name="P:Ultraviolet.SDL2.Input.InternalButtonState.Up">
            <summary>
            Gets a value indicating whether the button is in the Up state.
            </summary>
        </member>
        <member name="P:Ultraviolet.SDL2.Input.InternalButtonState.Pressed">
            <summary>
            Gets a value indicating whether the button is in the Pressed state.
            </summary>
        </member>
        <member name="P:Ultraviolet.SDL2.Input.InternalButtonState.Repeated">
            <summary>
            Gets a value indicating whether the button is in the Repeated state.
            </summary>
        </member>
        <member name="P:Ultraviolet.SDL2.Input.InternalButtonState.Released">
            <summary>
            Gets a value indicating whether the button is in the Released state.
            </summary>
        </member>
        <member name="T:Ultraviolet.SDL2.Input.SDL2GamePadDevice">
            <summary>
            Represents the SDL2 implementation of the <see cref="T:Ultraviolet.Input.GamePadDevice"/> class.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2GamePadDevice.#ctor(Ultraviolet.UltravioletContext,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.SDL2.Input.SDL2GamePadDevice"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
            <param name="joystickIndex">The index of the SDL2 joystick device.</param>
            <param name="playerIndex">The index of the player that owns the device.</param>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2GamePadDevice.Ultraviolet#Core#Messages#IMessageSubscriber{Ultraviolet#UltravioletMessageID}#ReceiveMessage(Ultraviolet.UltravioletMessageID,Ultraviolet.Core.Messages.MessageData)">
            <summary>
            Receives a message that has been published to a queue.
            </summary>
            <param name="type">The type of message that was received.</param>
            <param name="data">The data for the message that was received.</param>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2GamePadDevice.ToNative">
            <summary>
            Gets the pointer to the native SDL2 object that this object represents.
            </summary>
            <returns>A pointer to the native SDL2 object that this object represents.</returns>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2GamePadDevice.ResetDeviceState">
            <summary>
            Resets the device's state in preparation for the next frame.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2GamePadDevice.Update(Ultraviolet.UltravioletTime)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2GamePadDevice.IsButtonDown(Ultraviolet.Input.GamePadButton)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2GamePadDevice.IsButtonUp(Ultraviolet.Input.GamePadButton)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2GamePadDevice.IsButtonPressed(Ultraviolet.Input.GamePadButton,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2GamePadDevice.IsButtonReleased(Ultraviolet.Input.GamePadButton)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2GamePadDevice.GetJoystickDirection(Ultraviolet.Input.GamePadJoystick,System.Nullable{System.Single})">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2GamePadDevice.GetJoystickDirectionFromAxis(Ultraviolet.Input.GamePadAxis,System.Nullable{System.Single})">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2GamePadDevice.GetAxisValue(Ultraviolet.Input.GamePadAxis)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2GamePadDevice.IsAxisDown(Ultraviolet.Input.GamePadAxis)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2GamePadDevice.IsAxisUp(Ultraviolet.Input.GamePadAxis)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2GamePadDevice.IsAxisPressed(Ultraviolet.Input.GamePadAxis)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2GamePadDevice.IsAxisReleased(Ultraviolet.Input.GamePadAxis)">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Input.SDL2GamePadDevice.Name">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Input.SDL2GamePadDevice.PlayerIndex">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Input.SDL2GamePadDevice.AxisDownThreshold">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Input.SDL2GamePadDevice.LeftTrigger">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Input.SDL2GamePadDevice.RightTrigger">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Input.SDL2GamePadDevice.LeftJoystickX">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Input.SDL2GamePadDevice.LeftJoystickY">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Input.SDL2GamePadDevice.LeftJoystickVector">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Input.SDL2GamePadDevice.RightJoystickX">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Input.SDL2GamePadDevice.RightJoystickY">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Input.SDL2GamePadDevice.RightJoystickVector">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Input.SDL2GamePadDevice.IsRegistered">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Input.SDL2GamePadDevice.InstanceID">
            <summary>
            Gets the SDL2 instance identifier of the game pad device.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2GamePadDevice.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2GamePadDevice.SDLToUltravioletButton(Ultraviolet.SDL2.Native.SDL_GameControllerButton)">
            <summary>
            Converts an SDL2 SDL_GameControllerButton value to an Ultraviolet GamePadButton value.
            </summary>
            <param name="button">The <see cref="T:Ultraviolet.SDL2.Native.SDL_GameControllerButton"/> value to convert.</param>
            <returns>The converted <see cref="T:Ultraviolet.Input.GamePadButton"/> value.</returns>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2GamePadDevice.SDLToUltravioletAxis(Ultraviolet.SDL2.Native.SDL_GameControllerAxis)">
            <summary>
            Converts an SDL2 SDL_GameControllerAxis value to an Ultraviolet GamePadAxis value.
            </summary>
            <param name="axis">The <see cref="T:Ultraviolet.SDL2.Native.SDL_GameControllerAxis"/> value to convert.</param>
            <returns>The converted <see cref="T:Ultraviolet.Input.GamePadAxis"/> value.</returns>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2GamePadDevice.NormalizeAxisValue(System.Int16)">
            <summary>
            Normalizes an SDL2 axis value.
            </summary>
            <param name="value">The SDL2 axis value to normalize.</param>
            <returns>The normalized value.</returns>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2GamePadDevice.OnAxisMotion(Ultraviolet.SDL2.Native.SDL_ControllerAxisEvent)">
            <summary>
            Handles an SDL2 axis motion event.
            </summary>
            <param name="evt">The SDL2 event data.</param>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2GamePadDevice.CheckForAxisPresses(Ultraviolet.Input.GamePadAxis,System.Single,System.Single)">
            <summary>
            Raises <see cref="E:Ultraviolet.Input.GamePadDevice.AxisPressed"/> and <see cref="E:Ultraviolet.Input.GamePadDevice.AxisReleased"/> in response
            to changes in a particular axis.
            </summary>
            <param name="axis">The axis to evaluate.</param>
            <param name="previousValue">The last known value of the axis.</param>
            <param name="currentValue">The current value of the axis.</param>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2GamePadDevice.CheckForRepeatedPresses(Ultraviolet.UltravioletTime)">
            <summary>
            Raises repeated <see cref="E:Ultraviolet.Input.GamePadDevice.AxisPressed"/> and <see cref="E:Ultraviolet.Input.GamePadDevice.ButtonPressed"/> events as necessary.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2GamePadDevice.IsAxisDown(System.Single)">
            <summary>
            Gets a value indicating whether the specified axis value counts as being "down."
            </summary>
            <param name="value">The axis' value.</param>
            <returns><see langword="true"/> if the axis is down; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2GamePadDevice.IsAxisPressed(System.Single,System.Single)">
            <summary>
            Gets a value indicating whether the specified axis values count as being "pressed."
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2GamePadDevice.IsAxisReleased(System.Single,System.Single)">
            <summary>
            Gets a value indicating whether the specified axis values count as being "released."
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2GamePadDevice.ButtonFromAxis(Ultraviolet.Input.GamePadAxis,System.Single)">
            <summary>
            Gets the <see cref="T:Ultraviolet.Input.GamePadButton"/> value that corresponds to the specified axis and value.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2GamePadDevice.Register">
            <summary>
            Flags the device as registered.
            </summary>
        </member>
        <member name="T:Ultraviolet.SDL2.Input.SDL2KeyboardDevice">
            <summary>
            Represents the SDL2 implementation of the KeyboardDevice class.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2KeyboardDevice.#ctor(Ultraviolet.UltravioletContext)">
            <summary>
            Initializes a new instance of the SDL2KeyboardDevice class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2KeyboardDevice.Ultraviolet#Core#Messages#IMessageSubscriber{Ultraviolet#UltravioletMessageID}#ReceiveMessage(Ultraviolet.UltravioletMessageID,Ultraviolet.Core.Messages.MessageData)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2KeyboardDevice.ResetDeviceState">
            <summary>
            Resets the device's state in preparation for the next frame.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2KeyboardDevice.Update(Ultraviolet.UltravioletTime)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2KeyboardDevice.GetTextInput(System.Text.StringBuilder,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2KeyboardDevice.IsButtonDown(Ultraviolet.Input.Scancode)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2KeyboardDevice.IsButtonUp(Ultraviolet.Input.Scancode)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2KeyboardDevice.IsButtonPressed(Ultraviolet.Input.Scancode,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2KeyboardDevice.IsButtonReleased(Ultraviolet.Input.Scancode)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2KeyboardDevice.IsKeyDown(Ultraviolet.Input.Key)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2KeyboardDevice.IsKeyUp(Ultraviolet.Input.Key)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2KeyboardDevice.IsKeyPressed(Ultraviolet.Input.Key,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2KeyboardDevice.IsKeyReleased(Ultraviolet.Input.Key)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2KeyboardDevice.GetKeyState(Ultraviolet.Input.Key)">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Input.SDL2KeyboardDevice.IsNumLockDown">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Input.SDL2KeyboardDevice.IsCapsLockDown">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Input.SDL2KeyboardDevice.IsRegistered">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2KeyboardDevice.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2KeyboardDevice.OnKeyDown(Ultraviolet.SDL2.Native.SDL_KeyboardEvent@)">
            <summary>
            Handles SDL2's KEYDOWN event.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2KeyboardDevice.OnKeyUp(Ultraviolet.SDL2.Native.SDL_KeyboardEvent@)">
            <summary>
            Handles SDL2's KEYUP event.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2KeyboardDevice.OnTextEditing(Ultraviolet.SDL2.Native.SDL_TextEditingEvent@)">
            <summary>
            Handles SDL2's TEXTEDITING event.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2KeyboardDevice.OnTextInput(Ultraviolet.SDL2.Native.SDL_TextInputEvent@)">
            <summary>
            Handles SDL2's TEXTINPUT event.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2KeyboardDevice.ConvertTextInputToUtf16(System.Byte*)">
            <summary>
            Converts inputted text (which is in UTF-8 format) to UTF-16.
            </summary>
            <param name="input">A pointer to the inputted text.</param>
            <returns><see langword="true"/> if the input data was successfully converted; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2KeyboardDevice.Register">
            <summary>
            Flags the device as registered.
            </summary>
        </member>
        <member name="T:Ultraviolet.SDL2.Input.SDL2MouseDevice">
            <summary>
            Represents the SDL2 implementation of the MouseDevice class.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2MouseDevice.#ctor(Ultraviolet.UltravioletContext)">
            <summary>
            Initializes a new instance of the SDL2MouseDevice class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2MouseDevice.Ultraviolet#Core#Messages#IMessageSubscriber{Ultraviolet#UltravioletMessageID}#ReceiveMessage(Ultraviolet.UltravioletMessageID,Ultraviolet.Core.Messages.MessageData)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2MouseDevice.ResetDeviceState">
            <summary>
            Resets the device's state in preparation for the next frame.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2MouseDevice.Update(Ultraviolet.UltravioletTime)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2MouseDevice.GetPositionInWindow(Ultraviolet.Platform.IUltravioletWindow)">
            <summary>
            Gets the mouse cursor's position within the specified window.
            </summary>
            <param name="window">The window to evaluate.</param>
            <returns>The cursor's compositor-space position within the specified 
            window, or <see langword="null"/> if the cursor is outside of the window.</returns>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2MouseDevice.IsButtonDown(Ultraviolet.Input.MouseButton)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2MouseDevice.IsButtonUp(Ultraviolet.Input.MouseButton)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2MouseDevice.IsButtonPressed(Ultraviolet.Input.MouseButton,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2MouseDevice.IsButtonReleased(Ultraviolet.Input.MouseButton)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2MouseDevice.IsButtonClicked(Ultraviolet.Input.MouseButton)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2MouseDevice.IsButtonDoubleClicked(Ultraviolet.Input.MouseButton)">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Input.SDL2MouseDevice.Window">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Input.SDL2MouseDevice.Position">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Input.SDL2MouseDevice.X">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Input.SDL2MouseDevice.Y">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Input.SDL2MouseDevice.WheelDeltaX">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Input.SDL2MouseDevice.WheelDeltaY">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Input.SDL2MouseDevice.IsRegistered">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2MouseDevice.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2MouseDevice.SDL_BUTTON(System.Int32)">
            <summary>
            Creates the SDL2 button state mask that corresponds to the specified button.
            </summary>
            <param name="button">The button for which to create a state mask.</param>
            <returns>The state mask for the specified button.</returns>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2MouseDevice.SDL_BUTTON(Ultraviolet.Input.MouseButton)">
            <summary>
            Creates the SDL2 button state mask that corresponds to the specified button.
            </summary>
            <param name="button">The button for which to create a state mask.</param>
            <returns>The state mask for the specified button.</returns>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2MouseDevice.GetUltravioletButton(System.Int32)">
            <summary>
            Gets the Ultraviolet MouseButton value that corresponds to the specified SDL2 button value.
            </summary>
            <param name="value">The SDL2 button value to convert.</param>
            <returns>The Ultraviolet MouseButton value that corresponds to the specified SDL2 button value.</returns>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2MouseDevice.OnMouseMotion(Ultraviolet.SDL2.Native.SDL_MouseMotionEvent@)">
            <summary>
            Handles SDL2's MOUSEMOTION event.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2MouseDevice.OnMouseButtonDown(Ultraviolet.SDL2.Native.SDL_MouseButtonEvent@)">
            <summary>
            Handles SDL2's MOUSEBUTTONDOWN event.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2MouseDevice.OnMouseButtonUp(Ultraviolet.SDL2.Native.SDL_MouseButtonEvent@)">
            <summary>
            Handles SDL2's MOUSEBUTTONUP event.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2MouseDevice.OnMouseWheel(Ultraviolet.SDL2.Native.SDL_MouseWheelEvent@)">
            <summary>
            Handles SDL2's MOUSEWHEEL event.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2MouseDevice.Register(System.UInt32)">
            <summary>
            Flags the device as registered.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2MouseDevice.SetMousePosition(System.UInt32,System.Int32,System.Int32)">
            <summary>
            Sets the mouse cursor's position within its window.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2MouseDevice.SetMousePositionFromDevicePosition(System.UInt32)">
            <summary>
            Sets the mouse cursor's position based on the device's physical position.
            </summary>
        </member>
        <member name="T:Ultraviolet.SDL2.Input.SDL2TouchDevice">
            <summary>
            Represents the SDL2 implementation of the <see cref="T:Ultraviolet.Input.TouchDevice"/> class.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2TouchDevice.#ctor(Ultraviolet.UltravioletContext,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.SDL2.Input.SDL2TouchDevice"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
            <param name="index">The index of the SDL2 touch device represented by this object.</param>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2TouchDevice.Ultraviolet#Core#Messages#IMessageSubscriber{Ultraviolet#UltravioletMessageID}#ReceiveMessage(Ultraviolet.UltravioletMessageID,Ultraviolet.Core.Messages.MessageData)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2TouchDevice.ResetDeviceState">
            <summary>
            Resets the device's state in preparation for the next frame.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2TouchDevice.Update(Ultraviolet.UltravioletTime)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2TouchDevice.BindToWindow(Ultraviolet.Platform.IUltravioletWindow)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2TouchDevice.NormalizeCoordinates(Ultraviolet.Point2)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2TouchDevice.NormalizeCoordinates(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2TouchDevice.DenormalizeCoordinates(Ultraviolet.Point2F)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2TouchDevice.DenormalizeCoordinates(System.Single,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2TouchDevice.IsActive(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2TouchDevice.TryGetTouch(System.Int64,Ultraviolet.TouchInfo@)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2TouchDevice.GetTouch(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2TouchDevice.GetTouchByIndex(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2TouchDevice.WasTapped">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2TouchDevice.WasTappedWithin(Ultraviolet.RectangleF)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2TouchDevice.IsTouchWithin(Ultraviolet.RectangleF)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2TouchDevice.IsTouchWithin(System.Int64,Ultraviolet.RectangleF)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2TouchDevice.IsFirstTouchInGesture(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2TouchDevice.GetTouchIndex(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2TouchDevice.RecordDollarGestureAsync">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2TouchDevice.RecordDollarGesture">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2TouchDevice.LoadDollarGestures(System.IO.Stream)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2TouchDevice.SaveDollarGestures(System.IO.Stream)">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Input.SDL2TouchDevice.BoundWindow">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Input.SDL2TouchDevice.IsRecordingDollarGesture">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Input.SDL2TouchDevice.TouchCount">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Input.SDL2TouchDevice.TapCount">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Input.SDL2TouchDevice.IsRegistered">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2TouchDevice.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2TouchDevice.BeginTouch(Ultraviolet.SDL2.Native.SDL_Event@)">
            <summary>
            Begins a new touch input.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2TouchDevice.EndTouch(Ultraviolet.SDL2.Native.SDL_Event@)">
            <summary>
            Ends an active touch input.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2TouchDevice.EndTap(System.Int64,System.Int64,System.Single,System.Single)">
            <summary>
            Ends a tap.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2TouchDevice.UpdateTouch(Ultraviolet.SDL2.Native.SDL_Event@)">
            <summary>
            Updates an active touch input.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.SDL2TouchDevice.Register">
            <summary>
            Flags the device as registered.
            </summary>
        </member>
        <member name="T:Ultraviolet.SDL2.Input.TouchDeviceInfo">
            <summary>
            Manages the Ultraviolet context's connected touch devices.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.TouchDeviceInfo.#ctor(Ultraviolet.UltravioletContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.SDL2.Input.TouchDeviceInfo"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.TouchDeviceInfo.ResetDeviceStates">
            <summary>
            Resets the states of the connected devices in preparation for the next frame.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.TouchDeviceInfo.Update(Ultraviolet.UltravioletTime)">
            <summary>
            Updates the states of the connected touch devices.
            </summary>
            <param name="time">Time elapsed since the last call to <see cref="M:Ultraviolet.UltravioletContext.Update(Ultraviolet.UltravioletTime)"/>.</param>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.TouchDeviceInfo.GetTouchDeviceByIndex(System.Int32)">
            <summary>
            Gets the touch device with the specified device index.
            </summary>
            <param name="index">The index of the device to retrieve.</param>
            <returns>The touch device with the specified device index, or <see langword="null"/> if no such device exists.</returns>
        </member>
        <member name="P:Ultraviolet.SDL2.Input.TouchDeviceInfo.Count">
            <summary>
            Gets the number of available touch devices.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Input.TouchDeviceInfo.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Ultraviolet.SDL2.Messages.SDL2EventMessageData">
            <summary>
            Represents the message data for an SDL2Event message.
            </summary>
        </member>
        <member name="P:Ultraviolet.SDL2.Messages.SDL2EventMessageData.Event">
            <summary>
            Gets or sets the SDL event data.
            </summary>
        </member>
        <member name="T:Ultraviolet.SDL2.Native.IntPtrExtensions">
            <summary>
            Contains extension methods for the IntPtr structure.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Native.IntPtrExtensions.ToStringHex(System.IntPtr)">
            <summary>
            Converts the pointer to a string representation of the hexadecimal value of the memory address which it contains.
            </summary>
            <param name="ptr">The pointer to convert.</param>
            <returns>A string representation of the hexadecimal value of the memory address which the pointer contains.</returns>
        </member>
        <member name="T:Ultraviolet.SDL2.Native.SDLNative">
            <summary>
            Contains bindings for native SDL2 function calls.
            </summary>
            <summary>
            Contains SDL2 preprocessor macros.
            </summary>
        </member>
        <member name="T:Ultraviolet.SDL2.Native.SDL_JoystickGUID">
            <summary>
            Contains methods relating to the SDL_JoystickGUID native structure.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Native.SDL_JoystickGUID.Marshal(System.Guid)">
            <summary>
            Marshals between <see cref="T:System.Guid"/> and SDL_JoystickGUID.
            </summary>
        </member>
        <member name="T:Ultraviolet.SDL2.Platform.SDL2ClipboardService">
            <summary>
            Represents the SDL2 implementation of the <see cref="T:Ultraviolet.Platform.ClipboardService"/> class.
            </summary>
        </member>
        <member name="P:Ultraviolet.SDL2.Platform.SDL2ClipboardService.Text">
            <inheritdoc/>
        </member>
        <member name="T:Ultraviolet.SDL2.Platform.SDL2MessageBoxService">
            <summary>
            Represents the SDL2 implementation of the <see cref="T:Ultraviolet.Platform.MessageBoxService"/> class.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2MessageBoxService.ShowMessageBox(Ultraviolet.MessageBoxType,System.String,System.String,System.IntPtr)">
            <inhertidoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2MessageBoxService.GetSDLMessageBoxFlag(Ultraviolet.MessageBoxType)">
            <summary>
            Converts a <see cref="T:Ultraviolet.MessageBoxType"/> value to the equivalent SDL2 flag.
            </summary>
        </member>
        <member name="T:Ultraviolet.SDL2.Platform.SDL2PowerManagementService">
            <summary>
            Represents the SDL2 implementation of the <see cref="T:Ultraviolet.Platform.PowerManagementService"/> class.
            </summary>
        </member>
        <member name="P:Ultraviolet.SDL2.Platform.SDL2PowerManagementService.PercentBatteryRemaining">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Platform.SDL2PowerManagementService.IsBatteryPowered">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Platform.SDL2PowerManagementService.IsPluggedIn">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2PowerManagementService.UpdateCache">
            <summary>
            Updates the service's cached state values.
            </summary>
        </member>
        <member name="T:Ultraviolet.SDL2.Platform.SDL2UltravioletDisplay">
            <summary>
            Represents the SDL2 implementation of the <see cref="T:Ultraviolet.Platform.IUltravioletDisplay"/> interface.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletDisplay.#ctor(Ultraviolet.UltravioletContext,System.Int32)">
            <summary>
            Initializes a new instance of the OpenGLUltravioletDisplay class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
            <param name="displayIndex">The SDL2 display index that this object represents.</param>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletDisplay.GetSupportedDisplayModes">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletDisplay.InchesToPixels(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletDisplay.PixelsToInches(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletDisplay.DipsToPixels(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletDisplay.PixelsToDips(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletDisplay.InchesToDips(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletDisplay.DipsToInches(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletDisplay.InchesToPixels(Ultraviolet.Point2D)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletDisplay.PixelsToInches(Ultraviolet.Point2D)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletDisplay.DipsToPixels(Ultraviolet.Point2D)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletDisplay.PixelsToDips(Ultraviolet.Point2D)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletDisplay.InchesToDips(Ultraviolet.Point2D)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletDisplay.DipsToInches(Ultraviolet.Point2D)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletDisplay.InchesToPixels(Ultraviolet.Size2D)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletDisplay.PixelsToInches(Ultraviolet.Size2D)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletDisplay.DipsToPixels(Ultraviolet.Size2D)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletDisplay.PixelsToDips(Ultraviolet.Size2D)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletDisplay.InchesToDips(Ultraviolet.Size2D)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletDisplay.DipsToInches(Ultraviolet.Size2D)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletDisplay.InchesToPixels(Ultraviolet.RectangleD)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletDisplay.PixelsToInches(Ultraviolet.RectangleD)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletDisplay.DipsToPixels(Ultraviolet.RectangleD)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletDisplay.PixelsToDips(Ultraviolet.RectangleD)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletDisplay.InchesToDips(Ultraviolet.RectangleD)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletDisplay.DipsToInches(Ultraviolet.RectangleD)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletDisplay.InchesToPixels(Ultraviolet.Vector2)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletDisplay.PixelsToInches(Ultraviolet.Vector2)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletDisplay.DipsToPixels(Ultraviolet.Vector2)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletDisplay.PixelsToDips(Ultraviolet.Vector2)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletDisplay.InchesToDips(Ultraviolet.Vector2)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletDisplay.DipsToInches(Ultraviolet.Vector2)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletDisplay.Update(Ultraviolet.UltravioletTime)">
            <summary>
            Updates the display's state.
            </summary>
            <param name="time">Time elapsed since the last call to <see cref="M:Ultraviolet.UltravioletContext.Update(Ultraviolet.UltravioletTime)"/>.</param>
        </member>
        <member name="P:Ultraviolet.SDL2.Platform.SDL2UltravioletDisplay.Index">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Platform.SDL2UltravioletDisplay.Name">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Platform.SDL2UltravioletDisplay.Bounds">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Platform.SDL2UltravioletDisplay.Rotation">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Platform.SDL2UltravioletDisplay.DeviceScale">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Platform.SDL2UltravioletDisplay.DensityScale">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Platform.SDL2UltravioletDisplay.DpiX">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Platform.SDL2UltravioletDisplay.DpiY">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Platform.SDL2UltravioletDisplay.DensityBucket">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Platform.SDL2UltravioletDisplay.DesktopDisplayMode">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletDisplay.RefreshDensityInformation">
            <summary>
            Instructs the display to re-query its density information.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletDisplay.CreateDisplayModeFromSDL(Ultraviolet.SDL2.Native.SDL_DisplayMode)">
            <summary>
            Creates an Ultraviolet DisplayMode object from the specified SDL2 display mode.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletDisplay.CreateDisplayModeFromSDL(System.Int32,System.Int32)">
            <summary>
            Creates an Ultraviolet DisplayMode object from the specified SDL2 display mode.
            </summary>
        </member>
        <member name="T:Ultraviolet.SDL2.Platform.SDL2UltravioletDisplayInfo">
            <summary>
            Represents the SDL2 implementation of the <see cref="T:Ultraviolet.Platform.IUltravioletDisplayInfo"/> interface.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletDisplayInfo.#ctor(Ultraviolet.UltravioletContext)">
            <summary>
            Initializes a new instance of the OpenGLUltravioletDisplayInfo class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletDisplayInfo.Update(Ultraviolet.UltravioletTime)">
            <summary>
            Updates the state of the application's displays.
            </summary>
            <param name="time">Time elapsed since the last call to <see cref="M:Ultraviolet.UltravioletContext.Update(Ultraviolet.UltravioletTime)"/>.</param>
        </member>
        <member name="P:Ultraviolet.SDL2.Platform.SDL2UltravioletDisplayInfo.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Platform.SDL2UltravioletDisplayInfo.PrimaryDisplay">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Platform.SDL2UltravioletDisplayInfo.Count">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletDisplayInfo.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletDisplayInfo.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletDisplayInfo.System#Collections#Generic#IEnumerable{Ultraviolet#Platform#IUltravioletDisplay}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow">
            <summary>
            Represents the SDL2 implementation of the <see cref="T:Ultraviolet.Platform.IUltravioletWindow"/> interface.
            </summary>    
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow.#ctor(Ultraviolet.UltravioletContext,System.IntPtr,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
            <param name="ptr">The SDL2 pointer that represents the window.</param>
            <param name="visible">A value indicating whether this window should be visible by default.</param>
            <param name="native">A value indicating whether the window was created from a native pointer.</param>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow.op_Explicit(Ultraviolet.SDL2.Platform.SDL2UltravioletWindow)~System.IntPtr">
            <summary>
            Explicitly converts an Ultraviolet window to its underlying SDL2 pointer.
            </summary>
            <param name="window">The Ultraviolet window to convert.</param>
            <returns>The window's underlying SDL2 pointer.</returns>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow.Ultraviolet#Core#Messages#IMessageSubscriber{Ultraviolet#UltravioletMessageID}#ReceiveMessage(Ultraviolet.UltravioletMessageID,Ultraviolet.Core.Messages.MessageData)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow.SetFullscreenDisplayMode(Ultraviolet.Platform.DisplayMode)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow.SetFullscreenDisplayMode(System.Int32,System.Int32,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow.GetFullscreenDisplayMode">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow.SetWindowBounds(Ultraviolet.Rectangle,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow.SetWindowedClientSize(Ultraviolet.Size2,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow.SetWindowedClientSizeCentered(Ultraviolet.Size2,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow.SetWindowMode(Ultraviolet.Platform.WindowMode)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow.GetWindowMode">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow.SetWindowState(Ultraviolet.Platform.WindowState)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow.GetWindowState">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow.ChangeCompositor(Ultraviolet.Graphics.Compositor)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow.ChangeDisplay(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow.ChangeDisplay(Ultraviolet.Platform.IUltravioletDisplay)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow.Update(Ultraviolet.UltravioletTime)">
            <summary>
            Updates the window's state.
            </summary>
            <param name="time">Time elapsed since the last call to <see cref="M:Ultraviolet.UltravioletContext.Update(Ultraviolet.UltravioletTime)"/>.</param>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow.Draw(Ultraviolet.UltravioletTime)">
            <summary>
            Draws the window.
            </summary>
            <param name="time">Time elapsed since the last call to Draw.</param>
        </member>
        <member name="P:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow.ID">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow.Caption">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow.WindowScale">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow.Position">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow.WindowedPosition">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow.DrawableSize">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow.ClientSize">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow.WindowedClientSize">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow.MinimumClientSize">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow.MaximumClientSize">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow.SynchronizeWithVerticalRetrace">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow.Active">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow.Visible">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow.Resizable">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow.Borderless">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow.Native">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow.GrabsMouseWhenWindowed">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow.GrabsMouseWhenFullscreenWindowed">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow.GrabsMouseWhenFullscreen">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow.Opacity">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow.Icon">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow.Compositor">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow.Display">
            <inheritdoc/>
        </member>
        <member name="E:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow.Shown">
            <summary>
            Occurs when the window is shown.
            </summary>
        </member>
        <member name="E:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow.Hidden">
            <summary>
            Occurs when the window is hidden.
            </summary>
        </member>
        <member name="E:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow.Minimized">
            <summary>
            Occurs when the window is minimized.
            </summary>
        </member>
        <member name="E:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow.Maximized">
            <summary>
            Occurs when the window is maximized.
            </summary>
        </member>
        <member name="E:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow.Restored">
            <summary>
            Occurs when the window is restored.
            </summary>
        </member>
        <member name="E:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow.Drawing">
            <summary>
            Occurs when the window is rendered.
            </summary>
        </member>
        <member name="E:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow.DrawingUI">
            <summary>
            Occurs when the window is drawing its UI layer.
            </summary>
        </member>
        <member name="P:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow.IsCurrentWindow">
            <summary>
            Gets or sets a value indicating whether this is the current window.
            </summary>
        </member>
        <member name="P:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow.IsBoundForRendering">
            <summary>
            Gets or sets a value indicating whether the window is bound for rendering.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow.LoadDefaultWindowIcon(Ultraviolet.UltravioletContext)">
            <summary>
            Loads the default window icon.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
            <returns>The default window icon.</returns>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow.LOWORD(System.Int32)">
            <summary>
            Retrieves the low word of a message parameter.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow.HIWORD(System.Int32)">
            <summary>
            Retrieves the high word of a message parameter.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow.FixPlatformSpecificIssues">
            <summary>
            Fixes issues specific to the current platform.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow.FixPlatformSpecificIssues_Windows(Ultraviolet.SDL2.Native.SDL_SysWMinfo@)">
            <summary>
            Fixes issues specific to the Windows platform.
            </summary>
            <param name="sysinfo">The current system information.</param>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow.SetFullscreenDisplayModeInternal(Ultraviolet.Platform.DisplayMode)">
            <summary>
            Sets the window's fullscreen display mode.
            </summary>
            <param name="displayMode">The fullscreen display mode to set, or null to use the desktop display mode.</param>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow.SetIcon(Ultraviolet.Graphics.Surface2D)">
            <summary>
            Sets the window's icon.
            </summary>
            <param name="surface">The surface that contains the icon to set.</param>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow.OnDrawing(Ultraviolet.UltravioletTime)">
            <summary>
            Raises the Drawing event.
            </summary>
            <param name="time">Time elapsed since the last call to Draw.</param>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow.OnDrawingUI(Ultraviolet.UltravioletTime)">
            <summary>
            Raises the DrawingUI event.
            </summary>
            <param name="time">Time elapsed since the last call to Draw.</param>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow.OnShown">
            <summary>
            Raises the Shown event.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow.OnHidden">
            <summary>
            Raises the Hidden event.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow.OnMaximized">
            <summary>
            Raises the Maximized event.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow.OnMinimized">
            <summary>
            Raises the Minimized event.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow.OnRestored">
            <summary>
            Raises the Restored event.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow.HandleDpiChanged(System.Nullable{System.Single})">
            <summary>
            Called when the window's DPI changes.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow.UpdateWindowedPosition(Ultraviolet.Point2)">
            <summary>
            Updates the window's windowed position, if it is currently in the correct mode and state.
            </summary>
            <param name="position">The new windowed position.</param>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow.UpdateWindowedClientSize(Ultraviolet.Size2)">
            <summary>
            Updates the window's windowed client size, if it is currently in the correct mode and state.
            </summary>
            <param name="size">The new windowed client size.</param>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow.UpdateMouseGrab">
            <summary>
            Updates the window's mouse grab state.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow.SetDesktopDisplayMode">
            <summary>
            Sets the window to use the desktop display mode for its current display.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow.GetHwnd(System.IntPtr@)">
            <summary>
            Retrieves the HWND value for this window on the Windows platform.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow.ApplyWin32FullscreenWindowedFix_Windowed">
            <summary>
            Applies a fix to the window's styles on the Windows platform which addresses
            the flickering which has been observed when using ALT+TAB while the application
            is in fullscreen windowed mode.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow.ApplyWin32FullscreenWindowedFix_FullscreenWindowed">
            <summary>
            Applies a fix to the window's styles on the Windows platform which addresses
            the flickering which has been observed when using ALT+TAB while the application
            is in fullscreen windowed mode.
            </summary>
        </member>
        <member name="T:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow.Win32Native">
            <summary>
            Contains Win32 p/invoke functions.
            </summary>
        </member>
        <member name="T:Ultraviolet.SDL2.Platform.SDL2UltravioletWindowInfoOpenGL">
            <summary>
            Represents the SDL2 implementation of the <see cref="T:Ultraviolet.Platform.IUltravioletWindowInfo"/> interface when
            using the OpenGL rendering API.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindowInfoOpenGL.#ctor(Ultraviolet.UltravioletContext,Ultraviolet.UltravioletConfiguration,Ultraviolet.SDL2.SDL2PlatformConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.SDL2.Platform.SDL2UltravioletWindowInfoOpenGL"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
            <param name="uvconfig">The Ultraviolet configuration settings for the current context.</param>
            <param name="winconfig">The window configuration settings for the current context.</param>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindowInfoOpenGL.Draw(Ultraviolet.UltravioletTime)">
            <summary>
            Draws the current window.
            </summary>
            <param name="time">Time elapsed since the last call to Draw.</param>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindowInfoOpenGL.Swap">
            <summary>
            Swaps the back buffer and the front buffer.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindowInfoOpenGL.DesignateCurrent(Ultraviolet.Platform.IUltravioletWindow,System.IntPtr)">
            <summary>
            Makes the specified window the current window.
            </summary>
            <param name="window">The window to make current.</param>
            <param name="context">The OpenGL context.</param>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindowInfoOpenGL.InitializeRenderingAPI(Ultraviolet.SDL2.SDL2PlatformConfiguration)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindowInfoOpenGL.InitializeRenderingAPIFallback(Ultraviolet.SDL2.SDL2PlatformConfiguration,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindowInfoOpenGL.OnWindowCleanup(Ultraviolet.Platform.IUltravioletWindow)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindowInfoOpenGL.UpdateIsCurrentWindow(Ultraviolet.Platform.IUltravioletWindow,System.Boolean)">
            <summary>
            Updates the value of the <see cref="P:Ultraviolet.SDL2.Platform.SDL2UltravioletWindow.IsCurrentWindow"/> property for the specified window.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindowInfoOpenGL.BindOpenGLContextToWindow(Ultraviolet.Platform.IUltravioletWindow,System.IntPtr)">
            <summary>
            Binds the OpenGL context to the specified window.
            </summary>
        </member>
        <member name="T:Ultraviolet.SDL2.Platform.SDL2UltravioletWindowInfo">
            <summary>
            Represents the SDL2 implementation of the <see cref="T:Ultraviolet.Platform.IUltravioletWindowInfo"/> interface.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindowInfo.#ctor(Ultraviolet.UltravioletContext,Ultraviolet.UltravioletConfiguration,Ultraviolet.SDL2.SDL2PlatformConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.SDL2.Platform.SDL2UltravioletWindowInfo"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
            <param name="uvconfig">The Ultraviolet configuration settings for the current context.</param>
            <param name="winconfig">The window configuration settings for the current context.</param>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindowInfo.Update(Ultraviolet.UltravioletTime)">
            <summary>
            Updates the state of the application's displays.
            </summary>
            <param name="time">Time elapsed since the last call to <see cref="M:Ultraviolet.UltravioletContext.Update(Ultraviolet.UltravioletTime)"/>.</param>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindowInfo.DesignatePrimary(Ultraviolet.Platform.IUltravioletWindow)">
            <summary>
            Designates the specified window as the primary window.
            </summary>
            <param name="window">The window to designate as the primary window, or null to clear the primary window.</param>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindowInfo.GetByID(System.Int32)">
            <summary>
            Gets the window with the specified identifier.
            </summary>
            <returns>The window with the specified identifier, or null if no such window exists.</returns>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindowInfo.GetPtrByID(System.Int32)">
            <summary>
            Gets a pointer to the SDL2 window object encapsulated by the window with the specified identifier.
            </summary>
            <returns>A pointer to the SDL2 window object encapsulated by the window with the specified identifier.</returns>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindowInfo.GetMaster">
            <summary>
            Gets the context's master window, which is used to create the OpenGL context.
            </summary>
            <returns>The context's master window.</returns>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindowInfo.GetMasterPointer">
            <summary>
            Gets a pointer to the SDL2 window object encapsulated by the master window.
            </summary>
            <returns>A pointer to the SDL2 window object encapsulated by the master window.</returns>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindowInfo.GetPrimary">
            <summary>
            Gets the context's primary window.
            </summary>
            <returns>The context's primary window, or null if the context is headless.</returns>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindowInfo.GetPrimaryPointer">
            <summary>
            Gets a pointer to the SDL2 window object encapsulated by the primary window.
            </summary>
            <returns>A pointer to the SDL2 window object encapsulated by the primary window.</returns>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindowInfo.GetCurrent">
            <summary>
            Gets the context's current window.
            </summary>
            <returns>The context's current window.</returns>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindowInfo.GetCurrentPointer">
            <summary>
            Gets a pointer to the SDL2 window object encapsulated by the current window.
            </summary>
            <returns>A pointer to the SDL2 window object encapsulated by the current window.</returns>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindowInfo.Create(System.String,System.Int32,System.Int32,System.Int32,System.Int32,Ultraviolet.Platform.WindowFlags)">
            <summary>
            Creates a new window and attaches it to the current context.
            </summary>
            <param name="caption">The window's caption text.</param>
            <param name="x">The x-coordinate at which to position the window's top-left corner.</param>
            <param name="y">The y-coordinate at which to position the window's top-left corner.</param>
            <param name="width">The width of the window's client area in pixels.</param>
            <param name="height">The height of the window's client area in pixels.</param>
            <param name="flags">A set of WindowFlags values indicating how to create the window.</param>
            <returns>The Ultraviolet window that was created.</returns>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindowInfo.CreateFromNativePointer(System.IntPtr)">
            <summary>
            Creates a new Ultraviolet window from the specified native window and attaches it to the current context.
            </summary>
            <param name="ptr">A pointer that represents the native window to attach to the context.</param>
            <returns>The Ultraviolet window that was created.</returns>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindowInfo.Destroy(Ultraviolet.Platform.IUltravioletWindow)">
            <summary>
            Destroys the specified window.
            </summary>
            <remarks>Windows which were created from native pointers are disassociated from the current context,
            but are not actually destroyed.  To destroy such windows, use the native framework which created them.</remarks>
            <param name="window">The Ultraviolet window to destroy.</param>
            <returns>true if the window was destroyed; false if the window was closed.</returns>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindowInfo.DestroyByID(System.Int32)">
            <summary>
            Destroys the window with the specified identifier.
            </summary>
            <param name="windowID">The identifier of the window to destroy.</param>
            <returns>true if the window was destroyed; false if the window was closed.</returns>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindowInfo.GetEnumerator">
            <summary>
            Gets the collection's enumerator.
            </summary>
            <returns>The collection's enumerator.</returns>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindowInfo.System#Collections#Generic#IEnumerable{Ultraviolet#Platform#IUltravioletWindow}#GetEnumerator">
            <summary>
            Gets an enumerator for the collection.
            </summary>
            <returns>The collection's enumerator.</returns>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindowInfo.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator for the collection.
            </summary>
            <returns>The collection's enumerator.</returns>
        </member>
        <member name="P:Ultraviolet.SDL2.Platform.SDL2UltravioletWindowInfo.Ultraviolet">
            <summary>
            Gets the Ultraviolet context.
            </summary>
        </member>
        <member name="E:Ultraviolet.SDL2.Platform.SDL2UltravioletWindowInfo.WindowCreated">
            <summary>
            Occurs after a window has been created.
            </summary>
        </member>
        <member name="E:Ultraviolet.SDL2.Platform.SDL2UltravioletWindowInfo.WindowDestroyed">
            <summary>
            Occurs when a window is about to be destroyed.
            </summary>
        </member>
        <member name="E:Ultraviolet.SDL2.Platform.SDL2UltravioletWindowInfo.PrimaryWindowChanging">
            <summary>
            Occurs when the primary window is about to change.
            </summary>
        </member>
        <member name="E:Ultraviolet.SDL2.Platform.SDL2UltravioletWindowInfo.PrimaryWindowChanged">
            <summary>
            Occurs when the primary window changes.
            </summary>
        </member>
        <member name="E:Ultraviolet.SDL2.Platform.SDL2UltravioletWindowInfo.CurrentWindowChanged">
            <summary>
            Occurs when the current window is about to change.
            </summary>
        </member>
        <member name="E:Ultraviolet.SDL2.Platform.SDL2UltravioletWindowInfo.CurrentWindowChanging">
            <summary>
            Occurs when the current window changes.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindowInfo.InitializeRenderingAPI(Ultraviolet.SDL2.SDL2PlatformConfiguration)">
            <summary>
            Initializes the rendering API.
            </summary>
            <param name="sdlconfig">The platform configuration settings.</param>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindowInfo.InitializeRenderingAPIFallback(Ultraviolet.SDL2.SDL2PlatformConfiguration,System.Int32)">
            <summary>
            Initializes the rendering API using lower settings in the event that the initial attempt
            to initialize the API failed.
            </summary>
            <param name="sdlconfig">The platform configuration settings.</param>
            <param name="attempt">The number of attempts which have been made to find a working fallback configuration.</param>
            <returns><see langword="true"/> if a fallback configuration was provided; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindowInfo.OnWindowCleanup(Ultraviolet.Platform.IUltravioletWindow)">
            <summary>
            Cleans up a window's resources after it is destroyed.
            </summary>
            <param name="window">The window that was destroyed.</param>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindowInfo.OnWindowCreated(Ultraviolet.Platform.IUltravioletWindow)">
            <summary>
            Raises the WindowCreated event.
            </summary>
            <param name="window">The window that was created.</param>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindowInfo.OnWindowDestroyed(Ultraviolet.Platform.IUltravioletWindow)">
            <summary>
            Raises the WindowDestroyed event.
            </summary>
            <param name="window">The window that is being destroyed.</param>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindowInfo.OnPrimaryWindowChanging">
            <summary>
            Raises the PrimaryWindowChanging event.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindowInfo.OnPrimaryWindowChanged">
            <summary>
            Raises the PrimaryWindowChanged event.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindowInfo.OnCurrentWindowChanging">
            <summary>
            Raises the CurrentWindowChanging event.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindowInfo.OnCurrentWindowChanged">
            <summary>
            Raises the CurrentWindowChanged event.
            </summary>
        </member>
        <member name="P:Ultraviolet.SDL2.Platform.SDL2UltravioletWindowInfo.Windows">
            <summary>
            Gets the window manager's list of windows.
            </summary>
        </member>
        <member name="P:Ultraviolet.SDL2.Platform.SDL2UltravioletWindowInfo.Master">
            <summary>
            Gets or sets the master window.
            </summary>
        </member>
        <member name="P:Ultraviolet.SDL2.Platform.SDL2UltravioletWindowInfo.Primary">
            <summary>
            Gets or sets the primary window.
            </summary>
        </member>
        <member name="P:Ultraviolet.SDL2.Platform.SDL2UltravioletWindowInfo.Current">
            <summary>
            Gets or sets the current window.
            </summary>
        </member>
        <member name="P:Ultraviolet.SDL2.Platform.SDL2UltravioletWindowInfo.VSync">
            <summary>
            Gets or sets a value indicating whether vertical sync is enabled.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2UltravioletWindowInfo.InitializePrimaryWindow(Ultraviolet.UltravioletConfiguration,Ultraviolet.SDL2.SDL2PlatformConfiguration)">
            <summary>
            Initializes the context's primary window.
            </summary>
        </member>
        <member name="T:Ultraviolet.SDL2.Platform.SDL2ScreenDensityService">
            <summary>
            Represents an implentation of <see cref="T:Ultraviolet.Platform.ScreenDensityService"/> using the SDL2 library.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2ScreenDensityService.#ctor(Ultraviolet.UltravioletContext,Ultraviolet.Platform.IUltravioletDisplay)">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.SDL2.Platform.SDL2ScreenDensityService"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
            <param name="display">The <see cref="T:Ultraviolet.Platform.IUltravioletDisplay"/> for which to retrieve density information.</param>
        </member>
        <member name="M:Ultraviolet.SDL2.Platform.SDL2ScreenDensityService.Refresh">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Platform.SDL2ScreenDensityService.DeviceScale">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Platform.SDL2ScreenDensityService.DensityScale">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Platform.SDL2ScreenDensityService.DensityX">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Platform.SDL2ScreenDensityService.DensityY">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.Platform.SDL2ScreenDensityService.DensityBucket">
            <inheritdoc/>
        </member>
        <member name="T:Ultraviolet.SDL2.Platform.WindowStatusFlags">
            <summary>
            Represents flags which can be applied to a window in order to track various states.
            </summary>
        </member>
        <member name="F:Ultraviolet.SDL2.Platform.WindowStatusFlags.None">
            <summary>
            The window has no status flags.
            </summary>
        </member>
        <member name="F:Ultraviolet.SDL2.Platform.WindowStatusFlags.OpenGL">
            <summary>
            The window is an OpenGL window.
            </summary>
        </member>
        <member name="F:Ultraviolet.SDL2.Platform.WindowStatusFlags.Vulkan">
            <summary>
            The window is a Vulkan window.
            </summary>
        </member>
        <member name="F:Ultraviolet.SDL2.Platform.WindowStatusFlags.Focused">
            <summary>
            The window has input focus.
            </summary>
        </member>
        <member name="F:Ultraviolet.SDL2.Platform.WindowStatusFlags.Minimized">
            <summary>
            The window is minimized.
            </summary>
        </member>
        <member name="F:Ultraviolet.SDL2.Platform.WindowStatusFlags.Unshown">
            <summary>
            The window hasn't been shown yet.
            </summary>
        </member>
        <member name="F:Ultraviolet.SDL2.Platform.WindowStatusFlags.BoundForRendering">
            <summary>
            The window has been bound for rendering.
            </summary>
        </member>
        <member name="T:Ultraviolet.SDL2.SDL2PlatformConfiguration">
            <summary>
            Represents the configuration information for SDL2 windows.
            </summary>
        </member>
        <member name="P:Ultraviolet.SDL2.SDL2PlatformConfiguration.RenderingAPI">
            <summary>
            Gets or sets the rendering API which will be used by the application.
            </summary>
        </member>
        <member name="P:Ultraviolet.SDL2.SDL2PlatformConfiguration.MultiSampleBuffers">
            <summary>
            Gets the number of buffers used for multisample anti-aliasing.
            </summary>
        </member>
        <member name="P:Ultraviolet.SDL2.SDL2PlatformConfiguration.MultiSampleSamples">
            <summary>
            Gets the number of samples around the current pixel used for multisample anti-aliasing.
            </summary>
        </member>
        <member name="P:Ultraviolet.SDL2.SDL2PlatformConfiguration.SrgbBuffersEnabled">
            <summary>
            Gets or sets a value indicating whether SRGB encoding should be enabled for
            textures and render buffers if it is supported.
            </summary>
        </member>
        <member name="T:Ultraviolet.SDL2.SDL2PlatformRenderingAPI">
            <summary>
            Represents the rendering API which will be hosted by the SDL2 platform.
            </summary>
        </member>
        <member name="F:Ultraviolet.SDL2.SDL2PlatformRenderingAPI.OpenGL">
            <summary>
            The OpenGL API.
            </summary>
        </member>
        <member name="T:Ultraviolet.SDL2.SDL2Cursor">
            <summary>
            Represents the SDL2 implementation of the <see cref="T:Ultraviolet.Cursor"/> class.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.SDL2Cursor.#ctor(Ultraviolet.UltravioletContext,Ultraviolet.Graphics.Surface2D,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.SDL2.SDL2Cursor"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
            <param name="surface">The surface that contains the cursor image.</param>
            <param name="hx">The x-coordinate of the cursor's hotspot.</param>
            <param name="hy">The y-coordinate of the cursor's hotspot.</param>
        </member>
        <member name="P:Ultraviolet.SDL2.SDL2Cursor.Width">
            <inhertidoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.SDL2Cursor.Height">
            <inhertidoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.SDL2Cursor.HotspotX">
            <inhertidoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.SDL2Cursor.HotspotY">
            <inhertidoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.SDL2Cursor.Native">
            <summary>
            Gets a pointer to the native SDL2 cursor.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.SDL2Cursor.Dispose(System.Boolean)">
            <summary>
            Releases resources associated with the object.
            </summary>
            <param name="disposing">true if the object is being disposed; false if the object is being finalized.</param>
        </member>
        <member name="T:Ultraviolet.SDL2.SDL2CursorProcessor">
            <summary>
            Loads a cursor from an image.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.SDL2CursorProcessor.Process(Ultraviolet.Content.ContentManager,Ultraviolet.Content.IContentProcessorMetadata,Ultraviolet.Graphics.PlatformNativeSurface)">
            <summary>
            Processes the specified data structure into a game asset.
            </summary>
            <param name="manager">The content manager with which the asset is being processed.</param>
            <param name="metadata">The asset's metadata.</param>
            <param name="input">The input data structure to process.</param>
            <returns>The game asset that was created.</returns>
        </member>
        <member name="T:Ultraviolet.SDL2.SDL2Exception">
            <summary>
            Represents an exception thrown as a result of an SDL2 API error.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.SDL2Exception.#ctor">
            <summary>
            Initializes a new instance of the SDL2Exception class.
            </summary>
        </member>
        <member name="T:Ultraviolet.SDL2.SDL2StreamWrapper">
            <summary>
            Represents a wrapper around a <see cref="T:System.IO.Stream"/> which is compatible with SDL2's RWops API.
            </summary>
        </member>
        <member name="T:Ultraviolet.SDL2.SDL2StreamWrapper.RWops_size">
            <summary>
            Represents the method which is called to retrieve the size of an SDL_RWops stream.
            </summary>
        </member>
        <member name="T:Ultraviolet.SDL2.SDL2StreamWrapper.RWops_seek">
            <summary>
            Represents the method which is called to seek to a position within an SDL_RWops stream.
            </summary>
        </member>
        <member name="T:Ultraviolet.SDL2.SDL2StreamWrapper.RWops_read">
            <summary>
            Represents the method which is called to seek to read data from an SDL_RWops stream.
            </summary>
        </member>
        <member name="T:Ultraviolet.SDL2.SDL2StreamWrapper.RWops_write">
            <summary>
            Represents the method which is called to seek to write data to an SDL_RWops stream.
            </summary>
        </member>
        <member name="T:Ultraviolet.SDL2.SDL2StreamWrapper.RWops_close">
            <summary>
            Represents the method which is called to seek to close an SDL_RWops stream.
            </summary>
        </member>
        <member name="T:Ultraviolet.SDL2.SDL2StreamWrapper.SDL_RWops">
            <summary>
            Note that this is NOT a complete specification of the SDL_RWops structure, which is a big
            complicated union full of platform-specific data. We're only declaring what we need for our
            stream wrapper, and trusting that if we set <see cref="F:Ultraviolet.SDL2.SDL2StreamWrapper.SDL_RWops.type"/> to SDL_RWOPS_UNKNOWN
            that SDL2 isn't going to try to access the memory that we're neglecting to allocate.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.SDL2StreamWrapper.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.SDL2.SDL2StreamWrapper"/> class.
            </summary>
            <param name="stream">The stream which will be wrapped by this object.</param>
        </member>
        <member name="M:Ultraviolet.SDL2.SDL2StreamWrapper.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.SDL2StreamWrapper.ToIntPtr">
            <summary>
            Gets a <see cref="T:System.IntPtr"/> which represents the wrapper's underlying SDL_RWops structure.
            </summary>
            <returns>A pointer to the native RWops structure which this object represents.</returns>
        </member>
        <member name="M:Ultraviolet.SDL2.SDL2StreamWrapper.RWops_size_callback(Ultraviolet.SDL2.SDL2StreamWrapper.SDL_RWops*)">
            <summary>
            Implements the size() callback for this stream.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.SDL2StreamWrapper.RWops_seek_callback(Ultraviolet.SDL2.SDL2StreamWrapper.SDL_RWops*,System.Int64,System.Int32)">
            <summary>
            Implements the seek() callback for this stream.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.SDL2StreamWrapper.RWops_read_callback(Ultraviolet.SDL2.SDL2StreamWrapper.SDL_RWops*,System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
            Implements the read() callback for this stream.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.SDL2StreamWrapper.RWops_write_callback(Ultraviolet.SDL2.SDL2StreamWrapper.SDL_RWops*,System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
            Implements the write() callback for this stream.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.SDL2StreamWrapper.RWops_close_callback(Ultraviolet.SDL2.SDL2StreamWrapper.SDL_RWops*)">
            <summary>
            Implements the close() callback for this stream.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.SDL2StreamWrapper.Dispose(System.Boolean)">
            <summary>
            Releases memory associated with the object.
            </summary>
        </member>
        <member name="T:Ultraviolet.SDL2.SDL2Strings">
            <summary>
            Contains the implementation's string resources.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.SDL2Strings.#cctor">
            <summary>
            Initializes the SDL2Strings type.
            </summary>
        </member>
        <member name="T:Ultraviolet.SDL2.SDL2UltravioletContext">
            <summary>
            Represents the base class for Ultraviolet implementations which use SDL2.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.SDL2UltravioletContext.#ctor(Ultraviolet.IUltravioletHost,Ultraviolet.UltravioletConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.SDL2.SDL2UltravioletContext"/> class.
            </summary>
            <param name="host">The object that is hosting the Ultraviolet context.</param>
            <param name="configuration">The Ultraviolet Framework configuration settings for this context.</param>
        </member>
        <member name="M:Ultraviolet.SDL2.SDL2UltravioletContext.UpdateSuspended">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.SDL2UltravioletContext.Update(Ultraviolet.UltravioletTime)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.SDL2UltravioletContext.OnShutdown">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.SDL2UltravioletContext.InitSDL(Ultraviolet.UltravioletConfiguration)">
            <summary>
            Initializes SDL2.
            </summary>
            <param name="configuration">The Ultraviolet Framework configuration settings for this context.</param>
            <returns><see langword="true"/> if SDL2 was successfully initialized; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.SDL2.SDL2UltravioletContext.PumpEvents">
            <summary>
            Pumps the SDL2 event queue.
            </summary>
            <returns><see langword="true"/> if the context should continue processing the frame; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.SDL2.SDL2UltravioletContext.SDLEventFilter(System.IntPtr,Ultraviolet.SDL2.Native.SDL_Event*)">
            <summary>
            Filters SDL2 events.
            </summary>
        </member>
        <member name="T:Ultraviolet.SDL2.SDL2UltravioletInput">
            <summary>
            Represents the SDL2 implementation of the Ultraviolet Input subsystem.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.SDL2UltravioletInput.#ctor(Ultraviolet.UltravioletContext)">
            <summary>
            Initializes a new instance of the SDL2UltravioletInput class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
        </member>
        <member name="M:Ultraviolet.SDL2.SDL2UltravioletInput.Ultraviolet#Core#Messages#IMessageSubscriber{Ultraviolet#UltravioletMessageID}#ReceiveMessage(Ultraviolet.UltravioletMessageID,Ultraviolet.Core.Messages.MessageData)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.SDL2UltravioletInput.ResetDeviceStates">
            <summary>
            Resets the device's state in preparation for the next frame.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.SDL2UltravioletInput.Update(Ultraviolet.UltravioletTime)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.SDL2UltravioletInput.ShowSoftwareKeyboard">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.SDL2UltravioletInput.ShowSoftwareKeyboard(Ultraviolet.Input.KeyboardMode)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.SDL2UltravioletInput.HideSoftwareKeyboard">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.SDL2UltravioletInput.IsKeyboardSupported">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.SDL2UltravioletInput.IsKeyboardRegistered">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.SDL2UltravioletInput.GetKeyboard">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.SDL2UltravioletInput.IsMouseSupported">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.SDL2UltravioletInput.IsMouseRegistered">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.SDL2UltravioletInput.GetMouse">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.SDL2UltravioletInput.GetGamePadCount">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.SDL2UltravioletInput.IsGamePadSupported">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.SDL2UltravioletInput.IsGamePadConnected">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.SDL2UltravioletInput.IsGamePadConnected(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.SDL2UltravioletInput.IsGamePadRegistered">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.SDL2UltravioletInput.IsGamePadRegistered(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.SDL2UltravioletInput.GetGamePadForPlayer(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.SDL2UltravioletInput.GetFirstConnectedGamePad">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.SDL2UltravioletInput.GetFirstRegisteredGamePad">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.SDL2UltravioletInput.GetPrimaryGamePad">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.SDL2UltravioletInput.IsTouchSupported">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.SDL2UltravioletInput.IsTouchDeviceConnected">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.SDL2UltravioletInput.IsTouchDeviceConnected(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.SDL2UltravioletInput.IsTouchDeviceRegistered">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.SDL2UltravioletInput.IsTouchDeviceRegistered(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.SDL2UltravioletInput.GetTouchDevice(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.SDL2UltravioletInput.GetFirstConnectedTouchDevice">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.SDL2UltravioletInput.GetFirstRegisteredTouchDevice">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.SDL2UltravioletInput.GetPrimaryTouchDevice">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.SDL2UltravioletInput.EmulateMouseWithTouchInput">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.SDL2UltravioletInput.IsMouseCursorAvailable">
            <inheritdoc/>
        </member>
        <member name="E:Ultraviolet.SDL2.SDL2UltravioletInput.Updating">
            <inheritdoc/>
        </member>
        <member name="E:Ultraviolet.SDL2.SDL2UltravioletInput.KeyboardRegistered">
            <inheritdoc/>
        </member>
        <member name="E:Ultraviolet.SDL2.SDL2UltravioletInput.MouseRegistered">
            <inheritdoc/>
        </member>
        <member name="E:Ultraviolet.SDL2.SDL2UltravioletInput.GamePadConnected">
            <inheritdoc/>
        </member>
        <member name="E:Ultraviolet.SDL2.SDL2UltravioletInput.GamePadDisconnected">
            <inheritdoc/>
        </member>
        <member name="E:Ultraviolet.SDL2.SDL2UltravioletInput.GamePadRegistered">
            <inheritdoc/>
        </member>
        <member name="E:Ultraviolet.SDL2.SDL2UltravioletInput.TouchDeviceRegistered">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.SDL2UltravioletInput.RegisterKeyboardDevice(Ultraviolet.SDL2.Input.SDL2KeyboardDevice)">
            <summary>
            Registers the specified device as having received user input.
            </summary>
            <param name="device">The device to register.</param>
            <returns><see langword="true"/> if the device was registered; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.SDL2.SDL2UltravioletInput.RegisterMouseDevice(Ultraviolet.SDL2.Input.SDL2MouseDevice)">
            <summary>
            Registers the specified device as having received user input.
            </summary>
            <param name="device">The device to register.</param>
            <returns><see langword="true"/> if the device was registered; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.SDL2.SDL2UltravioletInput.RegisterGamePadDevice(Ultraviolet.SDL2.Input.SDL2GamePadDevice)">
            <summary>
            Registers the specified device as having received user input.
            </summary>
            <param name="device">The device to register.</param>
            <returns><see langword="true"/> if the device was registered; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.SDL2.SDL2UltravioletInput.RegisterTouchDevice(Ultraviolet.SDL2.Input.SDL2TouchDevice)">
            <summary>
            Registers the specified device as having received user input.
            </summary>
            <param name="device">The device to register.</param>
            <returns><see langword="true"/> if the device was registered; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ultraviolet.SDL2.SDL2UltravioletInput.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.SDL2UltravioletInput.LoadGameControllerMappingDatabase(Ultraviolet.UltravioletContext)">
            <summary>
            Attempts to load gamecontrollerdb.txt, if it is located in the application's root directory. 
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.SDL2UltravioletInput.OnGamePadConnected(Ultraviolet.Input.GamePadDevice,System.Int32)">
            <summary>
            Raises the <see cref="E:Ultraviolet.SDL2.SDL2UltravioletInput.GamePadConnected"/> event.
            </summary>
            <param name="device">The device that was connected.</param>
            <param name="playerIndex">The player index associated with the game pad.</param>
        </member>
        <member name="M:Ultraviolet.SDL2.SDL2UltravioletInput.OnGamePadDisconnected(Ultraviolet.Input.GamePadDevice,System.Int32)">
            <summary>
            Raises the <see cref="E:Ultraviolet.SDL2.SDL2UltravioletInput.GamePadDisconnected"/> event.
            </summary>
            <param name="device">The device that was disconnected.</param>
            <param name="playerIndex">The player index associated with the game pad.</param>
        </member>
        <member name="T:Ultraviolet.SDL2.SDL2UltravioletMessages">
            <summary>
            Contains the implementation's Ultraviolet engine events.
            </summary>
        </member>
        <member name="F:Ultraviolet.SDL2.SDL2UltravioletMessages.SDLEvent">
            <summary>
            An event indicating that an SDL event was raised.
            </summary>
        </member>
        <member name="T:Ultraviolet.SDL2.SDL2UltravioletPlatform">
            <summary>
            Represents the SDL2 implementation of the <see cref="T:Ultraviolet.IUltravioletPlatform"/> interface.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.SDL2UltravioletPlatform.#ctor(Ultraviolet.UltravioletContext,Ultraviolet.UltravioletConfiguration,Ultraviolet.SDL2.SDL2PlatformConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Ultraviolet.SDL2.SDL2UltravioletPlatform"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
            <param name="uvconfig">The Ultraviolet Framework's configuration settings.</param>
            <param name="sdlconfig">The SDL2 platform configuration settings.</param>
        </member>
        <member name="M:Ultraviolet.SDL2.SDL2UltravioletPlatform.Update(Ultraviolet.UltravioletTime)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.SDL2UltravioletPlatform.ShowMessageBox(Ultraviolet.MessageBoxType,System.String,System.String,Ultraviolet.Platform.IUltravioletWindow)">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.SDL2UltravioletPlatform.Cursor">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.SDL2UltravioletPlatform.Clipboard">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.SDL2UltravioletPlatform.Windows">
            <inheritdoc/>
        </member>
        <member name="P:Ultraviolet.SDL2.SDL2UltravioletPlatform.Displays">
            <inheritdoc/>
        </member>
        <member name="E:Ultraviolet.SDL2.SDL2UltravioletPlatform.Updating">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.SDL2UltravioletPlatform.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Ultraviolet.SDL2.SDL2UltravioletPlatform.OnUpdating(Ultraviolet.UltravioletTime)">
            <summary>
            Raises the Updating event.
            </summary>
            <param name="time">Time elapsed since the last call to Update.</param>
        </member>
        <member name="T:Ultraviolet.SDL2.SDLFactoryInitializer">
            <summary>
            Initializes factory methods for the SDL implementation of the graphics subsystem.
            </summary>
        </member>
        <member name="M:Ultraviolet.SDL2.SDLFactoryInitializer.Initialize(Ultraviolet.UltravioletContext,Ultraviolet.UltravioletFactory)">
            <inheritdoc/>
        </member>
    </members>
</doc>
